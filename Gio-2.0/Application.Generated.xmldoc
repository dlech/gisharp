<declaration>

<member name='ParentInstance'>
#pragmawarningdisableCS0649
</member>

<member name='Priv'>
</member>

<member name='ActionGroup'>
</member>

<member name='ApplicationId_'>
</member>

<member name='Flags_'>
</member>

<member name='InactivityTimeout_'>
</member>

<member name='IsBusy_'>
<summary>
Whether the application is currently marked as busy through
<see cref="M:Application.MarkBusy()"/> or <see cref="M:Application.BindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.Utf8)"/>.
</summary>
</member>

<member name='IsRegistered_'>
</member>

<member name='IsRemote_'>
</member>

<member name='ResourceBasePath_'>
</member>

<member name='Default'>
<summary>
Returns the default <see cref="Application"/> instance for this process.
</summary>
<remarks>
Normally there is only one <see cref="Application"/> per process and it becomes
the default when it is created.  You can exercise more control over
this by using <see cref="M:Application.SetDefault()"/>.

If there is no default application then <c>null</c> is returned.
</remarks>
</member>

<member name='ApplicationId'>
<summary>
Gets the unique identifier for this instance.
</summary>
</member>

<member name='DbusObjectPath'>
<summary>
Gets the D-Bus object path being used by the application, or <c>null</c>.
</summary>
<remarks>
If <see cref="Application"/> is using its D-Bus backend then this function will
return the D-Bus object path that <see cref="Application"/> is using.  If the
application is the primary instance then there is an object published
at this path.  If the application is not the primary instance then
the result of this function is undefined.

If <see cref="Application"/> is not using D-Bus then this function will return
<c>null</c>.  This includes the situation where the D-Bus backend would
normally be in use but we were unable to connect to the bus.

This function must not be called before the application has been
registered.  See <see cref="M:Application.GetIsRegistered()"/>.
</remarks>
</member>

<member name='Flags'>
<summary>
Gets the flags for this instance.
</summary>
<remarks>
See <see cref="ApplicationFlags"/>.
</remarks>
</member>

<member name='InactivityTimeout'>
<summary>
Gets the current inactivity timeout for the application.
</summary>
<remarks>
This is the amount of time (in milliseconds) after the last call to
<see cref="M:Application.Release()"/> before the application stops running.
</remarks>
</member>

<member name='IsBusy'>
<summary>
Gets the application's current busy state, as set through
<see cref="M:Application.MarkBusy()"/> or <see cref="M:Application.BindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.Utf8)"/>.
</summary>
</member>

<member name='IsRegistered'>
<summary>
Checks if this instance is registered.
</summary>
<remarks>
An application is registered if <see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/> has been
successfully called.
</remarks>
</member>

<member name='IsRemote'>
<summary>
Checks if this instance is remote.
</summary>
<remarks>
If this instance is remote then it means that another instance of
application already exists (the 'primary' instance).  Calls to
perform actions on this instance will result in the actions being
performed by the primary instance.

The value of this property cannot be accessed before
<see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/> has been called.  See
<see cref="M:Application.GetIsRegistered()"/>.
</remarks>
</member>

<member name='ResourceBasePath'>
<summary>
Gets the resource base path of this instance.
</summary>
<remarks>
See <see cref="M:Application.SetResourceBasePath(GISharp.Lib.GLib.Utf8)"/> for more information.
</remarks>
</member>

<member name='New(GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.Gio.ApplicationFlags)'>
</member>

<member name='Application(GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.Gio.ApplicationFlags)'>
<summary>
Creates a new <see cref="Application"/> instance.
</summary>
<remarks>
If non-<c>null</c>, the application id must be valid.  See
<see cref="M:Application.IdIsValid(GISharp.Lib.GLib.Utf8)"/>.

If no application ID is given then some features of <see cref="Application"/>
(most notably application uniqueness) will be disabled.
</remarks>
<param name="applicationId">
the application id
</param>
<param name="flags">
the application flags
</param>
</member>

<member name='New(System.String?,GISharp.Lib.Gio.ApplicationFlags)'>
</member>

<member name='Application(System.String?,GISharp.Lib.Gio.ApplicationFlags)'>
<summary>
Creates a new <see cref="Application"/> instance.
</summary>
<remarks>
If non-<c>null</c>, the application id must be valid.  See
<see cref="M:Application.IdIsValid(GISharp.Lib.GLib.Utf8)"/>.

If no application ID is given then some features of <see cref="Application"/>
(most notably application uniqueness) will be disabled.
</remarks>
<param name="applicationId">
the application id
</param>
<param name="flags">
the application flags
</param>
</member>

<member name='ActivatedEventArgs'>
<summary>
The ::activate signal is emitted on the primary instance when an
activation occurs. See <see cref="M:Application.Activate()"/>.
</summary>
</member>

<member name='Activated'>
<summary>
The ::activate signal is emitted on the primary instance when an
activation occurs. See <see cref="M:Application.Activate()"/>.
</summary>
</member>

<member name='CommandLine'>
<param name="commandLine">
a <see cref="ApplicationCommandLine"/> representing the
    passed commandline
</param>
</member>

<member name='ReturnValue'>
<returns>
An integer that is set as the exit status for the calling
  process. See <see cref="M:ApplicationCommandLine.SetExitStatus(System.Int32)"/>.
</returns>
</member>

<member name='CommandLinedEventArgs'>
<summary>
The ::command-line signal is emitted on the primary instance when
a commandline is not handled locally. See <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/> and
the <see cref="ApplicationCommandLine"/> documentation for more information.
</summary>
</member>

<member name='CommandLined'>
<summary>
The ::command-line signal is emitted on the primary instance when
a commandline is not handled locally. See <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/> and
the <see cref="ApplicationCommandLine"/> documentation for more information.
</summary>
</member>

<member name='Options'>
<param name="options">
the options dictionary
</param>
</member>

<member name='ReturnValue'>
<returns>
an exit code. If you have handled your options and want
to exit the process, return a non-negative option, 0 for success,
and a positive value for failure. To continue, return -1 to let
the default option processing continue.
</returns>
</member>

<member name='HandledLocalOptionsEventArgs'>
<summary>
The ::handle-local-options signal is emitted on the local instance
after the parsing of the commandline options has occurred.
</summary>
<remarks>
You can add options to be recognised during commandline option
parsing using <see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/> and
<see cref="M:Application.AddOptionGroup(GISharp.Lib.GLib.OptionGroup)"/>.

Signal handlers can inspect <paramref name="options"/> (along with values pointed to
from the <paramref name="argData"/> of an installed #GOptionEntrys) in order to
decide to perform certain actions, including direct local handling
(which may be useful for options like --version).

In the event that the application is marked
<see cref="ApplicationFlags.HandlesCommandLine"/> the "normal processing" will
send the <paramref name="options"/> dictionary to the primary instance where it can be
read with <see cref="M:ApplicationCommandLine.GetOptions()"/>.  The signal
handler can modify the dictionary before returning, and the
modified dictionary will be sent.

In the event that <see cref="ApplicationFlags.HandlesCommandLine"/> is not set,
"normal processing" will treat the remaining uncollected command
line arguments as filenames or URIs.  If there are no arguments,
the application is activated by <see cref="M:Application.Activate()"/>.  One or
more arguments results in a call to <see cref="M:Application.Open(GISharp.Runtime.CPtrArray`1[GISharp.Lib.Gio.IFile],GISharp.Lib.GLib.Utf8)"/>.

If you want to handle the local commandline arguments for yourself
by converting them to calls to <see cref="M:Application.Open(GISharp.Runtime.CPtrArray`1[GISharp.Lib.Gio.IFile],GISharp.Lib.GLib.Utf8)"/> or
<see cref="M:ActionGroup.ActivateAction(GISharp.Lib.Gio.IActionGroup,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Variant)"/> then you must be sure to register
the application first.  You should probably not call
<see cref="M:Application.Activate()"/> for yourself, however: just return -1 and
allow the default handler to do it for you.  This will ensure that
the `--gapplication-service` switch works properly (i.e. no activation
in that case).

Note that this signal is emitted from the default implementation of
local_command_line().  If you override that function and don't
chain up then this signal will never be emitted.

You can override local_command_line() if you need more powerful
capabilities than what is provided here, but this should not
normally be required.
</remarks>
</member>

<member name='HandledLocalOptions'>
<summary>
The ::handle-local-options signal is emitted on the local instance
after the parsing of the commandline options has occurred.
</summary>
<remarks>
You can add options to be recognised during commandline option
parsing using <see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/> and
<see cref="M:Application.AddOptionGroup(GISharp.Lib.GLib.OptionGroup)"/>.

Signal handlers can inspect <paramref name="options"/> (along with values pointed to
from the <paramref name="argData"/> of an installed #GOptionEntrys) in order to
decide to perform certain actions, including direct local handling
(which may be useful for options like --version).

In the event that the application is marked
<see cref="ApplicationFlags.HandlesCommandLine"/> the "normal processing" will
send the <paramref name="options"/> dictionary to the primary instance where it can be
read with <see cref="M:ApplicationCommandLine.GetOptions()"/>.  The signal
handler can modify the dictionary before returning, and the
modified dictionary will be sent.

In the event that <see cref="ApplicationFlags.HandlesCommandLine"/> is not set,
"normal processing" will treat the remaining uncollected command
line arguments as filenames or URIs.  If there are no arguments,
the application is activated by <see cref="M:Application.Activate()"/>.  One or
more arguments results in a call to <see cref="M:Application.Open(GISharp.Runtime.CPtrArray`1[GISharp.Lib.Gio.IFile],GISharp.Lib.GLib.Utf8)"/>.

If you want to handle the local commandline arguments for yourself
by converting them to calls to <see cref="M:Application.Open(GISharp.Runtime.CPtrArray`1[GISharp.Lib.Gio.IFile],GISharp.Lib.GLib.Utf8)"/> or
<see cref="M:ActionGroup.ActivateAction(GISharp.Lib.Gio.IActionGroup,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Variant)"/> then you must be sure to register
the application first.  You should probably not call
<see cref="M:Application.Activate()"/> for yourself, however: just return -1 and
allow the default handler to do it for you.  This will ensure that
the `--gapplication-service` switch works properly (i.e. no activation
in that case).

Note that this signal is emitted from the default implementation of
local_command_line().  If you override that function and don't
chain up then this signal will never be emitted.

You can override local_command_line() if you need more powerful
capabilities than what is provided here, but this should not
normally be required.
</remarks>
</member>

<member name='Files'>
<param name="files">
an array of #GFiles
</param>
</member>

<member name='Hint'>
<param name="hint">
a hint provided by the calling instance
</param>
</member>

<member name='OpenedEventArgs'>
<summary>
The ::open signal is emitted on the primary instance when there are
files to open. See <see cref="M:Application.Open(GISharp.Runtime.CPtrArray`1[GISharp.Lib.Gio.IFile],GISharp.Lib.GLib.Utf8)"/> for more information.
</summary>
</member>

<member name='Opened'>
<summary>
The ::open signal is emitted on the primary instance when there are
files to open. See <see cref="M:Application.Open(GISharp.Runtime.CPtrArray`1[GISharp.Lib.Gio.IFile],GISharp.Lib.GLib.Utf8)"/> for more information.
</summary>
</member>

<member name='ShutdownedEventArgs'>
<summary>
The ::shutdown signal is emitted only on the registered primary instance
immediately after the main loop terminates.
</summary>
</member>

<member name='Shutdowned'>
<summary>
The ::shutdown signal is emitted only on the registered primary instance
immediately after the main loop terminates.
</summary>
</member>

<member name='StartupedEventArgs'>
<summary>
The ::startup signal is emitted on the primary instance immediately
after registration. See <see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/>.
</summary>
</member>

<member name='Startuped'>
<summary>
The ::startup signal is emitted on the primary instance immediately
after registration. See <see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/>.
</summary>
</member>

<member name='GetDefault()'>
<summary>
Returns the default <see cref="Application"/> instance for this process.
</summary>
<remarks>
Normally there is only one <see cref="Application"/> per process and it becomes
the default when it is created.  You can exercise more control over
this by using <see cref="M:Application.SetDefault()"/>.

If there is no default application then <c>null</c> is returned.
</remarks>
<returns>
the default application for this process, or <c>null</c>
</returns>
</member>

<member name='IdIsValid(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Checks if <paramref name="applicationId"/> is a valid application identifier.
</summary>
<remarks>
A valid ID is required for calls to <see cref="M:Application.#ctor(GISharp.Lib.GLib.Utf8,GISharp.Lib.Gio.ApplicationFlags)"/> and
<see cref="M:Application.SetApplicationId(GISharp.Lib.GLib.Utf8)"/>.

Application identifiers follow the same format as
[D-Bus well-known bus names](https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
For convenience, the restrictions on application identifiers are
reproduced here:

- Application identifiers are composed of 1 or more elements separated by a
  period (`.`) character. All elements must contain at least one character.

- Each element must only contain the ASCII characters `[A-Z][a-z][0-9]_-`,
  with `-` discouraged in new application identifiers. Each element must not
  begin with a digit.

- Application identifiers must contain at least one `.` (period) character
  (and thus at least two elements).

- Application identifiers must not begin with a `.` (period) character.

- Application identifiers must not exceed 255 characters.

Note that the hyphen (`-`) character is allowed in application identifiers,
but is problematic or not allowed in various specifications and APIs that
refer to D-Bus, such as
[Flatpak application IDs](http://docs.flatpak.org/en/latest/introduction.html#identifiers),
the
[`DBusActivatable` interface in the Desktop Entry Specification](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#dbus),
and the convention that an application's "main" interface and object path
resemble its application identifier and bus name. To avoid situations that
require special-case handling, it is recommended that new application
identifiers consistently replace hyphens with underscores.

Like D-Bus interface names, application identifiers should start with the
reversed DNS domain name of the author of the interface (in lower-case), and
it is conventional for the rest of the application identifier to consist of
words run together, with initial capital letters.

As with D-Bus interface names, if the author's DNS domain name contains
hyphen/minus characters they should be replaced by underscores, and if it
contains leading digits they should be escaped by prepending an underscore.
For example, if the owner of 7-zip.org used an application identifier for an
archiving application, it might be named `org._7_zip.Archiver`.
</remarks>
<param name="applicationId">
a potential application identifier
</param>
<returns>
<c>true</c> if <paramref name="applicationId"/> is valid
</returns>
</member>

<member name='IdIsValid(System.String)'>
<summary>
Checks if <paramref name="applicationId"/> is a valid application identifier.
</summary>
<remarks>
A valid ID is required for calls to <see cref="M:Application.#ctor(GISharp.Lib.GLib.Utf8,GISharp.Lib.Gio.ApplicationFlags)"/> and
<see cref="M:Application.SetApplicationId(GISharp.Lib.GLib.Utf8)"/>.

Application identifiers follow the same format as
[D-Bus well-known bus names](https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
For convenience, the restrictions on application identifiers are
reproduced here:

- Application identifiers are composed of 1 or more elements separated by a
  period (`.`) character. All elements must contain at least one character.

- Each element must only contain the ASCII characters `[A-Z][a-z][0-9]_-`,
  with `-` discouraged in new application identifiers. Each element must not
  begin with a digit.

- Application identifiers must contain at least one `.` (period) character
  (and thus at least two elements).

- Application identifiers must not begin with a `.` (period) character.

- Application identifiers must not exceed 255 characters.

Note that the hyphen (`-`) character is allowed in application identifiers,
but is problematic or not allowed in various specifications and APIs that
refer to D-Bus, such as
[Flatpak application IDs](http://docs.flatpak.org/en/latest/introduction.html#identifiers),
the
[`DBusActivatable` interface in the Desktop Entry Specification](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#dbus),
and the convention that an application's "main" interface and object path
resemble its application identifier and bus name. To avoid situations that
require special-case handling, it is recommended that new application
identifiers consistently replace hyphens with underscores.

Like D-Bus interface names, application identifiers should start with the
reversed DNS domain name of the author of the interface (in lower-case), and
it is conventional for the rest of the application identifier to consist of
words run together, with initial capital letters.

As with D-Bus interface names, if the author's DNS domain name contains
hyphen/minus characters they should be replaced by underscores, and if it
contains leading digits they should be escaped by prepending an underscore.
For example, if the owner of 7-zip.org used an application identifier for an
archiving application, it might be named `org._7_zip.Archiver`.
</remarks>
<param name="applicationId">
a potential application identifier
</param>
<returns>
<c>true</c> if <paramref name="applicationId"/> is valid
</returns>
</member>

<member name='Activate()'>
<summary>
Activates the application.
</summary>
<remarks>
In essence, this results in the <see cref="Application"/>::activate signal being
emitted in the primary instance.

The application must be registered before calling this function.
</remarks>
</member>

<member name='AddMainOption(GISharp.Lib.GLib.UnownedUtf8,System.SByte,GISharp.Lib.GLib.OptionFlags,GISharp.Lib.GLib.OptionArg,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Add an option to be handled by this instance.
</summary>
<remarks>
Calling this function is the equivalent of calling
<see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/> with a single #GOptionEntry
that has its arg_data member set to <c>null</c>.

The parsed arguments will be packed into a #GVariantDict which
is passed to <see cref="Application"/>::handle-local-options. If
<see cref="ApplicationFlags.HandlesCommandLine"/> is set, then it will also
be sent to the primary instance. See
<see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/> for more details.

See #GOptionEntry for more documentation of the arguments.
</remarks>
<param name="longName">
the long name of an option used to specify it in a commandline
</param>
<param name="shortName">
the short name of an option
</param>
<param name="flags">
flags from #GOptionFlags
</param>
<param name="arg">
the type of the option, as a #GOptionArg
</param>
<param name="description">
the description for the option in `--help` output
</param>
<param name="argDescription">
the placeholder to use for the extra argument
   parsed by the option in `--help` output
</param>
</member>

<member name='AddMainOption(System.String,System.SByte,GISharp.Lib.GLib.OptionFlags,GISharp.Lib.GLib.OptionArg,System.String,System.String?)'>
<summary>
Add an option to be handled by this instance.
</summary>
<remarks>
Calling this function is the equivalent of calling
<see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/> with a single #GOptionEntry
that has its arg_data member set to <c>null</c>.

The parsed arguments will be packed into a #GVariantDict which
is passed to <see cref="Application"/>::handle-local-options. If
<see cref="ApplicationFlags.HandlesCommandLine"/> is set, then it will also
be sent to the primary instance. See
<see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/> for more details.

See #GOptionEntry for more documentation of the arguments.
</remarks>
<param name="longName">
the long name of an option used to specify it in a commandline
</param>
<param name="shortName">
the short name of an option
</param>
<param name="flags">
flags from #GOptionFlags
</param>
<param name="arg">
the type of the option, as a #GOptionArg
</param>
<param name="description">
the description for the option in `--help` output
</param>
<param name="argDescription">
the placeholder to use for the extra argument
   parsed by the option in `--help` output
</param>
</member>

<member name='AddMainOptionEntries(System.ReadOnlySpan&lt;GISharp.Lib.GLib.OptionEntry&gt;)'>
<summary>
Adds main option entries to be handled by this instance.
</summary>
<remarks>
This function is comparable to g_option_context_add_main_entries().

After the commandline arguments are parsed, the
<see cref="Application"/>::handle-local-options signal will be emitted.  At this
point, the application can inspect the values pointed to by this instance
in the given #GOptionEntrys.

Unlike #GOptionContext, <see cref="Application"/> supports giving a <c>null</c>
this instance for a non-callback #GOptionEntry.  This results in the
argument in question being packed into a #GVariantDict which is also
passed to <see cref="Application"/>::handle-local-options, where it can be
inspected and modified.  If <see cref="ApplicationFlags.HandlesCommandLine"/> is
set, then the resulting dictionary is sent to the primary instance,
where <see cref="M:ApplicationCommandLine.GetOptions()"/> will return it.
This "packing" is done according to the type of the argument --
booleans for normal flags, strings for strings, bytestrings for
filenames, etc.  The packing only occurs if the flag is given (ie: we
do not pack a "false" #GVariant in the case that a flag is missing).

In general, it is recommended that all commandline arguments are
parsed locally.  The options dictionary should then be used to
transmit the result of the parsing to the primary instance, where
g_variant_dict_lookup() can be used.  For local options, it is
possible to either use this instance in the usual way, or to consult (and
potentially remove) the option from the options dictionary.

This function is new in GLib 2.40.  Before then, the only real choice
was to send all of the commandline arguments (options and all) to the
primary instance for handling.  <see cref="Application"/> ignored them completely
on the local side.  Calling this function "opts in" to the new
behaviour, and in particular, means that unrecognised options will be
treated as errors.  Unrecognised options have never been ignored when
<see cref="ApplicationFlags.HandlesCommandLine"/> is unset.

If <see cref="Application"/>::handle-local-options needs to see the list of
filenames, then the use of %G_OPTION_REMAINING is recommended.  If
this instance is <c>null</c> then %G_OPTION_REMAINING can be used as a key into
the options dictionary.  If you do use %G_OPTION_REMAINING then you
need to handle these arguments for yourself because once they are
consumed, they will no longer be visible to the default handling
(which treats them as filenames to be opened).

It is important to use the proper GVariant format when retrieving
the options with g_variant_dict_lookup():
- for %G_OPTION_ARG_NONE, use b
- for %G_OPTION_ARG_STRING, use &amp;s
- for %G_OPTION_ARG_INT, use i
- for %G_OPTION_ARG_INT64, use x
- for %G_OPTION_ARG_DOUBLE, use d
- for %G_OPTION_ARG_FILENAME, use ^ay
- for %G_OPTION_ARG_STRING_ARRAY, use &amp;as
- for %G_OPTION_ARG_FILENAME_ARRAY, use ^aay
</remarks>
<param name="entries">
a
          <c>null</c>-terminated list of #GOptionEntrys
</param>
</member>

<member name='AddOptionGroup(GISharp.Lib.GLib.OptionGroup)'>
<summary>
Adds a #GOptionGroup to the commandline handling of this instance.
</summary>
<remarks>
This function is comparable to g_option_context_add_group().

Unlike <see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/>, this function does
not deal with <c>null</c> this instance and never transmits options to the
primary instance.

The reason for that is because, by the time the options arrive at the
primary instance, it is typically too late to do anything with them.
Taking the GTK option group as an example: GTK will already have been
initialised by the time the <see cref="Application"/>::command-line handler runs.
In the case that this is not the first-running instance of the
application, the existing instance may already have been running for
a very long time.

This means that the options from #GOptionGroup are only really usable
in the case that the instance of the application being run is the
first instance.  Passing options like `--display=` or `--gdk-debug=`
on future runs will have no effect on the existing primary instance.

Calling this function will cause the options in the supplied option
group to be parsed, but it does not cause you to be "opted in" to the
new functionality whereby unrecognised options are rejected even if
<see cref="ApplicationFlags.HandlesCommandLine"/> was given.
</remarks>
<param name="group">
a #GOptionGroup
</param>
</member>

<member name='BindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Marks this instance as busy (see <see cref="M:Application.MarkBusy()"/>) while
this instance on this instance is <c>true</c>.
</summary>
<remarks>
The binding holds a reference to this instance while it is active, but
not to this instance. Instead, the binding is destroyed when this instance is
finalized.
</remarks>
<param name="object">
a #GObject
</param>
<param name="property">
the name of a boolean property of this instance
</param>
</member>

<member name='BindBusyProperty(GISharp.Lib.GObject.Object,System.String)'>
<summary>
Marks this instance as busy (see <see cref="M:Application.MarkBusy()"/>) while
this instance on this instance is <c>true</c>.
</summary>
<remarks>
The binding holds a reference to this instance while it is active, but
not to this instance. Instead, the binding is destroyed when this instance is
finalized.
</remarks>
<param name="object">
a #GObject
</param>
<param name="property">
the name of a boolean property of this instance
</param>
</member>

<member name='GetApplicationId()'>
<summary>
Gets the unique identifier for this instance.
</summary>
<returns>
the identifier for this instance, owned by this instance
</returns>
</member>

<member name='GetDbusObjectPath()'>
<summary>
Gets the D-Bus object path being used by the application, or <c>null</c>.
</summary>
<remarks>
If <see cref="Application"/> is using its D-Bus backend then this function will
return the D-Bus object path that <see cref="Application"/> is using.  If the
application is the primary instance then there is an object published
at this path.  If the application is not the primary instance then
the result of this function is undefined.

If <see cref="Application"/> is not using D-Bus then this function will return
<c>null</c>.  This includes the situation where the D-Bus backend would
normally be in use but we were unable to connect to the bus.

This function must not be called before the application has been
registered.  See <see cref="M:Application.GetIsRegistered()"/>.
</remarks>
<returns>
the object path, or <c>null</c>
</returns>
</member>

<member name='GetFlags()'>
<summary>
Gets the flags for this instance.
</summary>
<remarks>
See <see cref="ApplicationFlags"/>.
</remarks>
<returns>
the flags for this instance
</returns>
</member>

<member name='GetInactivityTimeout()'>
<summary>
Gets the current inactivity timeout for the application.
</summary>
<remarks>
This is the amount of time (in milliseconds) after the last call to
<see cref="M:Application.Release()"/> before the application stops running.
</remarks>
<returns>
the timeout, in milliseconds
</returns>
</member>

<member name='GetIsBusy()'>
<summary>
Gets the application's current busy state, as set through
<see cref="M:Application.MarkBusy()"/> or <see cref="M:Application.BindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.Utf8)"/>.
</summary>
<returns>
<c>true</c> if this instance is currenty marked as busy
</returns>
</member>

<member name='GetIsRegistered()'>
<summary>
Checks if this instance is registered.
</summary>
<remarks>
An application is registered if <see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/> has been
successfully called.
</remarks>
<returns>
<c>true</c> if this instance is registered
</returns>
</member>

<member name='GetIsRemote()'>
<summary>
Checks if this instance is remote.
</summary>
<remarks>
If this instance is remote then it means that another instance of
application already exists (the 'primary' instance).  Calls to
perform actions on this instance will result in the actions being
performed by the primary instance.

The value of this property cannot be accessed before
<see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/> has been called.  See
<see cref="M:Application.GetIsRegistered()"/>.
</remarks>
<returns>
<c>true</c> if this instance is remote
</returns>
</member>

<member name='GetResourceBasePath()'>
<summary>
Gets the resource base path of this instance.
</summary>
<remarks>
See <see cref="M:Application.SetResourceBasePath(GISharp.Lib.GLib.Utf8)"/> for more information.
</remarks>
<returns>
the base resource path, if one is set
</returns>
</member>

<member name='Hold()'>
<summary>
Increases the use count of this instance.
</summary>
<remarks>
Use this function to indicate that the application has a reason to
continue to run.  For example, <see cref="M:Application.Hold()"/> is called by GTK+
when a toplevel window is on the screen.

To cancel the hold, call <see cref="M:Application.Release()"/>.
</remarks>
</member>

<member name='MarkBusy()'>
<summary>
Increases the busy count of this instance.
</summary>
<remarks>
Use this function to indicate that the application is busy, for instance
while a long running operation is pending.

The busy state will be exposed to other processes, so a session shell will
use that information to indicate the state to the user (e.g. with a
spinner).

To cancel the busy indication, use <see cref="M:Application.UnmarkBusy()"/>.
</remarks>
</member>

<member name='Open(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.Gio.IFile&gt;,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Opens the given files.
</summary>
<remarks>
In essence, this results in the <see cref="Application"/>::open signal being emitted
in the primary instance.

this instance must be greater than zero.

this instance is simply passed through to the ::open signal.  It is
intended to be used by applications that have multiple modes for
opening files (eg: "view" vs "edit", etc).  Unless you have a need
for this functionality, you should use "".

The application must be registered before calling this function
and it must have the <see cref="ApplicationFlags.HandlesOpen"/> flag set.
</remarks>
<param name="files">
an array of #GFiles to open
</param>
<param name="hint">
a hint (or ""), but never <c>null</c>
</param>
</member>

<member name='Open(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.Gio.IFile&gt;,System.String)'>
<summary>
Opens the given files.
</summary>
<remarks>
In essence, this results in the <see cref="Application"/>::open signal being emitted
in the primary instance.

this instance must be greater than zero.

this instance is simply passed through to the ::open signal.  It is
intended to be used by applications that have multiple modes for
opening files (eg: "view" vs "edit", etc).  Unless you have a need
for this functionality, you should use "".

The application must be registered before calling this function
and it must have the <see cref="ApplicationFlags.HandlesOpen"/> flag set.
</remarks>
<param name="files">
an array of #GFiles to open
</param>
<param name="hint">
a hint (or ""), but never <c>null</c>
</param>
</member>

<member name='Quit()'>
<summary>
Immediately quits the application.
</summary>
<remarks>
Upon return to the mainloop, <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/> will return,
calling only the 'shutdown' function before doing so.

The hold count is ignored.
Take care if your code has called <see cref="M:Application.Hold()"/> on the application and
is therefore still expecting it to exist.
(Note that you may have called <see cref="M:Application.Hold()"/> indirectly, for example
through gtk_application_add_window().)

The result of calling <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/> again after it returns is
unspecified.
</remarks>
</member>

<member name='Register(GISharp.Lib.Gio.Cancellable?)'>
<summary>
Attempts registration of the application.
</summary>
<remarks>
This is the point at which the application discovers if it is the
primary instance or merely acting as a remote for an already-existing
primary instance.  This is implemented by attempting to acquire the
application identifier as a unique bus name on the session bus using
GDBus.

If there is no application ID or if <see cref="ApplicationFlags.NonUnique"/> was
given, then this process will always become the primary instance.

Due to the internal architecture of GDBus, method calls can be
dispatched at any time (even if a main loop is not running).  For
this reason, you must ensure that any object paths that you wish to
register are registered before calling this function.

If the application has already been registered then <c>true</c> is
returned with no work performed.

The <see cref="Application"/>::startup signal is emitted if registration succeeds
and this instance is the primary instance (including the non-unique
case).

In the event of an error (such as this instance being cancelled, or a
failure to connect to the session bus), <c>false</c> is returned and this instance
is set appropriately.

Note: the return value of this function is not an indicator that this
instance is or is not the primary instance of the application.  See
<see cref="M:Application.GetIsRemote()"/> for that.
</remarks>
<param name="cancellable">
a <see cref="Cancellable"/>, or <c>null</c>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='Release()'>
<summary>
Decrease the use count of this instance.
</summary>
<remarks>
When the use count reaches zero, the application will stop running.

Never call this function except to cancel the effect of a previous
call to <see cref="M:Application.Hold()"/>.
</remarks>
</member>

<member name='Run(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GLib.Filename&gt;)'>
<summary>
Runs the application.
</summary>
<remarks>
This function is intended to be run from main() and its return value
is intended to be returned by main(). Although you are expected to pass
the this instance, this instance parameters from main() to this function, it is possible
to pass <c>null</c> if this instance is not available or commandline handling is not
required.  Note that on Windows, this instance and this instance are ignored, and
g_win32_get_command_line() is called internally (for proper support
of Unicode commandline arguments).

<see cref="Application"/> will attempt to parse the commandline arguments.  You
can add commandline flags to the list of recognised options by way of
<see cref="M:Application.AddMainOptionEntries(GISharp.Runtime.CArray`1[GISharp.Lib.GLib.OptionEntry])"/>.  After this, the
<see cref="Application"/>::handle-local-options signal is emitted, from which the
application can inspect the values of its #GOptionEntrys.

<see cref="Application"/>::handle-local-options is a good place to handle options
such as `--version`, where an immediate reply from the local process is
desired (instead of communicating with an already-running instance).
A <see cref="Application"/>::handle-local-options handler can stop further processing
by returning a non-negative value, which then becomes the exit status of
the process.

What happens next depends on the flags: if
<see cref="ApplicationFlags.HandlesCommandLine"/> was specified then the remaining
commandline arguments are sent to the primary instance, where a
<see cref="Application"/>::command-line signal is emitted.  Otherwise, the
remaining commandline arguments are assumed to be a list of files.
If there are no files listed, the application is activated via the
<see cref="Application"/>::activate signal.  If there are one or more files, and
<see cref="ApplicationFlags.HandlesOpen"/> was specified then the files are opened
via the <see cref="Application"/>::open signal.

If you are interested in doing more complicated local handling of the
commandline then you should implement your own <see cref="Application"/> subclass
and override local_command_line(). In this case, you most likely want
to return <c>true</c> from your local_command_line() implementation to
suppress the default handling. See
[gapplication-example-cmdline2.c][gapplication-example-cmdline2]
for an example.

If, after the above is done, the use count of the application is zero
then the exit status is returned immediately.  If the use count is
non-zero then the default main context is iterated until the use count
falls to zero, at which point 0 is returned.

If the <see cref="ApplicationFlags.IsService"/> flag is set, then the service will
run for as much as 10 seconds with a use count of zero while waiting
for the message that caused the activation to arrive.  After that,
if the use count falls to zero the application will exit immediately,
except in the case that <see cref="M:Application.SetInactivityTimeout(System.UInt32)"/> is in
use.

This function sets the prgname (g_set_prgname()), if not already set,
to the basename of argv[0].

Much like g_main_loop_run(), this function will acquire the main context
for the duration that the application is running.

Since 2.40, applications that are not explicitly flagged as services
or launchers (ie: neither <see cref="ApplicationFlags.IsService"/> or
<see cref="ApplicationFlags.IsLauncher"/> are given as flags) will check (from the
default handler for local_command_line) if "--gapplication-service"
was given in the command line.  If this flag is present then normal
commandline processing is interrupted and the
<see cref="ApplicationFlags.IsService"/> flag is set.  This provides a "compromise"
solution whereby running an application directly from the commandline
will invoke it in the normal way (which can be useful for debugging)
while still allowing applications to be D-Bus activated in service
mode.  The D-Bus service file should invoke the executable with
"--gapplication-service" as the sole commandline argument.  This
approach is suitable for use by most graphical applications but
should not be used from applications like editors that need precise
control over when processes invoked via the commandline will exit and
what their exit status will be.
</remarks>
<param name="argv">

    the argv from main(), or <c>null</c>
</param>
<returns>
the exit status
</returns>
</member>

<member name='SetActionGroup(GISharp.Lib.Gio.IActionGroup?)'>
<summary>
This used to be how actions were associated with a <see cref="Application"/>.
Now there is <see cref="IActionMap"/> for that.
</summary>
<param name="actionGroup">
a <see cref="IActionGroup"/>, or <c>null</c>
</param>
</member>

<member name='SetApplicationId(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Sets the unique identifier for this instance.
</summary>
<remarks>
The application id can only be modified if this instance has not yet
been registered.

If non-<c>null</c>, the application id must be valid.  See
<see cref="M:Application.IdIsValid(GISharp.Lib.GLib.Utf8)"/>.
</remarks>
<param name="applicationId">
the identifier for this instance
</param>
</member>

<member name='SetApplicationId(System.String?)'>
<summary>
Sets the unique identifier for this instance.
</summary>
<remarks>
The application id can only be modified if this instance has not yet
been registered.

If non-<c>null</c>, the application id must be valid.  See
<see cref="M:Application.IdIsValid(GISharp.Lib.GLib.Utf8)"/>.
</remarks>
<param name="applicationId">
the identifier for this instance
</param>
</member>

<member name='SetDefault()'>
<summary>
Sets or unsets the default application for the process, as returned
by <see cref="M:Application.GetDefault()"/>.
</summary>
<remarks>
This function does not take its own reference on this instance.  If
this instance is destroyed then the default application will revert
back to <c>null</c>.
</remarks>
</member>

<member name='SetFlags(GISharp.Lib.Gio.ApplicationFlags)'>
<summary>
Sets the flags for this instance.
</summary>
<remarks>
The flags can only be modified if this instance has not yet been
registered.

See <see cref="ApplicationFlags"/>.
</remarks>
<param name="flags">
the flags for this instance
</param>
</member>

<member name='SetInactivityTimeout(System.UInt32)'>
<summary>
Sets the current inactivity timeout for the application.
</summary>
<remarks>
This is the amount of time (in milliseconds) after the last call to
<see cref="M:Application.Release()"/> before the application stops running.

This call has no side effects of its own.  The value set here is only
used for next time <see cref="M:Application.Release()"/> drops the use count to
zero.  Any timeouts currently in progress are not impacted.
</remarks>
<param name="inactivityTimeout">
the timeout, in milliseconds
</param>
</member>

<member name='SetOptionContextDescription(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Adds a description to the this instance option context.
</summary>
<remarks>
See g_option_context_set_description() for more information.
</remarks>
<param name="description">
a string to be shown in `--help` output
 after the list of options, or <c>null</c>
</param>
</member>

<member name='SetOptionContextDescription(System.String?)'>
<summary>
Adds a description to the this instance option context.
</summary>
<remarks>
See g_option_context_set_description() for more information.
</remarks>
<param name="description">
a string to be shown in `--help` output
 after the list of options, or <c>null</c>
</param>
</member>

<member name='SetOptionContextParameterString(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Sets the parameter string to be used by the commandline handling of this instance.
</summary>
<remarks>
This function registers the argument to be passed to g_option_context_new()
when the internal #GOptionContext of this instance is created.

See g_option_context_new() for more information about this instance.
</remarks>
<param name="parameterString">
a string which is displayed
  in the first line of `--help` output, after the usage summary `programname [OPTION...]`.
</param>
</member>

<member name='SetOptionContextParameterString(System.String?)'>
<summary>
Sets the parameter string to be used by the commandline handling of this instance.
</summary>
<remarks>
This function registers the argument to be passed to g_option_context_new()
when the internal #GOptionContext of this instance is created.

See g_option_context_new() for more information about this instance.
</remarks>
<param name="parameterString">
a string which is displayed
  in the first line of `--help` output, after the usage summary `programname [OPTION...]`.
</param>
</member>

<member name='SetOptionContextSummary(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Adds a summary to the this instance option context.
</summary>
<remarks>
See g_option_context_set_summary() for more information.
</remarks>
<param name="summary">
a string to be shown in `--help` output
 before the list of options, or <c>null</c>
</param>
</member>

<member name='SetOptionContextSummary(System.String?)'>
<summary>
Adds a summary to the this instance option context.
</summary>
<remarks>
See g_option_context_set_summary() for more information.
</remarks>
<param name="summary">
a string to be shown in `--help` output
 before the list of options, or <c>null</c>
</param>
</member>

<member name='SetResourceBasePath(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Sets (or unsets) the base resource path of this instance.
</summary>
<remarks>
The path is used to automatically load various [application
resources][gresource] such as menu layouts and action descriptions.
The various types of resources will be found at fixed names relative
to the given base path.

By default, the resource base path is determined from the application
ID by prefixing '/' and replacing each '.' with '/'.  This is done at
the time that the <see cref="Application"/> object is constructed.  Changes to
the application ID after that point will not have an impact on the
resource base path.

As an example, if the application has an ID of "org.example.app" then
the default resource base path will be "/org/example/app".  If this
is a #GtkApplication (and you have not manually changed the path)
then Gtk will then search for the menus of the application at
"/org/example/app/gtk/menus.ui".

See #GResource for more information about adding resources to your
application.

You can disable automatic resource loading functionality by setting
the path to <c>null</c>.

Changing the resource base path once the application is running is
not recommended.  The point at which the resource path is consulted
for forming paths for various purposes is unspecified.  When writing
a sub-class of <see cref="Application"/> you should either set the
<see cref="Application"/>:resource-base-path property at construction time, or call
this function during the instance initialization. Alternatively, you
can call this function in the <see cref="ApplicationClass"/>.startup virtual function,
before chaining up to the parent implementation.
</remarks>
<param name="resourcePath">
the resource path to use
</param>
</member>

<member name='SetResourceBasePath(System.String?)'>
<summary>
Sets (or unsets) the base resource path of this instance.
</summary>
<remarks>
The path is used to automatically load various [application
resources][gresource] such as menu layouts and action descriptions.
The various types of resources will be found at fixed names relative
to the given base path.

By default, the resource base path is determined from the application
ID by prefixing '/' and replacing each '.' with '/'.  This is done at
the time that the <see cref="Application"/> object is constructed.  Changes to
the application ID after that point will not have an impact on the
resource base path.

As an example, if the application has an ID of "org.example.app" then
the default resource base path will be "/org/example/app".  If this
is a #GtkApplication (and you have not manually changed the path)
then Gtk will then search for the menus of the application at
"/org/example/app/gtk/menus.ui".

See #GResource for more information about adding resources to your
application.

You can disable automatic resource loading functionality by setting
the path to <c>null</c>.

Changing the resource base path once the application is running is
not recommended.  The point at which the resource path is consulted
for forming paths for various purposes is unspecified.  When writing
a sub-class of <see cref="Application"/> you should either set the
<see cref="Application"/>:resource-base-path property at construction time, or call
this function during the instance initialization. Alternatively, you
can call this function in the <see cref="ApplicationClass"/>.startup virtual function,
before chaining up to the parent implementation.
</remarks>
<param name="resourcePath">
the resource path to use
</param>
</member>

<member name='UnbindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Destroys a binding between this instance and the busy state of
this instance that was previously created with
<see cref="M:Application.BindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.Utf8)"/>.
</summary>
<param name="object">
a #GObject
</param>
<param name="property">
the name of a boolean property of this instance
</param>
</member>

<member name='UnbindBusyProperty(GISharp.Lib.GObject.Object,System.String)'>
<summary>
Destroys a binding between this instance and the busy state of
this instance that was previously created with
<see cref="M:Application.BindBusyProperty(GISharp.Lib.GObject.Object,GISharp.Lib.GLib.Utf8)"/>.
</summary>
<param name="object">
a #GObject
</param>
<param name="property">
the name of a boolean property of this instance
</param>
</member>

<member name='UnmarkBusy()'>
<summary>
Decreases the busy count of this instance.
</summary>
<remarks>
When the busy count reaches zero, the new state will be propagated
to other processes.

This function must only be called to cancel the effect of a previous
call to <see cref="M:Application.MarkBusy()"/>.
</remarks>
</member>

<member name='WithdrawNotification(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Withdraws a notification that was sent with
g_application_send_notification().
</summary>
<remarks>
This call does nothing if a notification with this instance doesn't exist or
the notification was never sent.

This function works even for notifications sent in previous
executions of this application, as long this instance is the same as it was for
the sent notification.

Note that notifications are dismissed when the user clicks on one
of the buttons in a notification or triggers its default action, so
there is no need to explicitly withdraw the notification in that case.
</remarks>
<param name="id">
id of a previously sent notification
</param>
</member>

<member name='WithdrawNotification(System.String)'>
<summary>
Withdraws a notification that was sent with
g_application_send_notification().
</summary>
<remarks>
This call does nothing if a notification with this instance doesn't exist or
the notification was never sent.

This function works even for notifications sent in previous
executions of this application, as long this instance is the same as it was for
the sent notification.

Note that notifications are dismissed when the user clicks on one
of the buttons in a notification or triggers its default action, so
there is no need to explicitly withdraw the notification in that case.
</remarks>
<param name="id">
id of a previously sent notification
</param>
</member>

<member name='DoActivate()'>
<summary>
Activates the application.
</summary>
<remarks>
In essence, this results in the <see cref="Application"/>::activate signal being
emitted in the primary instance.

The application must be registered before calling this function.
</remarks>
</member>

<member name='DoAddPlatformData(GISharp.Lib.GLib.VariantBuilder)'>
</member>

<member name='DoAfterEmit(GISharp.Lib.GLib.Variant)'>
</member>

<member name='DoBeforeEmit(GISharp.Lib.GLib.Variant)'>
</member>

<member name='DoCommandLine(GISharp.Lib.Gio.ApplicationCommandLine)'>
</member>

<member name='DoHandleLocalOptions(GISharp.Lib.GLib.VariantDict)'>
</member>

<member name='DoTryLocalCommandLine(GISharp.Lib.GLib.Strv,System.Int32)'>
<summary>
This virtual function is always invoked in the local instance. It
gets passed a pointer to a <c>null</c>-terminated copy of this instance and is
expected to remove arguments that it handled (shifting up remaining
arguments).
</summary>
<remarks>
The last argument to local_command_line() is a pointer to the this instance
variable which can used to set the exit status that is returned from
<see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/>.

See <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/> for more details on <see cref="Application"/> startup.
</remarks>
<param name="arguments">
array of command line arguments
</param>
<param name="exitStatus">
exit status to fill after processing the command line.
</param>
<returns>
<c>true</c> if the commandline has been completely handled
</returns>
</member>

<member name='DoOpen(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.Gio.IFile&gt;,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Opens the given files.
</summary>
<remarks>
In essence, this results in the <see cref="Application"/>::open signal being emitted
in the primary instance.

this instance must be greater than zero.

this instance is simply passed through to the ::open signal.  It is
intended to be used by applications that have multiple modes for
opening files (eg: "view" vs "edit", etc).  Unless you have a need
for this functionality, you should use "".

The application must be registered before calling this function
and it must have the <see cref="ApplicationFlags.HandlesOpen"/> flag set.
</remarks>
<param name="files">
an array of #GFiles to open
</param>
<param name="hint">
a hint (or ""), but never <c>null</c>
</param>
</member>

<member name='DoQuitMainloop()'>
</member>

<member name='DoRunMainloop()'>
</member>

<member name='DoShutdown()'>
</member>

<member name='DoStartup()'>
</member>

<member name='Application'>
<summary>
A <see cref="Application"/> is the foundation of an application.  It wraps some
low-level platform-specific services and is intended to act as the
foundation for higher-level application classes such as
#GtkApplication or #MxApplication.  In general, you should not use
this class outside of a higher level framework.
</summary>
<remarks>
GApplication provides convenient life cycle management by maintaining
a "use count" for the primary application instance. The use count can
be changed using <see cref="M:Application.Hold()"/> and <see cref="M:Application.Release()"/>. If
it drops to zero, the application exits. Higher-level classes such as
#GtkApplication employ the use count to ensure that the application
stays alive as long as it has any opened windows.

Another feature that GApplication (optionally) provides is process
uniqueness. Applications can make use of this functionality by
providing a unique application ID. If given, only one application
with this ID can be running at a time per session. The session
concept is platform-dependent, but corresponds roughly to a graphical
desktop login. When your application is launched again, its
arguments are passed through platform communication to the already
running program. The already running instance of the program is
called the "primary instance"; for non-unique applications this is
the always the current instance. On Linux, the D-Bus session bus
is used for communication.

The use of <see cref="Application"/> differs from some other commonly-used
uniqueness libraries (such as libunique) in important ways. The
application is not expected to manually register itself and check
if it is the primary instance. Instead, the main() function of a
<see cref="Application"/> should do very little more than instantiating the
application instance, possibly connecting signal handlers, then
calling <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/>. All checks for uniqueness are done
internally. If the application is the primary instance then the
startup signal is emitted and the mainloop runs. If the application
is not the primary instance then a signal is sent to the primary
instance and <see cref="M:Application.Run(GISharp.Runtime.CPtrArray`1[GISharp.Lib.GLib.Filename])"/> promptly returns. See the code
examples below.

If used, the expected form of an application identifier is the same as
that of of a
[D-Bus well-known bus name](https://dbus.freedesktop.org/doc/dbus-specification.html#message-protocol-names-bus).
Examples include: `com.example.MyApp`, `org.example.internal_apps.Calculator`,
`org._7_zip.Archiver`.
For details on valid application identifiers, see <see cref="M:Application.IdIsValid(GISharp.Lib.GLib.Utf8)"/>.

On Linux, the application identifier is claimed as a well-known bus name
on the user's session bus.  This means that the uniqueness of your
application is scoped to the current session.  It also means that your
application may provide additional services (through registration of other
object paths) at that bus name.  The registration of these object paths
should be done with the shared GDBus session bus.  Note that due to the
internal architecture of GDBus, method calls can be dispatched at any time
(even if a main loop is not running).  For this reason, you must ensure that
any object paths that you wish to register are registered before <see cref="Application"/>
attempts to acquire the bus name of your application (which happens in
<see cref="M:Application.Register(GISharp.Lib.Gio.Cancellable)"/>).  Unfortunately, this means that you cannot use
<see cref="M:Application.GetIsRemote()"/> to decide if you want to register object paths.

GApplication also implements the <see cref="IActionGroup"/> and <see cref="IActionMap"/>
interfaces and lets you easily export actions by adding them with
<see cref="M:ActionMap.AddAction(GISharp.Lib.Gio.IActionMap,GISharp.Lib.Gio.IAction)"/>. When invoking an action by calling
<see cref="M:ActionGroup.ActivateAction(GISharp.Lib.Gio.IActionGroup,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Variant)"/> on the application, it is always
invoked in the primary instance. The actions are also exported on
the session bus, and GIO provides the #GDBusActionGroup wrapper to
conveniently access them remotely. GIO provides a #GDBusMenuModel wrapper
for remote access to exported #GMenuModels.

There is a number of different entry points into a GApplication:

- via 'Activate' (i.e. just starting the application)

- via 'Open' (i.e. opening some files)

- by handling a command-line

- via activating an action

The <see cref="Application"/>::startup signal lets you handle the application
initialization for all of these in a single place.

Regardless of which of these entry points is used to start the
application, GApplication passes some "platform data from the
launching instance to the primary instance, in the form of a
#GVariant dictionary mapping strings to variants. To use platform
data, override the <paramref name="beforeEmit"/> or <paramref name="afterEmit"/> virtual functions
in your <see cref="Application"/> subclass. When dealing with
<see cref="ApplicationCommandLine"/> objects, the platform data is
directly available via <see cref="M:ApplicationCommandLine.GetCwd()"/>,
<see cref="M:ApplicationCommandLine.GetEnvironment()"/> and
<see cref="M:ApplicationCommandLine.GetPlatformData()"/>.

As the name indicates, the platform data may vary depending on the
operating system, but it always includes the current directory (key
"cwd"), and optionally the environment (ie the set of environment
variables and their values) of the calling process (key "environ").
The environment is only added to the platform data if the
<see cref="ApplicationFlags.SendEnvironment"/> flag is set. <see cref="Application"/> subclasses
can add their own platform data by overriding the <paramref name="addPlatformData"/>
virtual function. For instance, #GtkApplication adds startup notification
data in this way.

To parse commandline arguments you may handle the
<see cref="Application"/>::command-line signal or override the local_command_line()
vfunc, to parse them in either the primary instance or the local instance,
respectively.

For an example of opening files with a GApplication, see
[gapplication-example-open.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-open.c).

For an example of using actions with GApplication, see
[gapplication-example-actions.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-actions.c).

For an example of using extra D-Bus hooks with GApplication, see
[gapplication-example-dbushooks.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-dbushooks.c).
</remarks>
</member>

</declaration>
