<declaration>

<member name='ParentInstance'>
#pragmawarningdisableCS0649
</member>

<member name='Priv'>
</member>

<member name='Etag'>
<summary>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
</summary>
</member>

<member name='GetEtag()'>
<summary>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
</summary>
<returns>
the entity tag for the stream.
</returns>
</member>

<member name='QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file io stream for the given this instance.
This function blocks while querying the stream. For the asynchronous
version of this function, see <see cref="M:FileIOStream.QueryInfoAsync(GISharp.Lib.GLib.Utf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
<see cref="IOErrorEnum.Pending"/>.
</summary>
<remarks>
Can fail if the stream was already closed (with this instance being set to
<see cref="IOErrorEnum.Closed"/>), the stream has pending operations (with this instance being
set to <see cref="IOErrorEnum.Pending"/>), or if querying info is not supported for
the stream's interface (with this instance being set to <see cref="IOErrorEnum.NotSupported"/>). I
all cases of failure, <c>null</c> will be returned.

If this instance is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set, and <c>null</c> will
be returned.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/> for the this instance, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='QueryInfo(System.String,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file io stream for the given this instance.
This function blocks while querying the stream. For the asynchronous
version of this function, see <see cref="M:FileIOStream.QueryInfoAsync(GISharp.Lib.GLib.Utf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
<see cref="IOErrorEnum.Pending"/>.
</summary>
<remarks>
Can fail if the stream was already closed (with this instance being set to
<see cref="IOErrorEnum.Closed"/>), the stream has pending operations (with this instance being
set to <see cref="IOErrorEnum.Pending"/>), or if querying info is not supported for
the stream's interface (with this instance being set to <see cref="IOErrorEnum.NotSupported"/>). I
all cases of failure, <c>null</c> will be returned.

If this instance is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set, and <c>null</c> will
be returned.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/> for the this instance, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously queries the this instance for a <see cref="FileInfo"/>. When completed,
this instance will be called with a <see cref="IAsyncResult"/> which can be used to
finish the operation with <see cref="M:FileIOStream.QueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)"/>.
</summary>
<remarks>
For the synchronous version of this function, see
<see cref="M:FileIOStream.QueryInfo(GISharp.Lib.GLib.Utf8,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][gio-GIOScheduler] of the request
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='QueryInfoAsync(System.String,System.Int32,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously queries the this instance for a <see cref="FileInfo"/>. When completed,
this instance will be called with a <see cref="IAsyncResult"/> which can be used to
finish the operation with <see cref="M:FileIOStream.QueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)"/>.
</summary>
<remarks>
For the synchronous version of this function, see
<see cref="M:FileIOStream.QueryInfo(GISharp.Lib.GLib.Utf8,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][gio-GIOScheduler] of the request
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='DoCanSeek()'>
</member>

<member name='DoCanTruncate()'>
</member>

<member name='DoGetEtag()'>
<summary>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
</summary>
<returns>
the entity tag for the stream.
</returns>
</member>

<member name='DoQueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file io stream for the given this instance.
This function blocks while querying the stream. For the asynchronous
version of this function, see <see cref="M:FileIOStream.QueryInfoAsync(GISharp.Lib.GLib.Utf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
<see cref="IOErrorEnum.Pending"/>.
</summary>
<remarks>
Can fail if the stream was already closed (with this instance being set to
<see cref="IOErrorEnum.Closed"/>), the stream has pending operations (with this instance being
set to <see cref="IOErrorEnum.Pending"/>), or if querying info is not supported for
the stream's interface (with this instance being set to <see cref="IOErrorEnum.NotSupported"/>). I
all cases of failure, <c>null</c> will be returned.

If this instance is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set, and <c>null</c> will
be returned.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/> for the this instance, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='DoQueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.AsyncReadyCallback?,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously queries the this instance for a <see cref="FileInfo"/>. When completed,
this instance will be called with a <see cref="IAsyncResult"/> which can be used to
finish the operation with <see cref="M:FileIOStream.QueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)"/>.
</summary>
<remarks>
For the synchronous version of this function, see
<see cref="M:FileIOStream.QueryInfo(GISharp.Lib.GLib.Utf8,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][gio-GIOScheduler] of the request
</param>
<param name="callback">
callback to call when the request is satisfied
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='DoQueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Finalizes the asynchronous query started
by <see cref="M:FileIOStream.QueryInfoAsync(GISharp.Lib.GLib.Utf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
</summary>
<param name="result">
a <see cref="IAsyncResult"/>.
</param>
<returns>
A <see cref="FileInfo"/> for the finished query.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='DoSeek(System.Int64,GISharp.Lib.GLib.SeekType,GISharp.Lib.Gio.Cancellable?)'>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='DoTell()'>
</member>

<member name='DoTruncateFn(System.Int64,GISharp.Lib.Gio.Cancellable?)'>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileIOStream'>
<summary>
GFileIOStream provides io streams that both read and write to the same
file handle.
</summary>
<remarks>
GFileIOStream implements <see cref="ISeekable"/>, which allows the io
stream to jump to arbitrary positions in the file and to truncate
the file, provided the filesystem of the file supports these
operations.

To find the position of a file io stream, use
<see cref="M:Seekable.Tell(GISharp.Lib.Gio.ISeekable)"/>.

To find out if a file io stream supports seeking, use <see cref="M:Seekable.CanSeek(GISharp.Lib.Gio.ISeekable)"/>.
To position a file io stream, use <see cref="M:Seekable.Seek(GISharp.Lib.Gio.ISeekable,System.Int64,GISharp.Lib.GLib.SeekType,GISharp.Lib.Gio.Cancellable)"/>.
To find out if a file io stream supports truncating, use
<see cref="M:Seekable.CanTruncate(GISharp.Lib.Gio.ISeekable)"/>. To truncate a file io
stream, use <see cref="M:Seekable.Truncate(GISharp.Lib.Gio.ISeekable,System.Int64,GISharp.Lib.Gio.Cancellable)"/>.

The default implementation of all the <see cref="FileIOStream"/> operations
and the implementation of <see cref="ISeekable"/> just call into the same operations
on the output stream.
</remarks>
</member>

</declaration>
