// ATTENTION: This file is automatically generated. Do not edit by manually.
namespace GISharp.Lib.Gio
{
    /// <summary>
    /// The <see cref="ApplicationCommandLineClass"/>-struct
    /// contains private data only.
    /// </summary>
    [GISharp.Runtime.SinceAttribute("2.28")]
    public class ApplicationCommandLineClass : GISharp.Lib.GObject.ObjectClass
    {
        unsafe new protected struct Struct
        {
#pragma warning disable CS0649
            public GISharp.Lib.GObject.ObjectClass.Struct ParentClass;
            public System.IntPtr PrintLiteral;
            public System.IntPtr PrinterrLiteral;
            public System.IntPtr GetStdin;
            public System.IntPtr Padding;
#pragma warning restore CS0649
        }

        static ApplicationCommandLineClass()
        {
            System.Int32 printLiteralOffset = (System.Int32)System.Runtime.InteropServices.Marshal.OffsetOf<Struct>(nameof(Struct.PrintLiteral));
            RegisterVirtualMethod(printLiteralOffset, PrintLiteralFactory.Create);
            System.Int32 printerrLiteralOffset = (System.Int32)System.Runtime.InteropServices.Marshal.OffsetOf<Struct>(nameof(Struct.PrinterrLiteral));
            RegisterVirtualMethod(printerrLiteralOffset, PrinterrLiteralFactory.Create);
            System.Int32 getStdinOffset = (System.Int32)System.Runtime.InteropServices.Marshal.OffsetOf<Struct>(nameof(Struct.GetStdin));
            RegisterVirtualMethod(getStdinOffset, GetStdinFactory.Create);
        }

        public delegate void PrintLiteral(GISharp.Lib.GLib.UnownedUtf8 message);

        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:out */
        public unsafe delegate void UnmanagedPrintLiteral(
/* <type name="ApplicationCommandLine" type="GApplicationCommandLine*" managed-name="ApplicationCommandLine" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
System.IntPtr cmdline,
/* <type name="utf8" type="const gchar*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
System.IntPtr message);

        /// <summary>
        /// Factory for creating <see cref="PrintLiteral"/> methods.
        /// </summary>
        public static class PrintLiteralFactory
        {
            public static unsafe UnmanagedPrintLiteral Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedPrintLiteral(System.IntPtr cmdline_, System.IntPtr message_)
                {
                    try
                    {
                        var cmdline = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.Gio.ApplicationCommandLine>(cmdline_, GISharp.Runtime.Transfer.None);
                        var message = new GISharp.Lib.GLib.UnownedUtf8(message_, -1);
                        var doPrintLiteral = (PrintLiteral)methodInfo.CreateDelegate(typeof(PrintLiteral), cmdline);
                        doPrintLiteral(message);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Lib.GLib.Log.LogUnhandledException(ex);
                    }
                }

                return unmanagedPrintLiteral;
            }
        }

        public delegate void PrinterrLiteral(GISharp.Lib.GLib.UnownedUtf8 message);

        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:out */
        public unsafe delegate void UnmanagedPrinterrLiteral(
/* <type name="ApplicationCommandLine" type="GApplicationCommandLine*" managed-name="ApplicationCommandLine" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
System.IntPtr cmdline,
/* <type name="utf8" type="const gchar*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
System.IntPtr message);

        /// <summary>
        /// Factory for creating <see cref="PrinterrLiteral"/> methods.
        /// </summary>
        public static class PrinterrLiteralFactory
        {
            public static unsafe UnmanagedPrinterrLiteral Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedPrinterrLiteral(System.IntPtr cmdline_, System.IntPtr message_)
                {
                    try
                    {
                        var cmdline = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.Gio.ApplicationCommandLine>(cmdline_, GISharp.Runtime.Transfer.None);
                        var message = new GISharp.Lib.GLib.UnownedUtf8(message_, -1);
                        var doPrinterrLiteral = (PrinterrLiteral)methodInfo.CreateDelegate(typeof(PrinterrLiteral), cmdline);
                        doPrinterrLiteral(message);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Lib.GLib.Log.LogUnhandledException(ex);
                    }
                }

                return unmanagedPrinterrLiteral;
            }
        }

        public delegate GISharp.Lib.Gio.InputStream GetStdin();

        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="InputStream" type="GInputStream*" managed-name="InputStream" is-pointer="1" /> */
        /* transfer-ownership:full direction:out */
        public unsafe delegate System.IntPtr UnmanagedGetStdin(
/* <type name="ApplicationCommandLine" type="GApplicationCommandLine*" managed-name="ApplicationCommandLine" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
System.IntPtr cmdline);

        /// <summary>
        /// Factory for creating <see cref="GetStdin"/> methods.
        /// </summary>
        public static class GetStdinFactory
        {
            public static unsafe UnmanagedGetStdin Create(System.Reflection.MethodInfo methodInfo)
            {
                System.IntPtr unmanagedGetStdin(System.IntPtr cmdline_)
                {
                    try
                    {
                        var cmdline = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.Gio.ApplicationCommandLine>(cmdline_, GISharp.Runtime.Transfer.None);
                        var doGetStdin = (GetStdin)methodInfo.CreateDelegate(typeof(GetStdin), cmdline);
                        var ret = doGetStdin();
                        var ret_ = ret?.Take() ?? throw new System.ArgumentNullException(nameof(ret));
                        return ret_;
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Lib.GLib.Log.LogUnhandledException(ex);
                    }

                    return default(System.IntPtr);
                }

                return unmanagedGetStdin;
            }
        }

        public ApplicationCommandLineClass(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }
    }
}