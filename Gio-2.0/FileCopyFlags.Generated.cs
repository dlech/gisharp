// ATTENTION: This file is automatically generated. Do not edit by manually.
namespace GISharp.Lib.Gio
{
    /// <summary>
    /// Flags used when copying or moving files.
    /// </summary>
    [GISharp.Runtime.GTypeAttribute("GFileCopyFlags", IsProxyForUnmanagedType = true)]
    [System.FlagsAttribute]
    public enum FileCopyFlags
    {
        /// <summary>
        /// No flags set.
        /// </summary>
        None = 0b0000_0000_0000_0000_0000_0000_0000_0000,
        /// <summary>
        /// Overwrite any existing files
        /// </summary>
        Overwrite = 0b0000_0000_0000_0000_0000_0000_0000_0001,
        /// <summary>
        /// Make a backup of any existing files.
        /// </summary>
        Backup = 0b0000_0000_0000_0000_0000_0000_0000_0010,
        /// <summary>
        /// Don't follow symlinks.
        /// </summary>
        NoFollowSymlinks = 0b0000_0000_0000_0000_0000_0000_0000_0100,
        /// <summary>
        /// Copy all file metadata instead of just default set used for copy (see <see cref="FileInfo"/>).
        /// </summary>
        AllMetadata = 0b0000_0000_0000_0000_0000_0000_0000_1000,
        /// <summary>
        /// Don't use copy and delete fallback if native move not supported.
        /// </summary>
        NoFallbackForMove = 0b0000_0000_0000_0000_0000_0000_0001_0000,
        /// <summary>
        /// Leaves target file with default perms, instead of setting the source file perms.
        /// </summary>
        TargetDefaultPerms = 0b0000_0000_0000_0000_0000_0000_0010_0000
    }

    public partial class FileCopyFlagsExtensions
    {
        static readonly GISharp.Lib.GObject.GType _GType = g_file_copy_flags_get_type();

        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" managed-name="GISharp.Lib.GObject.GType" /> */
        /* transfer-ownership:full direction:out */
        static extern unsafe GISharp.Lib.GObject.GType g_file_copy_flags_get_type();
    }
}