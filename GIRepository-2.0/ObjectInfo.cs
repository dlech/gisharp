// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

using System;
using System.Dynamic;
using System.Linq.Expressions;
using System.Runtime.InteropServices;

using GISharp.Lib.GIRepository.Dynamic;
using GISharp.Lib.GLib;
using GISharp.Runtime;

namespace GISharp.Lib.GIRepository
{
    public sealed class ObjectInfo : RegisteredTypeInfo, IMethodContainer, IDynamicMetaObjectProvider
    {
        InfoDictionary<ConstantInfo>? constants;

        public InfoDictionary<ConstantInfo> Constants {
            get {
                if (constants == null) {
                    constants = new InfoDictionary<ConstantInfo> (NConstants, GetConstant);
                }
                return constants;
            }
        }

        InfoDictionary<FieldInfo>? fields;

        public InfoDictionary<FieldInfo> Fields {
            get {
                if (fields == null) {
                    fields = new InfoDictionary<FieldInfo> (NFields, GetField);
                }
                return fields;
            }
        }

        InfoDictionary<InterfaceInfo>? interfaces;

        public InfoDictionary<InterfaceInfo> Interfaces {
            get {
                if (interfaces == null) {
                    interfaces = new InfoDictionary<InterfaceInfo> (NInterfaces, GetInterface);
                }
                return interfaces;
            }
        }

        InfoDictionary<FunctionInfo>? methods;

        public InfoDictionary<FunctionInfo> Methods {
            get {
                if (methods == null) {
                    methods = new InfoDictionary<FunctionInfo> (NMethods, GetMethod);
                }
                return methods;
            }
        }

        InfoDictionary<PropertyInfo>? properties;

        public InfoDictionary<PropertyInfo> Properties {
            get {
                if (properties == null) {
                    properties = new InfoDictionary<PropertyInfo> (NProperties, GetProperty);
                }
                return properties;
            }
        }

        InfoDictionary<SignalInfo>? signals;

        public InfoDictionary<SignalInfo> Signals {
            get {
                if (signals == null) {
                    signals = new InfoDictionary<SignalInfo> (NSignals, GetSignal);
                }
                return signals;
            }
        }

        InfoDictionary<VFuncInfo>? vFuncs;

        public InfoDictionary<VFuncInfo> VFuncs {
            get {
                if (vFuncs == null) {
                    vFuncs = new InfoDictionary<VFuncInfo> (NVfuncs, GetVFunc);
                }
                return vFuncs;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_method (IntPtr raw, IntPtr name);

        public FunctionInfo? FindMethod(UnownedUtf8 name)
        {
            var ret_ = g_object_info_find_method(Handle, name.Handle);
            var ret = GetInstanceOrNull<FunctionInfo>(ret_);
            return ret;
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_method_using_interfaces(IntPtr raw, IntPtr name, out IntPtr implementor);

        public FunctionInfo? FindMethodUsingInterfaces(UnownedUtf8 name, out ObjectInfo implementor)
        {
            var ret_ = g_object_info_find_method_using_interfaces(Handle, name.Handle, out var implementor_);
            var ret = GetInstanceOrNull<FunctionInfo>(ret_);
            implementor = GetInstanceOrNull<ObjectInfo>(implementor_)!;
            return ret;
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_signal (IntPtr raw, IntPtr name);

        public SignalInfo? FindSignal(UnownedUtf8 name)
        {
            var ret_ = g_object_info_find_signal(Handle, name.Handle);
            var ret = GetInstanceOrNull<SignalInfo>(ret_);
            return ret;
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_vfunc (IntPtr raw, IntPtr name);

        public VFuncInfo? FindVFunc(UnownedUtf8 name)
        {
            var ret_ = g_object_info_find_vfunc(Handle, name.Handle);
            var ret = GetInstanceOrNull<VFuncInfo>(ret_);
            return ret;
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_find_vfunc_using_interfaces(IntPtr raw, IntPtr name, out IntPtr implementor);

        public VFuncInfo? FindVFuncUsingInterfaces(UnownedUtf8 name, out ObjectInfo implementor)
        {
            var ret_ = g_object_info_find_vfunc_using_interfaces (Handle, name.Handle, out var implementor_);
            var ret = GetInstanceOrNull<VFuncInfo>(ret_);
            implementor = GetInstanceOrNull<ObjectInfo>(implementor_)!;
            return ret;
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_object_info_get_abstract (IntPtr raw);

        public bool Abstract {
            get {
                bool raw_ret = g_object_info_get_abstract (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_class_struct (IntPtr raw);

        public StructInfo ClassStruct {
            get {
                IntPtr raw_ret = g_object_info_get_class_struct (Handle);
                return GetInstance<StructInfo>(raw_ret);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_constant (IntPtr raw, int index);

        ConstantInfo GetConstant (int index)
        {
            IntPtr raw_ret = g_object_info_get_constant (Handle, index);
            return GetInstance<ConstantInfo>(raw_ret);
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_field (IntPtr raw, int index);

        FieldInfo GetField (int index)
        {
            IntPtr raw_ret = g_object_info_get_field (Handle, index);
            return GetInstance<FieldInfo>(raw_ret);
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern bool g_object_info_get_fundamental (IntPtr raw);

        public bool Fundamental {
            get {
                bool raw_ret = g_object_info_get_fundamental (Handle);
                bool ret = raw_ret;
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_get_value_function (IntPtr raw);

        public NullableUnownedUtf8 GetValueFunctionName {
            get {
                var ret_ = g_object_info_get_get_value_function(Handle);
                var ret = new NullableUnownedUtf8(ret_, -1);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_interface (IntPtr raw, int index);

        InterfaceInfo GetInterface (int index)
        {
            IntPtr raw_ret = g_object_info_get_interface (Handle, index);
            return GetInstance<InterfaceInfo>(raw_ret);
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_method (IntPtr raw, int index);

        FunctionInfo GetMethod (int index)
        {
            IntPtr raw_ret = g_object_info_get_method (Handle, index);
            return GetInstance<FunctionInfo>(raw_ret);
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_constants (IntPtr raw);

        int NConstants {
            get {
                return g_object_info_get_n_constants (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_fields (IntPtr raw);

        int NFields {
            get {
                return g_object_info_get_n_fields (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_interfaces (IntPtr raw);

        int NInterfaces {
            get {
                return g_object_info_get_n_interfaces (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_methods (IntPtr raw);

        int NMethods {
            get {
                return g_object_info_get_n_methods (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_properties (IntPtr raw);

        int NProperties {
            get {
                return g_object_info_get_n_properties (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_signals (IntPtr raw);

        int NSignals {
            get {
                return g_object_info_get_n_signals (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_object_info_get_n_vfuncs (IntPtr raw);

        int NVfuncs {
            get {
                return g_object_info_get_n_vfuncs (Handle);
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_parent (IntPtr raw);

        public ObjectInfo? Parent {
            get {
                var ret_ = g_object_info_get_parent(Handle);
                var ret = GetInstanceOrNull<ObjectInfo>(ret_);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_property (IntPtr raw, int index);

        PropertyInfo GetProperty (int index)
        {
            IntPtr raw_ret = g_object_info_get_property (Handle, index);
            return GetInstance<PropertyInfo>(raw_ret);
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_ref_function (IntPtr raw);

        public NullableUnownedUtf8 RefFunctionName {
            get {
                var ret_ = g_object_info_get_ref_function(Handle);
                var ret = new NullableUnownedUtf8(ret_, -1);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_set_value_function (IntPtr raw);

        public NullableUnownedUtf8 SetValueFunctionName {
            get {
                var ret_ = g_object_info_get_set_value_function(Handle);
                var ret = new NullableUnownedUtf8(ret_, -1);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_signal (IntPtr raw, int index);

        SignalInfo GetSignal (int index)
        {
            IntPtr raw_ret = g_object_info_get_signal (Handle, index);
            return GetInstance<SignalInfo>(raw_ret);
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_type_init (IntPtr raw);

        public new UnownedUtf8 TypeInit {
            get {
                var ret_ = g_object_info_get_type_init(Handle);
                var ret = new UnownedUtf8(ret_, -1);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_type_name (IntPtr raw);

        public new UnownedUtf8 TypeName {
            get {
                var ret_ = g_object_info_get_type_name (Handle);
                var ret = new UnownedUtf8(ret_, -1);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_unref_function (IntPtr raw);

        public NullableUnownedUtf8 UnrefFunctionName {
            get {
                var ret_ = g_object_info_get_unref_function(Handle);
                var ret = new NullableUnownedUtf8(ret_, -1);
                return ret;
            }
        }

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_object_info_get_vfunc (IntPtr raw, int index);

        VFuncInfo GetVFunc (int index)
        {
            IntPtr raw_ret = g_object_info_get_vfunc (Handle, index);
            return GetInstance<VFuncInfo>(raw_ret);
        }

        public DynamicMetaObject GetMetaObject (Expression parameter)
        {
            return new ObjectInfoDynamicMetaObject (parameter, this);
        }

        public ObjectInfo (IntPtr raw) : base (raw)
        {
        }
    }
}
