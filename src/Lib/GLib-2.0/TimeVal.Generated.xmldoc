<declaration>

<member name='TimeVal.tvSec'>
<summary>
seconds
</summary>
</member>

<member name='TimeVal.tvUsec'>
<summary>
microseconds
</summary>
</member>

<member name='TimeVal.TryFromIso8601(GISharp.Runtime.UnownedUtf8,GISharp.Lib.GLib.TimeVal)'>
<summary>
Converts a string containing an ISO 8601 encoded date and time
to a <see cref="TimeVal"/> and puts it into <paramref name="time"/>.
</summary>
<remarks>
<para>
<paramref name="isoDate"/> must include year, month, day, hours, minutes, and
seconds. It can optionally include fractions of a second and a time
zone indicator. (In the absence of any time zone indication, the
timestamp is assumed to be in local time.)
</para>
<para>
Any leading or trailing space in <paramref name="isoDate"/> is ignored.
</para>
<para>
This function was deprecated, along with <see cref="TimeVal"/> itself, in GLib 2.62.
Equivalent functionality is available using code like:
|[
GDateTime *dt = g_date_time_new_from_iso8601 (iso8601_string, NULL);
gint64 time_val = g_date_time_to_unix (dt);
g_date_time_unref (dt);
]|
</para>
</remarks>
<param name="isoDate">
an ISO 8601 encoded date string
</param>
<param name="time">
a <see cref="TimeVal"/>
</param>
<returns>
<c>true</c> if the conversion was successful.
</returns>
</member>

<member name='TimeVal.Add(GISharp.Runtime.CLong)'>
<summary>
Adds the given number of microseconds to this instance. <paramref name="microseconds"/> can
also be negative to decrease the value of this instance.
</summary>
<param name="microseconds">
number of microseconds to add to <c>time</c>
</param>
</member>

<member name='TimeVal.ToIso8601()'>
<summary>
Converts this instance into an RFC 3339 encoded string, relative to the
Coordinated Universal Time (UTC). This is one of the many formats
allowed by ISO 8601.
</summary>
<remarks>
<para>
ISO 8601 allows a large number of date/time formats, with or without
punctuation and optional elements. The format returned by this function
is a complete date and time, with optional punctuation included, the
UTC time zone represented as "Z", and the <c>tvUsec</c> part included if
and only if it is nonzero, i.e. either
"YYYY-MM-DDTHH:MM:SSZ" or "YYYY-MM-DDTHH:MM:SS.fffffZ".
</para>
<para>
This corresponds to the Internet date/time format defined by
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt),
and to either of the two most-precise formats defined by
the W3C Note
[Date and Time Formats](http://www.w3.org/TR/NOTE-datetime-19980827).
Both of these documents are profiles of ISO 8601.
</para>
<para>
Use <see cref="DateTime.Format(GISharp.Runtime.UnownedUtf8)"/> or g_strdup_printf() if a different
variation of ISO 8601 format is required.
</para>
<para>
If this instance represents a date which is too large to fit into a `struct tm`,
<c>null</c> will be returned. This is platform dependent. Note also that since
`GTimeVal` stores the number of seconds as a `glong`, on 32-bit systems it
is subject to the year 2038 problem. Accordingly, since GLib 2.62, this
function has been deprecated. Equivalent functionality is available using:
|[
GDateTime *dt = g_date_time_new_from_unix_utc (time_val);
iso8601_string = g_date_time_format_iso8601 (dt);
g_date_time_unref (dt);
]|
</para>
<para>
The return value of <see cref="TimeVal.ToIso8601()"/> has been nullable since GLib
2.54; before then, GLib would crash under the same conditions.
</para>
</remarks>
<returns>
a newly allocated string containing an ISO 8601 date,
   or <c>null</c> if this instance was too large
</returns>
</member>

<member name='TimeVal'>
<summary>
Represents a precise time, with seconds and microseconds.
Similar to the struct timeval returned by the gettimeofday()
UNIX system call.
</summary>
<remarks>
<para>
GLib is attempting to unify around the use of 64-bit integers to
represent microsecond-precision time. As such, this type will be
removed from a future version of GLib. A consequence of using `glong` for
`tv_sec` is that on 32-bit systems `GTimeVal` is subject to the year 2038
problem.
</para>
</remarks>
</member>

</declaration>
