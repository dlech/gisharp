// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <include file="UnixSignal.xmldoc" path="declaration/member[@name='UnixSignal']/*" />
    public static unsafe partial class UnixSignal
    {
        /// <summary>
        /// A convenience function for g_unix_signal_source_new(), which
        /// attaches to the default #GMainContext.  You can remove the watch
        /// using g_source_remove().
        /// </summary>
        /// <param name="priority">
        /// the priority of the signal source. Typically this will be in
        ///            the range between %G_PRIORITY_DEFAULT and %G_PRIORITY_HIGH.
        /// </param>
        /// <param name="signum">
        /// Signal number
        /// </param>
        /// <param name="handler">
        /// Callback
        /// </param>
        /// <param name="userData">
        /// Data for @handler
        /// </param>
        /// <param name="notify">
        /// #GDestroyNotify for @handler
        /// </param>
        /// <returns>
        /// An ID (greater than 0) for the event source
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.30")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_unix_signal_add_full(
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        int priority,
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        int signum,
        /* <type name="SourceFunc" type="GSourceFunc" /> */
        /* transfer-ownership:none scope:notified closure:3 destroy:4 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, GISharp.Runtime.Boolean> handler,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData,
        /* <type name="DestroyNotify" type="GDestroyNotify" /> */
        /* transfer-ownership:none scope:async direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, void> notify);
        static partial void CheckAddArgs(int signum, GISharp.Lib.GLib.SourceFunc handler, int priority = GISharp.Lib.GLib.Priority.Default);

        /// <include file="UnixSignal.xmldoc" path="declaration/member[@name='UnixSignal.Add(int,GISharp.Lib.GLib.SourceFunc,int)']/*" />
        [GISharp.Runtime.SinceAttribute("2.30")]
        public static uint Add(int signum, GISharp.Lib.GLib.SourceFunc handler, int priority = GISharp.Lib.GLib.Priority.Default)
        {
            CheckAddArgs(signum, handler, priority);
            var signum_ = (int)signum;
            var handler_ = (delegate* unmanaged[Cdecl]<System.IntPtr, GISharp.Runtime.Boolean>)&GISharp.Lib.GLib.SourceFuncMarshal.Callback;
            var handlerHandle = System.Runtime.InteropServices.GCHandle.Alloc((handler, GISharp.Runtime.CallbackScope.Notified));
            var userData_ = (System.IntPtr)handlerHandle;
            var notify_ = (delegate* unmanaged[Cdecl]<System.IntPtr, void>)&GISharp.Runtime.GMarshal.DestroyGCHandle;
            var priority_ = (int)priority;
            var ret_ = g_unix_signal_add_full(priority_,signum_,handler_,userData_,notify_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = (uint)ret_;
            return ret;
        }
    }
}