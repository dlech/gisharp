<declaration>

<member name='VariantParseError.Failed'>
<summary>
generic error (unused)
</summary>
</member>

<member name='VariantParseError.BasicTypeExpected'>
<summary>
a non-basic <see cref="VariantType"/> was given where a basic type was expected
</summary>
</member>

<member name='VariantParseError.CannotInferType'>
<summary>
cannot infer the <see cref="VariantType"/>
</summary>
</member>

<member name='VariantParseError.DefiniteTypeExpected'>
<summary>
an indefinite <see cref="VariantType"/> was given where a definite type was expected
</summary>
</member>

<member name='VariantParseError.InputNotAtEnd'>
<summary>
extra data after parsing finished
</summary>
</member>

<member name='VariantParseError.InvalidCharacter'>
<summary>
invalid character in number or unicode escape
</summary>
</member>

<member name='VariantParseError.InvalidFormatString'>
<summary>
not a valid <see cref="Variant"/> format string
</summary>
</member>

<member name='VariantParseError.InvalidObjectPath'>
<summary>
not a valid object path
</summary>
</member>

<member name='VariantParseError.InvalidSignature'>
<summary>
not a valid type signature
</summary>
</member>

<member name='VariantParseError.InvalidTypeString'>
<summary>
not a valid <see cref="Variant"/> type string
</summary>
</member>

<member name='VariantParseError.NoCommonType'>
<summary>
could not find a common type for array entries
</summary>
</member>

<member name='VariantParseError.NumberOutOfRange'>
<summary>
the numerical value is out of range of the given type
</summary>
</member>

<member name='VariantParseError.NumberTooBig'>
<summary>
the numerical value is out of range for any type
</summary>
</member>

<member name='VariantParseError.TypeError'>
<summary>
cannot parse as variant of the specified type
</summary>
</member>

<member name='VariantParseError.UnexpectedToken'>
<summary>
an unexpected token was encountered
</summary>
</member>

<member name='VariantParseError.UnknownKeyword'>
<summary>
an unknown keyword was encountered
</summary>
</member>

<member name='VariantParseError.UnterminatedStringConstant'>
<summary>
unterminated string constant
</summary>
</member>

<member name='VariantParseError.ValueExpected'>
<summary>
no value given
</summary>
</member>

<member name='VariantParseError.Recursion'>
<summary>
variant was too deeply nested; <see cref="Variant"/> is only guaranteed to handle nesting up to 64 levels ()
</summary>
</member>

<member name='VariantParseError'>
<summary>
Error codes returned by parsing text-format GVariants.
</summary>
</member>

<member name='VariantParseErrorDomain.Quark'>
</member>

<member name='VariantParseErrorDomain.PrintContext(GISharp.Lib.GLib.Error,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Pretty-prints a message showing the context of a <see cref="Variant"/> parse
error within the string for which parsing was attempted.
</summary>
<remarks>
<para>
The resulting string is suitable for output to the console or other
monospace media where newlines are treated in the usual way.
</para>
<para>
The message will typically look something like one of the following:
</para>
<para>
|[
unterminated string constant:
  (1, 2, 3, 'abc
            ^^^^
]|
</para>
<para>
or
</para>
<para>
|[
unable to find a common type:
  [1, 2, 3, 'str']
   ^        ^^^^^
]|
</para>
<para>
The format of the message may change in a future version.
</para>
<para>
<paramref name="error"/> must have come from a failed attempt to <see cref="Variant.Parse(GISharp.Lib.GLib.VariantType,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)"/> and
<paramref name="sourceStr"/> must be exactly the same string that caused the error.
If <paramref name="sourceStr"/> was not nul-terminated when you passed it to
<see cref="Variant.Parse(GISharp.Lib.GLib.VariantType,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)"/> then you must add nul termination before using this
function.
</para>
</remarks>
<param name="error">
a <see cref="Error"/> from the <see cref="VariantParseError"/> domain
</param>
<param name="sourceStr">
the string that was given to the parser
</param>
<returns>
the printed message
</returns>
</member>

</declaration>
