<declaration>

<member name='TimeZone.Local'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to local time.  The local time
zone may change between invocations to this function; for example,
if the system administrator changes it.
</summary>
<remarks>
<para>
This is equivalent to calling <see cref="TimeZone.TimeZone(GISharp.Runtime.NullableUnownedUtf8)"/> with the value of
the `TZ` environment variable (including the possibility of <c>null</c>).
</para>
<para>
You should release the return value by calling <see cref="TimeZone.Unref()"/>
when you are done with it.
</para>
</remarks>
</member>

<member name='TimeZone.Utc'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to UTC.
</summary>
<remarks>
<para>
This is equivalent to calling <see cref="TimeZone.TimeZone(GISharp.Runtime.NullableUnownedUtf8)"/> with a value like
"Z", "UTC", "+00", etc.
</para>
<para>
You should release the return value by calling <see cref="TimeZone.Unref()"/>
when you are done with it.
</para>
</remarks>
</member>

<member name='TimeZone.Identifier'>
<summary>
Get the identifier of this <see cref="TimeZone"/>, as passed to <see cref="TimeZone.TimeZone(GISharp.Runtime.NullableUnownedUtf8)"/>.
If the identifier passed at construction time was not recognised, `UTC` will
be returned. If it was <c>null</c>, the identifier of the local timezone at
construction time will be returned.
</summary>
<remarks>
<para>
The identifier will be returned in the same format as provided at
construction time: if provided as a time offset, that will be returned by
this function.
</para>
</remarks>
</member>

<member name='TimeZone.TimeZone(GISharp.Runtime.NullableUnownedUtf8)'>
<summary>
A version of g_time_zone_new_identifier() which returns the UTC time zone
if <paramref name="identifier"/> could not be parsed or loaded.
</summary>
<remarks>
<para>
If you need to check whether <paramref name="identifier"/> was loaded successfully, use
g_time_zone_new_identifier().
</para>
</remarks>
<param name="identifier">
a timezone identifier
</param>
</member>

<member name='TimeZone.TimeZone(int)'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to the given constant offset from UTC,
in seconds.
</summary>
<remarks>
<para>
This is equivalent to calling <see cref="TimeZone.TimeZone(GISharp.Runtime.NullableUnownedUtf8)"/> with a string in the form
`[+|-]hh[:mm[:ss]]`.
</para>
</remarks>
<param name="seconds">
offset to UTC, in seconds
</param>
</member>

<member name='TimeZone.AdjustTime(GISharp.Lib.GLib.TimeType,long)'>
<summary>
Finds an interval within this instance that corresponds to the given <paramref name="time"/>,
possibly adjusting <paramref name="time"/> if required to fit into an interval.
The meaning of <paramref name="time"/> depends on <paramref name="type"/>.
</summary>
<remarks>
<para>
This function is similar to <see cref="TimeZone.FindInterval(GISharp.Lib.GLib.TimeType,long)"/>, with the
difference that it always succeeds (by making the adjustments
described below).
</para>
<para>
In any of the cases where <see cref="TimeZone.FindInterval(GISharp.Lib.GLib.TimeType,long)"/> succeeds then
this function returns the same value, without modifying <paramref name="time"/>.
</para>
<para>
This function may, however, modify <paramref name="time"/> in order to deal with
non-existent times.  If the non-existent local <paramref name="time"/> of 02:30 were
requested on March 14th 2010 in Toronto then this function would
adjust <paramref name="time"/> to be 03:00 and return the interval containing the
adjusted time.
</para>
</remarks>
<param name="type">
the <see cref="TimeType"/> of <paramref name="time"/>
</param>
<param name="time">
a pointer to a number of seconds since January 1, 1970
</param>
<returns>
the interval containing <paramref name="time"/>, never -1
</returns>
</member>

<member name='TimeZone.FindInterval(GISharp.Lib.GLib.TimeType,long)'>
<summary>
Finds an interval within this instance that corresponds to the given <paramref name="time"/>.
The meaning of <paramref name="time"/> depends on <paramref name="type"/>.
</summary>
<remarks>
<para>
If <paramref name="type"/> is <see cref="TimeType.Universal"/> then this function will always
succeed (since universal time is monotonic and continuous).
</para>
<para>
Otherwise <paramref name="time"/> is treated as local time.  The distinction between
<see cref="TimeType.Standard"/> and <see cref="TimeType.Daylight"/> is ignored except in
the case that the given <paramref name="time"/> is ambiguous.  In Toronto, for example,
01:30 on November 7th 2010 occurred twice (once inside of daylight
savings time and the next, an hour later, outside of daylight savings
time).  In this case, the different value of <paramref name="type"/> would result in a
different interval being returned.
</para>
<para>
It is still possible for this function to fail.  In Toronto, for
example, 02:00 on March 14th 2010 does not exist (due to the leap
forward to begin daylight savings time).  -1 is returned in that
case.
</para>
</remarks>
<param name="type">
the <see cref="TimeType"/> of <paramref name="time"/>
</param>
<param name="time">
a number of seconds since January 1, 1970
</param>
<returns>
the interval containing <paramref name="time"/>, or -1 in case of failure
</returns>
</member>

<member name='TimeZone.GetAbbreviation(int)'>
<summary>
Determines the time zone abbreviation to be used during a particular
<paramref name="interval"/> of time in the time zone this instance.
</summary>
<remarks>
<para>
For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings time
is in effect.
</para>
</remarks>
<param name="interval">
an interval within the timezone
</param>
<returns>
the time zone abbreviation, which belongs to this instance
</returns>
</member>

<member name='TimeZone.GetOffset(int)'>
<summary>
Determines the offset to UTC in effect during a particular <paramref name="interval"/>
of time in the time zone this instance.
</summary>
<remarks>
<para>
The offset is the number of seconds that you add to UTC time to
arrive at local time for this instance (ie: negative numbers for time zones
west of GMT, positive numbers for east).
</para>
</remarks>
<param name="interval">
an interval within the timezone
</param>
<returns>
the number of seconds that should be added to UTC to get the
         local time in this instance
</returns>
</member>

<member name='TimeZone.IsDst(int)'>
<summary>
Determines if daylight savings time is in effect during a particular
<paramref name="interval"/> of time in the time zone this instance.
</summary>
<param name="interval">
an interval within the timezone
</param>
<returns>
<c>true</c> if daylight savings time is in effect
</returns>
</member>

<member name='TimeZone'>
<summary>
<see cref="TimeZone"/> is an opaque structure whose members cannot be accessed
directly.
</summary>
</member>

</declaration>
