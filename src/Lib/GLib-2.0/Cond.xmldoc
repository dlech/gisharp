<declaration>

<member name='Cond.P'>
</member>

<member name='Cond.I'>
</member>

<member name='Cond.Broadcast()'>
<summary>
If threads are waiting for this instance, all of them are unblocked.
If no threads are waiting for this instance, this function has no effect.
It is good practice to lock the same mutex as the waiting threads
while calling this function, though not required.
</summary>
</member>

<member name='Cond.Clear()'>
<summary>
Frees the resources allocated to a <see cref="Cond"/> with <see cref="Cond.Init()"/>.
</summary>
<remarks>
This function should not be used with a <see cref="Cond"/> that has been
statically allocated.

Calling <see cref="Cond.Clear()"/> for a <see cref="Cond"/> on which threads are
blocking leads to undefined behaviour.
</remarks>
</member>

<member name='Cond.Init()'>
<summary>
Initialises a <see cref="Cond"/> so that it can be used.
</summary>
<remarks>
This function is useful to initialise a <see cref="Cond"/> that has been
allocated as part of a larger structure.  It is not necessary to
initialise a <see cref="Cond"/> that has been statically allocated.

To undo the effect of <see cref="Cond.Init()"/> when a <see cref="Cond"/> is no longer
needed, use <see cref="Cond.Clear()"/>.

Calling <see cref="Cond.Init()"/> on an already-initialised <see cref="Cond"/> leads
to undefined behaviour.
</remarks>
</member>

<member name='Cond.Signal()'>
<summary>
If threads are waiting for this instance, at least one of them is unblocked.
If no threads are waiting for this instance, this function has no effect.
It is good practice to hold the same lock as the waiting thread
while calling this function, though not required.
</summary>
</member>

<member name='Cond.Wait(GISharp.Lib.GLib.Mutex)'>
<summary>
Atomically releases <paramref name="mutex"/> and waits until this instance is signalled.
When this function returns, <paramref name="mutex"/> is locked again and owned by the
calling thread.
</summary>
<remarks>
When using condition variables, it is possible that a spurious wakeup
may occur (ie: <see cref="Cond.Wait(GISharp.Lib.GLib.Mutex)"/> returns even though <see cref="Cond.Signal()"/> was
not called).  It's also possible that a stolen wakeup may occur.
This is when <see cref="Cond.Signal()"/> is called, but another thread acquires
<paramref name="mutex"/> before this thread and modifies the state of the program in
such a way that when <see cref="Cond.Wait(GISharp.Lib.GLib.Mutex)"/> is able to return, the expected
condition is no longer met.

For this reason, <see cref="Cond.Wait(GISharp.Lib.GLib.Mutex)"/> must always be used in a loop.  See
the documentation for <see cref="Cond"/> for a complete example.
</remarks>
<param name="mutex">
a <see cref="Mutex"/> that is currently locked
</param>
</member>

<member name='Cond.WaitUntil(GISharp.Lib.GLib.Mutex,long)'>
<summary>
Waits until either this instance is signalled or <paramref name="endTime"/> has passed.
</summary>
<remarks>
As with <see cref="Cond.Wait(GISharp.Lib.GLib.Mutex)"/> it is possible that a spurious or stolen wakeup
could occur.  For that reason, waiting on a condition variable should
always be in a loop, based on an explicitly-checked predicate.

<c>true</c> is returned if the condition variable was signalled (or in the
case of a spurious wakeup).  <c>false</c> is returned if <paramref name="endTime"/> has
passed.

The following code shows how to correctly perform a timed wait on a
condition variable (extending the example presented in the
documentation for <see cref="Cond"/>):

|[&lt;!-- language="C" --&gt;
gpointer
pop_data_timed (void)
{
  gint64 end_time;
  gpointer data;

  g_mutex_lock (&amp;data_mutex);

  end_time = g_get_monotonic_time () + 5 * G_TIME_SPAN_SECOND;
  while (!current_data)
    if (!g_cond_wait_until (&amp;data_cond, &amp;data_mutex, end_time))
      {
        // timeout has passed.
        g_mutex_unlock (&amp;data_mutex);
        return NULL;
      }

  // there is data for us
  data = current_data;
  current_data = NULL;

  g_mutex_unlock (&amp;data_mutex);

  return data;
}
]|

Notice that the end time is calculated once, before entering the
loop and reused.  This is the motivation behind the use of absolute
time on this API -- if a relative time of 5 seconds were passed
directly to the call and a spurious wakeup occurred, the program would
have to start over waiting again (which would lead to a total wait
time of more than 5 seconds).
</remarks>
<param name="mutex">
a <see cref="Mutex"/> that is currently locked
</param>
<param name="endTime">
the monotonic time to wait until
</param>
<returns>
<c>true</c> on a signal, <c>false</c> on a timeout
</returns>
</member>

<member name='Cond'>
<summary>
The <see cref="Cond"/> struct is an opaque data structure that represents a
condition. Threads can block on a <see cref="Cond"/> if they find a certain
condition to be false. If other threads change the state of this
condition they signal the <see cref="Cond"/>, and that causes the waiting
threads to be woken up.
</summary>
<remarks>
Consider the following example of a shared variable.  One or more
threads can wait for data to be published to the variable and when
another thread publishes the data, it can signal one of the waiting
threads to wake up to collect the data.

Here is an example for using GCond to block a thread until a condition
is satisfied:
|[&lt;!-- language="C" --&gt;
  gpointer current_data = NULL;
  GMutex data_mutex;
  GCond data_cond;

  void
  push_data (gpointer data)
  {
    g_mutex_lock (&amp;data_mutex);
    current_data = data;
    g_cond_signal (&amp;data_cond);
    g_mutex_unlock (&amp;data_mutex);
  }

  gpointer
  pop_data (void)
  {
    gpointer data;

    g_mutex_lock (&amp;data_mutex);
    while (!current_data)
      g_cond_wait (&amp;data_cond, &amp;data_mutex);
    data = current_data;
    current_data = NULL;
    g_mutex_unlock (&amp;data_mutex);

    return data;
  }
]|
Whenever a thread calls pop_data() now, it will wait until
current_data is non-<c>null</c>, i.e. until some other thread
has called push_data().

The example shows that use of a condition variable must always be
paired with a mutex.  Without the use of a mutex, there would be a
race between the check of <c>currentData</c> by the while loop in
pop_data() and waiting. Specifically, another thread could set
<c>currentData</c> after the check, and signal the cond (with nobody
waiting on it) before the first thread goes to sleep. <see cref="Cond"/> is
specifically useful for its ability to release the mutex and go
to sleep atomically.

It is also important to use the <see cref="Cond.Wait(GISharp.Lib.GLib.Mutex)"/> and <see cref="Cond.WaitUntil(GISharp.Lib.GLib.Mutex,long)"/>
functions only inside a loop which checks for the condition to be
true.  See <see cref="Cond.Wait(GISharp.Lib.GLib.Mutex)"/> for an explanation of why the condition may
not be true even after it returns.

If a <see cref="Cond"/> is allocated in static storage then it can be used
without initialisation.  Otherwise, you should call <see cref="Cond.Init()"/>
on it and <see cref="Cond.Clear()"/> when done.

A <see cref="Cond"/> should only be accessed via the g_cond_ functions.
</remarks>
</member>

</declaration>
