// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <include file="SList.xmldoc" path="declaration/member[@name='SList']/*" />
    public abstract unsafe partial class SList : GISharp.Runtime.Opaque
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="SList.xmldoc" path="declaration/member[@name='UnmanagedStruct.Data']/*" />
            public readonly System.IntPtr Data;

            /// <include file="SList.xmldoc" path="declaration/member[@name='UnmanagedStruct.Next']/*" />
            public readonly GISharp.Lib.GLib.SList.UnmanagedStruct* Next;
#pragma warning restore CS0169, CS0414, CS0649
        }

        /// <summary>
        /// Allocates space for one #GSList element. It is called by the
        /// g_slist_append(), g_slist_prepend(), g_slist_insert() and
        /// g_slist_insert_sorted() functions and so is rarely used on its own.
        /// </summary>
        /// <returns>
        /// a pointer to the newly-allocated #GSList element.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_alloc();

        /// <summary>
        /// Adds a new element on to the end of the list.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The return value is the new start of the list, which may
        /// have changed, so make sure you store the new value.
        /// </para>
        /// <para>
        /// Note that g_slist_append() has to traverse the entire list
        /// to find the end, which is inefficient when adding multiple
        /// elements. A common idiom to avoid the inefficiency is to prepend
        /// the elements and reverse the list when all elements have been added.
        /// </para>
        /// <para>
        /// |[&lt;!-- language="C" --&gt;
        /// // Notice that these are initialized to the empty list.
        /// GSList *list = NULL, *number_list = NULL;
        /// </para>
        /// <para>
        /// // This is a list of strings.
        /// list = g_slist_append (list, "first");
        /// list = g_slist_append (list, "second");
        /// </para>
        /// <para>
        /// // This is a list of integers.
        /// number_list = g_slist_append (number_list, GINT_TO_POINTER (27));
        /// number_list = g_slist_append (number_list, GINT_TO_POINTER (14));
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <returns>
        /// the new start of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_append(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Adds the second #GSList onto the end of the first #GSList.
        /// Note that the elements of the second #GSList are not copied.
        /// They are used directly.
        /// </summary>
        /// <param name="list1">
        /// a #GSList
        /// </param>
        /// <param name="list2">
        /// the #GSList to add to the end of the first #GSList
        /// </param>
        /// <returns>
        /// the start of the new #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_concat(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list1,
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list2);

        /// <summary>
        /// Copies a #GSList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note that this is a "shallow" copy. If the list elements
        /// consist of pointers to data, the pointers are copied but
        /// the actual data isn't. See g_slist_copy_deep() if you need
        /// to copy the data as well.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <returns>
        /// a copy of @list
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_copy(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list);

        /// <summary>
        /// Makes a full (deep) copy of a #GSList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// In contrast with g_slist_copy(), this function uses @func to make a copy of
        /// each list element, in addition to copying the list container itself.
        /// </para>
        /// <para>
        /// @func, as a #GCopyFunc, takes two arguments, the data to be copied
        /// and a @user_data pointer. On common processor architectures, it's safe to
        /// pass %NULL as @user_data if the copy function takes only one argument. You
        /// may get compiler warnings from this though if compiling with GCCâ€™s
        /// `-Wcast-function-type` warning.
        /// </para>
        /// <para>
        /// For instance, if @list holds a list of GObjects, you can do:
        /// |[&lt;!-- language="C" --&gt;
        /// another_list = g_slist_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
        /// ]|
        /// </para>
        /// <para>
        /// And, to entirely free the new list, you could do:
        /// |[&lt;!-- language="C" --&gt;
        /// g_slist_free_full (another_list, g_object_unref);
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="func">
        /// a copy function used to copy every element in the list
        /// </param>
        /// <param name="userData">
        /// user data passed to the copy function @func, or #NULL
        /// </param>
        /// <returns>
        /// a full copy of @list, use g_slist_free_full() to free it
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.34")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_copy_deep(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="CopyFunc" type="GCopyFunc" managed-name="CopyFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr> func,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Removes the node link_ from the list and frees it.
        /// Compare this to g_slist_remove_link() which removes the node
        /// without freeing it.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Removing arbitrary nodes from a singly-linked list requires time
        /// that is proportional to the length of the list (ie. O(n)). If you
        /// find yourself using g_slist_delete_link() frequently, you should
        /// consider a different data structure, such as the doubly-linked
        /// #GList.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="link">
        /// node to delete
        /// </param>
        /// <returns>
        /// the new head of @list
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_delete_link(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* link);

        /// <summary>
        /// Finds the element in a #GSList which
        /// contains the given data.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the element data to find
        /// </param>
        /// <returns>
        /// the found #GSList element,
        ///     or %NULL if it is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_find(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Finds an element in a #GSList, using a supplied function to
        /// find the desired element. It iterates over the list, calling
        /// the given function which should return 0 when the desired
        /// element is found. The function takes two #gconstpointer arguments,
        /// the #GSList element's data as the first argument and the
        /// given user data.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// user data passed to the function
        /// </param>
        /// <param name="func">
        /// the function to call for each element.
        ///     It should return 0 when the desired element is found
        /// </param>
        /// <returns>
        /// the found #GSList element, or %NULL if it is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_find_custom(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="CompareFunc" type="GCompareFunc" managed-name="CompareFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, int> func);

        /// <summary>
        /// Calls a function for each element of a #GSList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// It is safe for @func to remove the element from @list, but it must
        /// not modify any part of the list after that element.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="func">
        /// the function to call with each element's data
        /// </param>
        /// <param name="userData">
        /// user data to pass to the function
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_slist_foreach(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="Func" type="GFunc" managed-name="Func" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, void> func,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Frees all of the memory used by a #GSList.
        /// The freed elements are returned to the slice allocator.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If list elements contain dynamically-allocated memory,
        /// you should either use g_slist_free_full() or free them manually
        /// first.
        /// </para>
        /// <para>
        /// It can be combined with g_steal_pointer() to ensure the list head pointer
        /// is not left dangling:
        /// |[&lt;!-- language="C" --&gt;
        /// GSList *list_of_borrowed_things = â€¦;  /&lt;!-- --&gt;* (transfer container) *&lt;!-- --&gt;/
        /// g_slist_free (g_steal_pointer (&amp;list_of_borrowed_things));
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// the first link of a #GSList
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_slist_free(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list);

        /// <summary>
        /// Frees one #GSList element.
        /// It is usually used after g_slist_remove_link().
        /// </summary>
        /// <param name="list">
        /// a #GSList element
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_slist_free_1(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list);

        /// <summary>
        /// Convenience method, which frees all the memory used by a #GSList, and
        /// calls the specified destroy function on every element's data.
        /// </summary>
        /// <remarks>
        /// <para>
        /// @free_func must not modify the list (eg, by removing the freed
        /// element from it).
        /// </para>
        /// <para>
        /// It can be combined with g_steal_pointer() to ensure the list head pointer
        /// is not left dangling Â­â€” this also has the nice property that the head pointer
        /// is cleared before any of the list elements are freed, to prevent double frees
        /// from @free_func:
        /// |[&lt;!-- language="C" --&gt;
        /// GSList *list_of_owned_things = â€¦;  /&lt;!-- --&gt;* (transfer full) (element-type GObject) *&lt;!-- --&gt;/
        /// g_slist_free_full (g_steal_pointer (&amp;list_of_owned_things), g_object_unref);
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// the first link of a #GSList
        /// </param>
        /// <param name="freeFunc">
        /// the function to be called to free each element's data
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.28")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_slist_free_full(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="DestroyNotify" type="GDestroyNotify" managed-name="DestroyNotify" /> */
        /* transfer-ownership:none scope:async direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, void> freeFunc);

        /// <summary>
        /// Gets the position of the element containing
        /// the given data (starting from 0).
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data to find
        /// </param>
        /// <returns>
        /// the index of the element containing the data,
        ///     or -1 if the data is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        private static extern int g_slist_index(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Inserts a new element into the list at the given position.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <param name="position">
        /// the position to insert the element.
        ///     If this is negative, or is larger than the number
        ///     of elements in the list, the new element is added on
        ///     to the end of the list.
        /// </param>
        /// <returns>
        /// the new start of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_insert(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="gint" type="gint" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        int position);

        /// <summary>
        /// Inserts a node before @sibling containing @data.
        /// </summary>
        /// <param name="slist">
        /// a #GSList
        /// </param>
        /// <param name="sibling">
        /// node to insert @data before
        /// </param>
        /// <param name="data">
        /// data to put in the newly-inserted node
        /// </param>
        /// <returns>
        /// the new head of the list.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_insert_before(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* slist,
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* sibling,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Inserts a new element into the list, using the given
        /// comparison function to determine its position.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <param name="func">
        /// the function to compare elements in the list.
        ///     It should return a number &gt; 0 if the first parameter
        ///     comes after the second parameter in the sort order.
        /// </param>
        /// <returns>
        /// the new start of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_insert_sorted(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="CompareFunc" type="GCompareFunc" managed-name="CompareFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, int> func);

        /// <summary>
        /// Inserts a new element into the list, using the given
        /// comparison function to determine its position.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <param name="func">
        /// the function to compare elements in the list.
        ///     It should return a number &gt; 0 if the first parameter
        ///     comes after the second parameter in the sort order.
        /// </param>
        /// <param name="userData">
        /// data to pass to comparison function
        /// </param>
        /// <returns>
        /// the new start of the #GSList
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.10")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_insert_sorted_with_data(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="CompareDataFunc" type="GCompareDataFunc" managed-name="CompareDataFunc" /> */
        /* transfer-ownership:none closure:3 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, int> func,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Gets the last element in a #GSList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This function iterates over the whole list.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <returns>
        /// the last element in the #GSList,
        ///     or %NULL if the #GSList has no elements
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_last(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list);

        /// <summary>
        /// Gets the number of elements in a #GSList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This function iterates over the whole list to
        /// count its elements. To check whether the list is non-empty, it is faster to
        /// check @list against %NULL.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <returns>
        /// the number of elements in the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" managed-name="System.UInt32" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_slist_length(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list);

        /// <summary>
        /// Gets the element at the given position in a #GSList.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="n">
        /// the position of the element, counting from 0
        /// </param>
        /// <returns>
        /// the element, or %NULL if the position is off
        ///     the end of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_nth(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="guint" type="guint" managed-name="System.UInt32" /> */
        /* transfer-ownership:none direction:in */
        uint n);

        /// <summary>
        /// Gets the data of the element at the given position.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="n">
        /// the position of the element
        /// </param>
        /// <returns>
        /// the element's data, or %NULL if the position
        ///     is off the end of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_slist_nth_data(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="guint" type="guint" managed-name="System.UInt32" /> */
        /* transfer-ownership:none direction:in */
        uint n);

        /// <summary>
        /// Gets the position of the given element
        /// in the #GSList (starting from 0).
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="llink">
        /// an element in the #GSList
        /// </param>
        /// <returns>
        /// the position of the element in the #GSList,
        ///     or -1 if the element is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        private static extern int g_slist_position(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* llink);

        /// <summary>
        /// Adds a new element on to the start of the list.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The return value is the new start of the list, which
        /// may have changed, so make sure you store the new value.
        /// </para>
        /// <para>
        /// |[&lt;!-- language="C" --&gt;
        /// // Notice that it is initialized to the empty list.
        /// GSList *list = NULL;
        /// list = g_slist_prepend (list, "last");
        /// list = g_slist_prepend (list, "first");
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <returns>
        /// the new start of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_prepend(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Removes an element from a #GSList.
        /// If two elements contain the same data, only the first is removed.
        /// If none of the elements contain the data, the #GSList is unchanged.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// the data of the element to remove
        /// </param>
        /// <returns>
        /// the new start of the #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_remove(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Removes all list nodes with data equal to @data.
        /// Returns the new head of the list. Contrast with
        /// g_slist_remove() which removes only the first node
        /// matching the given data.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="data">
        /// data to remove
        /// </param>
        /// <returns>
        /// new head of @list
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_remove_all(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Removes an element from a #GSList, without
        /// freeing the element. The removed element's next
        /// link is set to %NULL, so that it becomes a
        /// self-contained list with one element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Removing arbitrary nodes from a singly-linked list
        /// requires time that is proportional to the length of the list
        /// (ie. O(n)). If you find yourself using g_slist_remove_link()
        /// frequently, you should consider a different data structure,
        /// such as the doubly-linked #GList.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="link">
        /// an element in the #GSList
        /// </param>
        /// <returns>
        /// the new start of the #GSList, without the element
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_remove_link(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* link);

        /// <summary>
        /// Reverses a #GSList.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <returns>
        /// the start of the reversed #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_reverse(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list);

        /// <summary>
        /// Sorts a #GSList using the given comparison function. The algorithm
        /// used is a stable sort.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="compareFunc">
        /// the comparison function used to sort the #GSList.
        ///     This function is passed the data from 2 elements of the #GSList
        ///     and should return 0 if they are equal, a negative value if the
        ///     first element comes before the second, or a positive value if
        ///     the first element comes after the second.
        /// </param>
        /// <returns>
        /// the start of the sorted #GSList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_sort(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="CompareFunc" type="GCompareFunc" managed-name="CompareFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, int> compareFunc);

        /// <summary>
        /// Like g_slist_sort(), but the sort function accepts a user data argument.
        /// </summary>
        /// <param name="list">
        /// a #GSList
        /// </param>
        /// <param name="compareFunc">
        /// comparison function
        /// </param>
        /// <param name="userData">
        /// data to pass to comparison function
        /// </param>
        /// <returns>
        /// new head of the list
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.SList.UnmanagedStruct* g_slist_sort_with_data(
        /* <type name="GLib.SList" type="GSList*" managed-name="GISharp.Lib.GLib.SList" is-pointer="1">
*   <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.SList.UnmanagedStruct* list,
        /* <type name="CompareDataFunc" type="GCompareDataFunc" managed-name="CompareDataFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, int> compareFunc,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);
    }
}