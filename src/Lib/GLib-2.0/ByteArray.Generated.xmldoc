<declaration>

<member name='UnmanagedStruct.Data'>
<summary>
a pointer to the element data. The data may be moved as
    elements are added to the <see cref="ByteArray"/>
</summary>
</member>

<member name='UnmanagedStruct.Len'>
<summary>
the number of elements in the <see cref="ByteArray"/>
</summary>
</member>

<member name='ByteArray.ByteArray()'>
<summary>
Creates a new <see cref="ByteArray"/> with a reference count of 1.
</summary>
</member>

<member name='ByteArray.ByteArray(GISharp.Runtime.CArray&lt;byte&gt;)'>
<summary>
Create byte array containing the data. The data will be owned by the array
and will be freed with g_free(), i.e. it could be allocated using g_strdup().
</summary>
<remarks>
<para>
Do not use it if the length of <paramref name="data"/> is greater than %G_MAXUINT. <see cref="ByteArray"/>
stores the length of its data in #guint, which may be shorter than
#gsize.
</para>
</remarks>
<param name="data">
byte data for the array
</param>
</member>

<member name='ByteArray.ByteArray(uint)'>
<summary>
Creates a new <see cref="ByteArray"/> with <paramref name="reservedSize"/> bytes preallocated.
This avoids frequent reallocation, if you are going to add many
bytes to the array. Note however that the size of the array is still
0.
</summary>
<param name="reservedSize">
number of bytes preallocated
</param>
</member>

<member name='ByteArray.Append(System.ReadOnlySpan&lt;byte&gt;)'>
<summary>
Adds the given bytes to the end of the <see cref="ByteArray"/>.
The array will grow in size automatically if necessary.
</summary>
<param name="data">
the byte data to be added
</param>
</member>

<member name='ByteArray.Free(bool)'>
<summary>
Frees the memory allocated by the <see cref="ByteArray"/>. If <paramref name="freeSegment"/> is
<c>true</c> it frees the actual byte data. If the reference count of
this instance is greater than one, the <see cref="ByteArray"/> wrapper is preserved but
the size of this instance will be set to zero.
</summary>
<param name="freeSegment">
if <c>true</c> the actual byte data is freed as well
</param>
<returns>
the element data if <paramref name="freeSegment"/> is <c>false</c>, otherwise
         <c>null</c>.  The element data should be freed using g_free().
</returns>
</member>

<member name='ByteArray.FreeToBytes()'>
<summary>
Transfers the data from the <see cref="ByteArray"/> into a new immutable <see cref="Bytes"/>.
</summary>
<remarks>
<para>
The <see cref="ByteArray"/> is freed unless the reference count of this instance is greater
than one, the <see cref="ByteArray"/> wrapper is preserved but the size of this instance
will be set to zero.
</para>
<para>
This is identical to using <see cref="Bytes.Bytes(GISharp.Runtime.CArray{byte})"/> and <see cref="ByteArray.Free(bool)"/>
together.
</para>
</remarks>
<returns>
a new immutable <see cref="Bytes"/> representing same
    byte data that was in the array
</returns>
</member>

<member name='ByteArray.Prepend(System.ReadOnlySpan&lt;byte&gt;)'>
<summary>
Adds the given data to the start of the <see cref="ByteArray"/>.
The array will grow in size automatically if necessary.
</summary>
<param name="data">
the byte data to be added
</param>
</member>

<member name='ByteArray.RemoveIndex(uint)'>
<summary>
Removes the byte at the given index from a <see cref="ByteArray"/>.
The following bytes are moved down one place.
</summary>
<param name="index">
the index of the byte to remove
</param>
</member>

<member name='ByteArray.RemoveIndexFast(uint)'>
<summary>
Removes the byte at the given index from a <see cref="ByteArray"/>. The last
element in the array is used to fill in the space, so this function
does not preserve the order of the <see cref="ByteArray"/>. But it is faster
than <see cref="ByteArray.RemoveIndex(uint)"/>.
</summary>
<param name="index">
the index of the byte to remove
</param>
</member>

<member name='ByteArray.RemoveRange(uint,uint)'>
<summary>
Removes the given number of bytes starting at the given index from a
<see cref="ByteArray"/>.  The following elements are moved to close the gap.
</summary>
<param name="index">
the index of the first byte to remove
</param>
<param name="length">
the number of bytes to remove
</param>
</member>

<member name='ByteArray.SetSize(uint)'>
<summary>
Sets the size of the <see cref="ByteArray"/>, expanding it if necessary.
</summary>
<param name="length">
the new size of the <see cref="ByteArray"/>
</param>
</member>

<member name='ByteArray'>
<summary>
Contains the public fields of a GByteArray.
</summary>
</member>

</declaration>
