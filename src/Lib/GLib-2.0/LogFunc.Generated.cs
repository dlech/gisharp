// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <summary>
    /// Specifies the prototype of log handler functions.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The default log handler, g_log_default_handler(), automatically appends a
    /// new-line character to @message when printing it. It is advised that any
    /// custom log handler functions behave similarly, so that logging calls in user
    /// code do not need modifying to add a new-line character to the message if the
    /// log handler is changed.
    /// </para>
    /// <para>
    /// This is not used if structured logging is enabled; see
    /// [Using Structured Logging][using-structured-logging].
    /// </para>
    /// </remarks>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedLogFunc(
    /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 direction:in */
    byte* logDomain,
    /* <type name="LogLevelFlags" type="GLogLevelFlags" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GLib.LogLevelFlags logLevel,
    /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 direction:in */
    byte* message,
    /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 closure:3 direction:in */
    System.IntPtr userData);

    /// <include file="LogFunc.xmldoc" path="declaration/member[@name='LogFunc']/*" />
    public delegate void LogFunc(GISharp.Lib.GLib.NullableUnownedUtf8 logDomain, GISharp.Lib.GLib.LogLevelFlags logLevel, GISharp.Lib.GLib.NullableUnownedUtf8 message);

    /// <summary>
    /// Class for marshalling <see cref="LogFunc"/> methods.
    /// </summary>
    public static unsafe class LogFuncMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="LogFunc"/>.
        /// </summary>
        public static GISharp.Lib.GLib.LogFunc FromPointer(delegate* unmanaged[Cdecl]<byte*, GISharp.Lib.GLib.LogLevelFlags, byte*, System.IntPtr, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(GISharp.Lib.GLib.NullableUnownedUtf8 logDomain, GISharp.Lib.GLib.LogLevelFlags logLevel, GISharp.Lib.GLib.NullableUnownedUtf8 message)
            {
                var logDomain_ = (byte*)logDomain.UnsafeHandle;
                var logLevel_ = (GISharp.Lib.GLib.LogLevelFlags)logLevel;
                var message_ = (byte*)message.UnsafeHandle;
                callback_(logDomain_, logLevel_, message_, userData_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            return managedCallback;
        }

        /// <summary>
        /// For runtime use only.
        /// </summary>
        [System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(System.Runtime.CompilerServices.CallConvCdecl) })]
        public static void Callback(byte* logDomain_, GISharp.Lib.GLib.LogLevelFlags logLevel_, byte* message_, System.IntPtr userData_)
        {
            try
            {
                var logDomain = new GISharp.Lib.GLib.NullableUnownedUtf8(logDomain_);
                var logLevel = (GISharp.Lib.GLib.LogLevelFlags)logLevel_;
                var message = new GISharp.Lib.GLib.NullableUnownedUtf8(message_);
                var userDataHandle = (System.Runtime.InteropServices.GCHandle)userData_;
                var (userData, userDataScope) = ((LogFunc, GISharp.Runtime.CallbackScope))userDataHandle.Target!;
                userData.Invoke(logDomain, logLevel, message);
                if (userDataScope == GISharp.Runtime.CallbackScope.Async)
                {
                    userDataHandle.Free();
                }
            }
            catch (System.Exception ex)
            {
                GISharp.Runtime.GMarshal.PushUnhandledException(ex);
            }
        }
    }
}