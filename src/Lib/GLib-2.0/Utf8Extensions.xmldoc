<declaration>

<member name='Utf8Extensions.CaseFold(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Converts a string into a form that is independent of case. The
result will not correspond to any particular case, but can be
compared for equality or ordered with the results of calling
<see cref="Utf8Extensions.CaseFold(GISharp.Lib.GLib.UnownedUtf8)"/> on other strings.
</summary>
<remarks>
Note that calling <see cref="Utf8Extensions.CaseFold(GISharp.Lib.GLib.UnownedUtf8)"/> followed by <see cref="Utf8Extensions.Collate(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)"/> is
only an approximation to the correct linguistic case insensitive
ordering, though it is a fairly good one. Getting this exactly
right would require a more sophisticated collation function that
takes case sensitivity into account. GLib does not currently
provide such a function.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<returns>
a newly allocated string, that is a
  case independent form of this instance.
</returns>
</member>

<member name='Utf8Extensions.CaseFold(System.String,System.Int32)'>
<summary>
Converts a string into a form that is independent of case. The
result will not correspond to any particular case, but can be
compared for equality or ordered with the results of calling
<see cref="Utf8Extensions.CaseFold(GISharp.Lib.GLib.UnownedUtf8)"/> on other strings.
</summary>
<remarks>
Note that calling <see cref="Utf8Extensions.CaseFold(GISharp.Lib.GLib.UnownedUtf8)"/> followed by <see cref="Utf8Extensions.Collate(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)"/> is
only an approximation to the correct linguistic case insensitive
ordering, though it is a fairly good one. Getting this exactly
right would require a more sophisticated collation function that
takes case sensitivity into account. GLib does not currently
provide such a function.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string, that is a
  case independent form of this instance.
</returns>
</member>

<member name='Utf8Extensions.Collate(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Compares two strings for ordering using the linguistically
correct rules for the [current locale][setlocale].
When sorting a large number of strings, it will be significantly
faster to obtain collation keys with <see cref="Utf8Extensions.CollateKey(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/> and
compare the keys with strcmp() when sorting instead of sorting
the original strings.
</summary>
<param name="str1">
a UTF-8 encoded string
</param>
<param name="str2">
a UTF-8 encoded string
</param>
<returns>
&lt; 0 if this instance compares before <paramref name="str2"/>,
  0 if they compare equal, &gt; 0 if this instance compares after <paramref name="str2"/>.
</returns>
</member>

<member name='Utf8Extensions.Collate(System.String,System.String)'>
<summary>
Compares two strings for ordering using the linguistically
correct rules for the [current locale][setlocale].
When sorting a large number of strings, it will be significantly
faster to obtain collation keys with <see cref="Utf8Extensions.CollateKey(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/> and
compare the keys with strcmp() when sorting instead of sorting
the original strings.
</summary>
<param name="str1">
a UTF-8 encoded string
</param>
<param name="str2">
a UTF-8 encoded string
</param>
<returns>
&lt; 0 if this instance compares before <paramref name="str2"/>,
  0 if they compare equal, &gt; 0 if this instance compares after <paramref name="str2"/>.
</returns>
</member>

<member name='Utf8Extensions.CollateKey(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Converts a string into a collation key that can be compared
with other collation keys produced by the same function using
strcmp().
</summary>
<remarks>
The results of comparing the collation keys of two strings
with strcmp() will always be the same as comparing the two
original keys with <see cref="Utf8Extensions.Collate(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)"/>.

Note that this function depends on the [current locale][setlocale].
</remarks>
<param name="str">
a UTF-8 encoded string.
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string.
</returns>
</member>

<member name='Utf8Extensions.CollateKey(System.String,System.Int32)'>
<summary>
Converts a string into a collation key that can be compared
with other collation keys produced by the same function using
strcmp().
</summary>
<remarks>
The results of comparing the collation keys of two strings
with strcmp() will always be the same as comparing the two
original keys with <see cref="Utf8Extensions.Collate(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)"/>.

Note that this function depends on the [current locale][setlocale].
</remarks>
<param name="str">
a UTF-8 encoded string.
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string.
</returns>
</member>

<member name='Utf8Extensions.CollateKeyForFilename(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Converts a string into a collation key that can be compared
with other collation keys produced by the same function using strcmp().
</summary>
<remarks>
In order to sort filenames correctly, this function treats the dot '.'
as a special case. Most dictionary orderings seem to consider it
insignificant, thus producing the ordering "event.c" "eventgenerator.c"
"event.h" instead of "event.c" "event.h" "eventgenerator.c". Also, we
would like to treat numbers intelligently so that "file1" "file10" "file5"
is sorted as "file1" "file5" "file10".

Note that this function depends on the [current locale][setlocale].
</remarks>
<param name="str">
a UTF-8 encoded string.
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string.
</returns>
</member>

<member name='Utf8Extensions.CollateKeyForFilename(System.String,System.Int32)'>
<summary>
Converts a string into a collation key that can be compared
with other collation keys produced by the same function using strcmp().
</summary>
<remarks>
In order to sort filenames correctly, this function treats the dot '.'
as a special case. Most dictionary orderings seem to consider it
insignificant, thus producing the ordering "event.c" "eventgenerator.c"
"event.h" instead of "event.c" "event.h" "eventgenerator.c". Also, we
would like to treat numbers intelligently so that "file1" "file10" "file5"
is sorted as "file1" "file5" "file10".

Note that this function depends on the [current locale][setlocale].
</remarks>
<param name="str">
a UTF-8 encoded string.
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string.
</returns>
</member>

<member name='Utf8Extensions.FindNextChar(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Finds the start of the next UTF-8 character in the string after this instance.
</summary>
<remarks>
this instance does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.

If <paramref name="end"/> is <c>null</c>, the return value will never be <c>null</c>: if the end of the
string is reached, a pointer to the terminating nul byte is returned. If
<paramref name="end"/> is non-<c>null</c>, the return value will be <c>null</c> if the end of the string
is reached.
</remarks>
<param name="p">
a pointer to a position within a UTF-8 encoded string
</param>
<param name="end">
a pointer to the byte following the end of the string,
    or <c>null</c> to indicate that the string is nul-terminated
</param>
<returns>
a pointer to the found character or <c>null</c> if <paramref name="end"/> is
   set and is reached
</returns>
</member>

<member name='Utf8Extensions.FindNextChar(System.String,System.String?)'>
<summary>
Finds the start of the next UTF-8 character in the string after this instance.
</summary>
<remarks>
this instance does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.

If <paramref name="end"/> is <c>null</c>, the return value will never be <c>null</c>: if the end of the
string is reached, a pointer to the terminating nul byte is returned. If
<paramref name="end"/> is non-<c>null</c>, the return value will be <c>null</c> if the end of the string
is reached.
</remarks>
<param name="p">
a pointer to a position within a UTF-8 encoded string
</param>
<param name="end">
a pointer to the byte following the end of the string,
    or <c>null</c> to indicate that the string is nul-terminated
</param>
<returns>
a pointer to the found character or <c>null</c> if <paramref name="end"/> is
   set and is reached
</returns>
</member>

<member name='Utf8Extensions.FindPrevChar(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Given a position <paramref name="p"/> with a UTF-8 encoded string this instance, find the start
of the previous UTF-8 character starting before <paramref name="p"/>. Returns <c>null</c> if no
UTF-8 characters are present in this instance before <paramref name="p"/>.
</summary>
<remarks>
<paramref name="p"/> does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.
</remarks>
<param name="str">
pointer to the beginning of a UTF-8 encoded string
</param>
<param name="p">
pointer to some position within this instance
</param>
<returns>
a pointer to the found character or <c>null</c>.
</returns>
</member>

<member name='Utf8Extensions.FindPrevChar(System.String,System.String)'>
<summary>
Given a position <paramref name="p"/> with a UTF-8 encoded string this instance, find the start
of the previous UTF-8 character starting before <paramref name="p"/>. Returns <c>null</c> if no
UTF-8 characters are present in this instance before <paramref name="p"/>.
</summary>
<remarks>
<paramref name="p"/> does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.
</remarks>
<param name="str">
pointer to the beginning of a UTF-8 encoded string
</param>
<param name="p">
pointer to some position within this instance
</param>
<returns>
a pointer to the found character or <c>null</c>.
</returns>
</member>

<member name='Utf8Extensions.GetChar(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Converts a sequence of bytes encoded as UTF-8 to a Unicode character.
</summary>
<remarks>
If this instance does not point to a valid UTF-8 encoded character, results
are undefined. If you are not sure that the bytes are complete
valid Unicode characters, you should use <see cref="Utf8Extensions.GetCharValidated(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/>
instead.
</remarks>
<param name="p">
a pointer to Unicode character encoded as UTF-8
</param>
<returns>
the resulting character
</returns>
</member>

<member name='Utf8Extensions.GetChar(System.String)'>
<summary>
Converts a sequence of bytes encoded as UTF-8 to a Unicode character.
</summary>
<remarks>
If this instance does not point to a valid UTF-8 encoded character, results
are undefined. If you are not sure that the bytes are complete
valid Unicode characters, you should use <see cref="Utf8Extensions.GetCharValidated(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/>
instead.
</remarks>
<param name="p">
a pointer to Unicode character encoded as UTF-8
</param>
<returns>
the resulting character
</returns>
</member>

<member name='Utf8Extensions.GetCharValidated(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
This function checks for incomplete characters, for invalid characters
such as characters that are out of the range of Unicode, and for
overlong encodings of valid characters.
</summary>
<remarks>
Note that <see cref="Utf8Extensions.GetCharValidated(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/> returns (gunichar)-2 if
<paramref name="maxLen"/> is positive and any of the bytes in the first UTF-8 character
sequence are nul.
</remarks>
<param name="p">
a pointer to Unicode character encoded as UTF-8
</param>
<param name="maxLen">
the maximum number of bytes to read, or -1 if this instance is nul-terminated
</param>
<returns>
the resulting character. If this instance points to a partial
    sequence at the end of a string that could begin a valid
    character (or if <paramref name="maxLen"/> is zero), returns (gunichar)-2;
    otherwise, if this instance does not point to a valid UTF-8 encoded
    Unicode character, returns (gunichar)-1.
</returns>
</member>

<member name='Utf8Extensions.GetCharValidated(System.String,System.Int32)'>
<summary>
Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
This function checks for incomplete characters, for invalid characters
such as characters that are out of the range of Unicode, and for
overlong encodings of valid characters.
</summary>
<remarks>
Note that <see cref="Utf8Extensions.GetCharValidated(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/> returns (gunichar)-2 if
<paramref name="maxLen"/> is positive and any of the bytes in the first UTF-8 character
sequence are nul.
</remarks>
<param name="p">
a pointer to Unicode character encoded as UTF-8
</param>
<param name="maxLen">
the maximum number of bytes to read, or -1 if this instance is nul-terminated
</param>
<returns>
the resulting character. If this instance points to a partial
    sequence at the end of a string that could begin a valid
    character (or if <paramref name="maxLen"/> is zero), returns (gunichar)-2;
    otherwise, if this instance does not point to a valid UTF-8 encoded
    Unicode character, returns (gunichar)-1.
</returns>
</member>

<member name='Utf8Extensions.MakeValid(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
If the provided string is valid UTF-8, return a copy of it. If not,
return a copy in which bytes that could not be interpreted as valid Unicode
are replaced with the Unicode replacement character (U+FFFD).
</summary>
<remarks>
For example, this is an appropriate function to use if you have received
a string that was incorrectly declared to be UTF-8, and you need a valid
UTF-8 version of it that can be logged or displayed to the user, with the
assumption that it is close enough to ASCII or UTF-8 to be mostly
readable as-is.
</remarks>
<param name="str">
string to coerce into UTF-8
</param>
<param name="len">
the maximum length of this instance to use, in bytes. If <paramref name="len"/> &lt; 0,
    then the string is nul-terminated.
</param>
<returns>
a valid UTF-8 string whose content resembles this instance
</returns>
</member>

<member name='Utf8Extensions.MakeValid(System.String,System.Int32)'>
<summary>
If the provided string is valid UTF-8, return a copy of it. If not,
return a copy in which bytes that could not be interpreted as valid Unicode
are replaced with the Unicode replacement character (U+FFFD).
</summary>
<remarks>
For example, this is an appropriate function to use if you have received
a string that was incorrectly declared to be UTF-8, and you need a valid
UTF-8 version of it that can be logged or displayed to the user, with the
assumption that it is close enough to ASCII or UTF-8 to be mostly
readable as-is.
</remarks>
<param name="str">
string to coerce into UTF-8
</param>
<param name="len">
the maximum length of this instance to use, in bytes. If <paramref name="len"/> &lt; 0,
    then the string is nul-terminated.
</param>
<returns>
a valid UTF-8 string whose content resembles this instance
</returns>
</member>

<member name='Utf8Extensions.Normalize(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.GLib.NormalizeMode)'>
<summary>
Converts a string into canonical form, standardizing
such issues as whether a character with an accent
is represented as a base character and combining
accent or as a single precomposed character. The
string has to be valid UTF-8, otherwise <c>null</c> is
returned. You should generally call <see cref="Utf8Extensions.Normalize(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.GLib.NormalizeMode)"/>
before comparing two Unicode strings.
</summary>
<remarks>
The normalization mode %G_NORMALIZE_DEFAULT only
standardizes differences that do not affect the
text content, such as the above-mentioned accent
representation. %G_NORMALIZE_ALL also standardizes
the "compatibility" characters in Unicode, such
as SUPERSCRIPT THREE to the standard forms
(in this case DIGIT THREE). Formatting information
may be lost but for most text operations such
characters should be considered the same.

%G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
but returned a result with composed forms rather
than a maximally decomposed form. This is often
useful if you intend to convert the string to
a legacy encoding or pass it to a system with
less capable Unicode handling.
</remarks>
<param name="str">
a UTF-8 encoded string.
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<param name="mode">
the type of normalization to perform.
</param>
<returns>
a newly allocated string, that
  is the normalized form of this instance, or <c>null</c> if this instance
  is not valid UTF-8.
</returns>
</member>

<member name='Utf8Extensions.Normalize(System.String,System.Int32,GISharp.Lib.GLib.NormalizeMode)'>
<summary>
Converts a string into canonical form, standardizing
such issues as whether a character with an accent
is represented as a base character and combining
accent or as a single precomposed character. The
string has to be valid UTF-8, otherwise <c>null</c> is
returned. You should generally call <see cref="Utf8Extensions.Normalize(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.GLib.NormalizeMode)"/>
before comparing two Unicode strings.
</summary>
<remarks>
The normalization mode %G_NORMALIZE_DEFAULT only
standardizes differences that do not affect the
text content, such as the above-mentioned accent
representation. %G_NORMALIZE_ALL also standardizes
the "compatibility" characters in Unicode, such
as SUPERSCRIPT THREE to the standard forms
(in this case DIGIT THREE). Formatting information
may be lost but for most text operations such
characters should be considered the same.

%G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
but returned a result with composed forms rather
than a maximally decomposed form. This is often
useful if you intend to convert the string to
a legacy encoding or pass it to a system with
less capable Unicode handling.
</remarks>
<param name="str">
a UTF-8 encoded string.
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<param name="mode">
the type of normalization to perform.
</param>
<returns>
a newly allocated string, that
  is the normalized form of this instance, or <c>null</c> if this instance
  is not valid UTF-8.
</returns>
</member>

<member name='Utf8Extensions.OffsetToPointer(GISharp.Lib.GLib.UnownedUtf8,System.Int64)'>
<summary>
Converts from an integer character offset to a pointer to a position
within the string.
</summary>
<remarks>
Since 2.10, this function allows to pass a negative <paramref name="offset"/> to
step backwards. It is usually worth stepping backwards from the end
instead of forwards if <paramref name="offset"/> is in the last fourth of the string,
since moving forward is about 3 times faster than moving backward.

Note that this function doesn't abort when reaching the end of this instance.
Therefore you should be sure that <paramref name="offset"/> is within string boundaries
before calling that function. Call <see cref="Utf8Extensions.Strlen(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/> when unsure.
This limitation exists as this function is called frequently during
text rendering and therefore has to be as fast as possible.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="offset">
a character offset within this instance
</param>
<returns>
the resulting pointer
</returns>
</member>

<member name='Utf8Extensions.OffsetToPointer(System.String,System.Int64)'>
<summary>
Converts from an integer character offset to a pointer to a position
within the string.
</summary>
<remarks>
Since 2.10, this function allows to pass a negative <paramref name="offset"/> to
step backwards. It is usually worth stepping backwards from the end
instead of forwards if <paramref name="offset"/> is in the last fourth of the string,
since moving forward is about 3 times faster than moving backward.

Note that this function doesn't abort when reaching the end of this instance.
Therefore you should be sure that <paramref name="offset"/> is within string boundaries
before calling that function. Call <see cref="Utf8Extensions.Strlen(GISharp.Lib.GLib.UnownedUtf8,System.Int32)"/> when unsure.
This limitation exists as this function is called frequently during
text rendering and therefore has to be as fast as possible.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="offset">
a character offset within this instance
</param>
<returns>
the resulting pointer
</returns>
</member>

<member name='Utf8Extensions.PointerToOffset(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Converts from a pointer to position within a string to an integer
character offset.
</summary>
<remarks>
Since 2.10, this function allows <paramref name="pos"/> to be before this instance, and returns
a negative offset in this case.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="pos">
a pointer to a position within this instance
</param>
<returns>
the resulting character offset
</returns>
</member>

<member name='Utf8Extensions.PointerToOffset(System.String,System.String)'>
<summary>
Converts from a pointer to position within a string to an integer
character offset.
</summary>
<remarks>
Since 2.10, this function allows <paramref name="pos"/> to be before this instance, and returns
a negative offset in this case.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="pos">
a pointer to a position within this instance
</param>
<returns>
the resulting character offset
</returns>
</member>

<member name='Utf8Extensions.PrevChar(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Finds the previous UTF-8 character in the string before this instance.
</summary>
<remarks>
this instance does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte. If this instance might be the first
character of the string, you must use <see cref="Utf8Extensions.FindPrevChar(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)"/> instead.
</remarks>
<param name="p">
a pointer to a position within a UTF-8 encoded string
</param>
<returns>
a pointer to the found character
</returns>
</member>

<member name='Utf8Extensions.PrevChar(System.String)'>
<summary>
Finds the previous UTF-8 character in the string before this instance.
</summary>
<remarks>
this instance does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte. If this instance might be the first
character of the string, you must use <see cref="Utf8Extensions.FindPrevChar(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)"/> instead.
</remarks>
<param name="p">
a pointer to a position within a UTF-8 encoded string
</param>
<returns>
a pointer to the found character
</returns>
</member>

<member name='Utf8Extensions.Strchr(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.GLib.Unichar)'>
<summary>
Finds the leftmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to <paramref name="len"/> bytes.
If <paramref name="len"/> is -1, allow unbounded search.
</summary>
<param name="p">
a nul-terminated UTF-8 encoded string
</param>
<param name="len">
the maximum length of this instance
</param>
<param name="c">
a Unicode character
</param>
<returns>
<c>null</c> if the string does not contain the character,
    otherwise, a pointer to the start of the leftmost occurrence
    of the character in the string.
</returns>
</member>

<member name='Utf8Extensions.Strchr(System.String,System.Int32,GISharp.Lib.GLib.Unichar)'>
<summary>
Finds the leftmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to <paramref name="len"/> bytes.
If <paramref name="len"/> is -1, allow unbounded search.
</summary>
<param name="p">
a nul-terminated UTF-8 encoded string
</param>
<param name="len">
the maximum length of this instance
</param>
<param name="c">
a Unicode character
</param>
<returns>
<c>null</c> if the string does not contain the character,
    otherwise, a pointer to the start of the leftmost occurrence
    of the character in the string.
</returns>
</member>

<member name='Utf8Extensions.Strdown(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Converts all Unicode characters in the string that have a case
to lowercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string changing.
</summary>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string, with all characters
   converted to lowercase.
</returns>
</member>

<member name='Utf8Extensions.Strdown(System.String,System.Int32)'>
<summary>
Converts all Unicode characters in the string that have a case
to lowercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string changing.
</summary>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string, with all characters
   converted to lowercase.
</returns>
</member>

<member name='Utf8Extensions.Strlen(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Computes the length of the string in characters, not including
the terminating nul character. If the <paramref name="max"/>'th byte falls in the
middle of a character, the last (partial) character is not counted.
</summary>
<param name="p">
pointer to the start of a UTF-8 encoded string
</param>
<param name="max">
the maximum number of bytes to examine. If <paramref name="max"/>
      is less than 0, then the string is assumed to be
      nul-terminated. If <paramref name="max"/> is 0, this instance will not be examined and
      may be <c>null</c>. If <paramref name="max"/> is greater than 0, up to <paramref name="max"/>
      bytes are examined
</param>
<returns>
the length of the string in characters
</returns>
</member>

<member name='Utf8Extensions.Strlen(System.String,System.Int32)'>
<summary>
Computes the length of the string in characters, not including
the terminating nul character. If the <paramref name="max"/>'th byte falls in the
middle of a character, the last (partial) character is not counted.
</summary>
<param name="p">
pointer to the start of a UTF-8 encoded string
</param>
<param name="max">
the maximum number of bytes to examine. If <paramref name="max"/>
      is less than 0, then the string is assumed to be
      nul-terminated. If <paramref name="max"/> is 0, this instance will not be examined and
      may be <c>null</c>. If <paramref name="max"/> is greater than 0, up to <paramref name="max"/>
      bytes are examined
</param>
<returns>
the length of the string in characters
</returns>
</member>

<member name='Utf8Extensions.Strncpy(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Like the standard C strncpy() function, but copies a given number
of characters instead of a given number of bytes. The <paramref name="src"/> string
must be valid UTF-8 encoded text. (Use g_utf8_validate() on all
text before trying to use UTF-8 utility functions with it.)
</summary>
<remarks>
Note you must ensure this instance is at least 4 * <paramref name="n"/> to fit the
largest possible UTF-8 characters
</remarks>
<param name="dest">
buffer to fill with characters from <paramref name="src"/>
</param>
<param name="src">
UTF-8 encoded string
</param>
<param name="n">
character count
</param>
<returns>
this instance
</returns>
</member>

<member name='Utf8Extensions.Strncpy(System.String,System.String,System.Int32)'>
<summary>
Like the standard C strncpy() function, but copies a given number
of characters instead of a given number of bytes. The <paramref name="src"/> string
must be valid UTF-8 encoded text. (Use g_utf8_validate() on all
text before trying to use UTF-8 utility functions with it.)
</summary>
<remarks>
Note you must ensure this instance is at least 4 * <paramref name="n"/> to fit the
largest possible UTF-8 characters
</remarks>
<param name="dest">
buffer to fill with characters from <paramref name="src"/>
</param>
<param name="src">
UTF-8 encoded string
</param>
<param name="n">
character count
</param>
<returns>
this instance
</returns>
</member>

<member name='Utf8Extensions.Strrchr(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.GLib.Unichar)'>
<summary>
Find the rightmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to <paramref name="len"/> bytes.
If <paramref name="len"/> is -1, allow unbounded search.
</summary>
<param name="p">
a nul-terminated UTF-8 encoded string
</param>
<param name="len">
the maximum length of this instance
</param>
<param name="c">
a Unicode character
</param>
<returns>
<c>null</c> if the string does not contain the character,
    otherwise, a pointer to the start of the rightmost occurrence
    of the character in the string.
</returns>
</member>

<member name='Utf8Extensions.Strrchr(System.String,System.Int32,GISharp.Lib.GLib.Unichar)'>
<summary>
Find the rightmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to <paramref name="len"/> bytes.
If <paramref name="len"/> is -1, allow unbounded search.
</summary>
<param name="p">
a nul-terminated UTF-8 encoded string
</param>
<param name="len">
the maximum length of this instance
</param>
<param name="c">
a Unicode character
</param>
<returns>
<c>null</c> if the string does not contain the character,
    otherwise, a pointer to the start of the rightmost occurrence
    of the character in the string.
</returns>
</member>

<member name='Utf8Extensions.Strreverse(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Reverses a UTF-8 string. this instance must be valid UTF-8 encoded text.
(Use g_utf8_validate() on all text before trying to use UTF-8
utility functions with it.)
</summary>
<remarks>
This function is intended for programmatic uses of reversed strings.
It pays no attention to decomposed characters, combining marks, byte
order marks, directional indicators (LRM, LRO, etc) and similar
characters which might need special handling when reversing a string
for display purposes.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
the maximum length of this instance to use, in bytes. If <paramref name="len"/> &lt; 0,
    then the string is nul-terminated.
</param>
<returns>
a newly-allocated string which is the reverse of this instance
</returns>
</member>

<member name='Utf8Extensions.Strreverse(System.String,System.Int32)'>
<summary>
Reverses a UTF-8 string. this instance must be valid UTF-8 encoded text.
(Use g_utf8_validate() on all text before trying to use UTF-8
utility functions with it.)
</summary>
<remarks>
This function is intended for programmatic uses of reversed strings.
It pays no attention to decomposed characters, combining marks, byte
order marks, directional indicators (LRM, LRO, etc) and similar
characters which might need special handling when reversing a string
for display purposes.
</remarks>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
the maximum length of this instance to use, in bytes. If <paramref name="len"/> &lt; 0,
    then the string is nul-terminated.
</param>
<returns>
a newly-allocated string which is the reverse of this instance
</returns>
</member>

<member name='Utf8Extensions.Strup(GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Converts all Unicode characters in the string that have a case
to uppercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string increasing. (For instance, the
German ess-zet will be changed to SS.)
</summary>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string, with all characters
   converted to uppercase.
</returns>
</member>

<member name='Utf8Extensions.Strup(System.String,System.Int32)'>
<summary>
Converts all Unicode characters in the string that have a case
to uppercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string increasing. (For instance, the
German ess-zet will be changed to SS.)
</summary>
<param name="str">
a UTF-8 encoded string
</param>
<param name="len">
length of this instance, in bytes, or -1 if this instance is nul-terminated.
</param>
<returns>
a newly allocated string, with all characters
   converted to uppercase.
</returns>
</member>

<member name='Utf8Extensions.Substring(GISharp.Lib.GLib.UnownedUtf8,System.Int64,System.Int64)'>
<summary>
Copies a substring out of a UTF-8 encoded string.
The substring will contain <paramref name="endPos"/> - <paramref name="startPos"/> characters.
</summary>
<param name="str">
a UTF-8 encoded string
</param>
<param name="startPos">
a character offset within <paramref name="str"/>
</param>
<param name="endPos">
another character offset within <paramref name="str"/>
</param>
<returns>
a newly allocated copy of the requested
    substring.
</returns>
</member>

<member name='Utf8Extensions'>
</member>

</declaration>
