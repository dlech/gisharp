<declaration>

<member name='UnmanagedStruct.CallbackData'>
</member>

<member name='UnmanagedStruct.CallbackFuncs'>
</member>

<member name='UnmanagedStruct.SourceFuncs'>
</member>

<member name='UnmanagedStruct.RefCount'>
</member>

<member name='UnmanagedStruct.Context'>
</member>

<member name='UnmanagedStruct.Priority'>
</member>

<member name='UnmanagedStruct.Flags'>
</member>

<member name='UnmanagedStruct.SourceId'>
</member>

<member name='UnmanagedStruct.PollFds'>
</member>

<member name='UnmanagedStruct.Prev'>
</member>

<member name='UnmanagedStruct.Next'>
</member>

<member name='UnmanagedStruct.Name'>
</member>

<member name='UnmanagedStruct.Priv'>
</member>

<member name='Source.Continue'>
<summary>
Use this macro as the return value of a <see cref="SourceFunc"/> to leave
the <see cref="Source"/> in the main loop.
</summary>
</member>

<member name='Source.Remove'>
<summary>
Use this macro as the return value of a <see cref="SourceFunc"/> to remove
the <see cref="Source"/> from the main loop.
</summary>
</member>

<member name='Source.CanRecurse'>
<summary>
Checks whether a source is allowed to be called recursively.
see <see cref="Source.SetCanRecurse(bool)"/>.
</summary>
</member>

<member name='Source.Context'>
<summary>
Gets the <see cref="MainContext"/> with which the source is associated.
</summary>
<remarks>
You can call this on a source that has been destroyed, provided
that the <see cref="MainContext"/> it was attached to still exists (in which
case it will return that <see cref="MainContext"/>). In particular, you can
always call this function on the source returned from
<see cref="Source.GetCurrent()"/>. But calling this function on a source
whose <see cref="MainContext"/> has been destroyed is an error.
</remarks>
</member>

<member name='Source.Id'>
<summary>
Returns the numeric ID for a particular source. The ID of a source
is a positive integer which is unique within a particular main loop
context. The reverse
mapping from ID to source is done by <see cref="MainContext.FindSourceById(uint)"/>.
</summary>
<remarks>
You can only call this function while the source is associated to a
<see cref="MainContext"/> instance; calling this function before <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/>
or after <see cref="Source.Destroy()"/> yields undefined behavior. The ID returned
is unique within the <see cref="MainContext"/> instance passed to <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/>.
</remarks>
</member>

<member name='Source.Name'>
<summary>
Gets a name for the source, used in debugging and profiling.  The
name may be #NULL if it has never been set with <see cref="Source.SetName(GISharp.Lib.GLib.UnownedUtf8)"/>.
</summary>
</member>

<member name='Source.Priority'>
<summary>
Gets the priority of a source.
</summary>
</member>

<member name='Source.ReadyTime'>
<summary>
Gets the "ready time" of this instance, as set by
<see cref="Source.SetReadyTime(long)"/>.
</summary>
<remarks>
Any time before the current monotonic time (including 0) is an
indication that the source will fire immediately.
</remarks>
</member>

<member name='Source.Time'>
<summary>
Gets the time to be used when checking this source. The advantage of
calling this function over calling g_get_monotonic_time() directly is
that when checking multiple sources, GLib can cache a single value
instead of having to repeatedly get the system monotonic time.
</summary>
<remarks>
The time here is the system monotonic time, if available, or some
other reasonable alternative otherwise.  See g_get_monotonic_time().
</remarks>
</member>

<member name='Source.IsDestroyed'>
<summary>
Returns whether this instance has been destroyed.
</summary>
<remarks>
This is important when you operate upon your objects
from within idle handlers, but may have freed the object
before the dispatch of your idle handler.

|[&lt;!-- language="C" --&gt;
static gboolean
idle_callback (gpointer data)
{
  SomeWidget *self = data;
   
  GDK_THREADS_ENTER ();
  // do stuff with self
  self-&gt;idle_id = 0;
  GDK_THREADS_LEAVE ();
   
  return G_SOURCE_REMOVE;
}
 
static void
some_widget_do_stuff_later (SomeWidget *self)
{
  self-&gt;idle_id = g_idle_add (idle_callback, self);
}
 
static void
some_widget_finalize (GObject *object)
{
  SomeWidget *self = SOME_WIDGET (object);
   
  if (self-&gt;idle_id)
    g_source_remove (self-&gt;idle_id);
   
  G_OBJECT_CLASS (parent_class)-&gt;finalize (object);
}
]|

This will fail in a multi-threaded application if the
widget is destroyed before the idle handler fires due
to the use after free in the callback. A solution, to
this particular problem, is to check to if the source
has already been destroy within the callback.

|[&lt;!-- language="C" --&gt;
static gboolean
idle_callback (gpointer data)
{
  SomeWidget *self = data;
  
  GDK_THREADS_ENTER ();
  if (!g_source_is_destroyed (g_main_current_source ()))
    {
      // do stuff with self
    }
  GDK_THREADS_LEAVE ();
  
  return FALSE;
}
]|

Calls to this function from a thread other than the one acquired by the
<see cref="MainContext"/> the <see cref="Source"/> is attached to are typically redundant, as the
source could be destroyed immediately after this function returns. However,
once a source is destroyed it cannot be un-destroyed, so this function can be
used for opportunistic checks from any thread.
</remarks>
</member>

<member name='Source.Current'>
<summary>
Returns the currently firing source for this thread.
</summary>
</member>

<member name='Source.Source(GISharp.Lib.GLib.SourceFuncs,uint)'>
<summary>
Creates a new <see cref="Source"/> structure. The size is specified to
allow creating structures derived from <see cref="Source"/> that contain
additional data. The size passed in must be at least
`sizeof (GSource)`.
</summary>
<remarks>
The source will not initially be associated with any <see cref="MainContext"/>
and must be added to one with <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/> before it will be
executed.
</remarks>
<param name="sourceFuncs">
structure containing functions that implement
               the sources behavior.
</param>
<param name="structSize">
size of the <see cref="Source"/> structure to create.
</param>
</member>

<member name='Source.RemoveById(uint)'>
<summary>
Removes the source with the given ID from the default main context. You must
use <see cref="Source.Destroy()"/> for sources added to a non-default main context.
</summary>
<remarks>
The ID of a <see cref="Source"/> is given by <see cref="Source.GetId()"/>, or will be
returned by the functions <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/>, g_idle_add(),
<see cref="Idle.Add(GISharp.Lib.GLib.SourceFunc,int)"/>, g_timeout_add(), <see cref="Timeout.Add(uint,GISharp.Lib.GLib.SourceFunc,int)"/>,
g_child_watch_add(), g_child_watch_add_full(), g_io_add_watch(), and
g_io_add_watch_full().

It is a programmer error to attempt to remove a non-existent source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
</remarks>
<param name="tag">
the ID of the source to remove.
</param>
<returns>
For historical reasons, this function always returns <c>true</c>
</returns>
</member>

<member name='Source.RemoveByFuncsUserData(GISharp.Lib.GLib.SourceFuncs,System.IntPtr)'>
<summary>
Removes a source from the default main loop context given the
source functions and user data. If multiple sources exist with the
same source functions and user data, only one will be destroyed.
</summary>
<param name="funcs">
The <c>sourceFuncs</c> passed to <see cref="Source.Source(GISharp.Lib.GLib.SourceFuncs,uint)"/>
</param>
<param name="userData">
the user data for the callback
</param>
<returns>
<c>true</c> if a source was found and removed.
</returns>
</member>

<member name='Source.RemoveByUserData(System.IntPtr)'>
<summary>
Removes a source from the default main loop context given the user
data for the callback. If multiple sources exist with the same user
data, only one will be destroyed.
</summary>
<param name="userData">
the user_data for the callback.
</param>
<returns>
<c>true</c> if a source was found and removed.
</returns>
</member>

<member name='Source.SetNameById(uint,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Sets the name of a source using its ID.
</summary>
<remarks>
This is a convenience utility to set source names from the return
value of g_idle_add(), g_timeout_add(), etc.

It is a programmer error to attempt to set the name of a non-existent
source.

More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
</remarks>
<param name="tag">
a <see cref="Source"/> ID
</param>
<param name="name">
debug name for the source
</param>
</member>

<member name='Source.AddChildSource(GISharp.Lib.GLib.Source)'>
<summary>
Adds <paramref name="childSource"/> to this instance as a "polled" source; when this instance is
added to a <see cref="MainContext"/>, <paramref name="childSource"/> will be automatically added
with the same priority, when <paramref name="childSource"/> is triggered, it will
cause this instance to dispatch (in addition to calling its own
callback), and when this instance is destroyed, it will destroy
<paramref name="childSource"/> as well. (this instance will also still be dispatched if
its own prepare/check functions indicate that it is ready.)
</summary>
<remarks>
If you don't need <paramref name="childSource"/> to do anything on its own when it
triggers, you can call g_source_set_dummy_callback() on it to set a
callback that does nothing (except return <c>true</c> if appropriate).

this instance will hold a reference on <paramref name="childSource"/> while <paramref name="childSource"/>
is attached to it.

This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.
</remarks>
<param name="childSource">
a second <see cref="Source"/> that this instance should "poll"
</param>
</member>

<member name='Source.AddPoll(GISharp.Lib.GLib.PollFD)'>
<summary>
Adds a file descriptor to the set of file descriptors polled for
this source. This is usually combined with <see cref="Source.Source(GISharp.Lib.GLib.SourceFuncs,uint)"/> to add an
event source. The event source's check function will typically test
the <c>revents</c> field in the <see cref="PollFD"/> struct and return <c>true</c> if events need
to be processed.
</summary>
<remarks>
This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.

Using this API forces the linear scanning of event sources on each
main loop iteration.  Newly-written event sources should try to use
<see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/> instead of this API.
</remarks>
<param name="fd">
a <see cref="PollFD"/> structure holding information about a file
     descriptor to watch.
</param>
</member>

<member name='Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)'>
<summary>
Monitors <paramref name="fd"/> for the IO events in <paramref name="events"/>.
</summary>
<remarks>
The tag returned by this function can be used to remove or modify the
monitoring of the fd using <see cref="Source.RemoveUnixFd(System.IntPtr)"/> or
<see cref="Source.ModifyUnixFd(System.IntPtr,GISharp.Lib.GLib.IOCondition)"/>.

It is not necessary to remove the fd before destroying the source; it
will be cleaned up automatically.

This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.

As the name suggests, this function is not available on Windows.
</remarks>
<param name="fd">
the fd to monitor
</param>
<param name="events">
an event mask
</param>
<returns>
an opaque tag
</returns>
</member>

<member name='Source.Attach(GISharp.Lib.GLib.MainContext?)'>
<summary>
Adds a <see cref="Source"/> to a <paramref name="context"/> so that it will be executed within
that context. Remove it by calling <see cref="Source.Destroy()"/>.
</summary>
<remarks>
This function is safe to call from any thread, regardless of which thread
the <paramref name="context"/> is running in.
</remarks>
<param name="context">
a <see cref="MainContext"/> (if <c>null</c>, the default context will be used)
</param>
<returns>
the ID (greater than 0) for the source within the
  <see cref="MainContext"/>.
</returns>
</member>

<member name='Source.Destroy()'>
<summary>
Removes a source from its <see cref="MainContext"/>, if any, and mark it as
destroyed.  The source cannot be subsequently added to another
context. It is safe to call this on sources which have already been
removed from their context.
</summary>
<remarks>
This does not unref the <see cref="Source"/>: if you still hold a reference, use
<see cref="Source.Unref()"/> to drop it.

This function is safe to call from any thread, regardless of which thread
the <see cref="MainContext"/> is running in.
</remarks>
</member>

<member name='Source.GetCurrentTime(GISharp.Lib.GLib.TimeVal)'>
<summary>
This function ignores this instance and is otherwise the same as
g_get_current_time().
</summary>
<param name="timeval">
<see cref="TimeVal"/> structure in which to store current time.
</param>
</member>

<member name='Source.ModifyUnixFd(System.IntPtr,GISharp.Lib.GLib.IOCondition)'>
<summary>
Updates the event mask to watch for the fd identified by <paramref name="tag"/>.
</summary>
<remarks>
<paramref name="tag"/> is the tag returned from <see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/>.

If you want to remove a fd, don't set its event mask to zero.
Instead, call <see cref="Source.RemoveUnixFd(System.IntPtr)"/>.

This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.

As the name suggests, this function is not available on Windows.
</remarks>
<param name="tag">
the tag from <see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/>
</param>
<param name="newEvents">
the new event mask to watch
</param>
</member>

<member name='Source.QueryUnixFd(System.IntPtr)'>
<summary>
Queries the events reported for the fd corresponding to <paramref name="tag"/> on
this instance during the last poll.
</summary>
<remarks>
The return value of this function is only defined when the function
is called from the check or dispatch functions for this instance.

This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.

As the name suggests, this function is not available on Windows.
</remarks>
<param name="tag">
the tag from <see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/>
</param>
<returns>
the conditions reported on the fd
</returns>
</member>

<member name='Source.RemoveChildSource(GISharp.Lib.GLib.Source)'>
<summary>
Detaches <paramref name="childSource"/> from this instance and destroys it.
</summary>
<remarks>
This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.
</remarks>
<param name="childSource">
a <see cref="Source"/> previously passed to
    <see cref="Source.AddChildSource(GISharp.Lib.GLib.Source)"/>.
</param>
</member>

<member name='Source.RemovePoll(GISharp.Lib.GLib.PollFD)'>
<summary>
Removes a file descriptor from the set of file descriptors polled for
this source.
</summary>
<remarks>
This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.
</remarks>
<param name="fd">
a <see cref="PollFD"/> structure previously passed to <see cref="Source.AddPoll(GISharp.Lib.GLib.PollFD)"/>.
</param>
</member>

<member name='Source.RemoveUnixFd(System.IntPtr)'>
<summary>
Reverses the effect of a previous call to <see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/>.
</summary>
<remarks>
You only need to call this if you want to remove an fd from being
watched while keeping the same source around.  In the normal case you
will just want to destroy the source.

This API is only intended to be used by implementations of <see cref="Source"/>.
Do not call this API on a <see cref="Source"/> that you did not create.

As the name suggests, this function is not available on Windows.
</remarks>
<param name="tag">
the tag from <see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/>
</param>
</member>

<member name='Source.SetCallback(GISharp.Lib.GLib.SourceFunc)'>
<summary>
Sets the callback function for a source. The callback for a source is
called from the source's dispatch function.
</summary>
<remarks>
The exact type of <paramref name="func"/> depends on the type of source; ie. you
should not count on <paramref name="func"/> being called with <paramref name="data"/> as its first
parameter. Cast <paramref name="func"/> with G_SOURCE_FUNC() to avoid warnings about
incompatible function types.

See [memory management of sources][mainloop-memory-management] for details
on how to handle memory management of <paramref name="data"/>.

Typically, you won't use this function. Instead use functions specific
to the type of source you are using, such as g_idle_add() or g_timeout_add().

It is safe to call this function multiple times on a source which has already
been attached to a context. The changes will take effect for the next time
the source is dispatched after this call returns.
</remarks>
<param name="func">
a callback function
</param>
</member>

<member name='Source.SetCallbackIndirect(System.IntPtr,GISharp.Lib.GLib.SourceCallbackFuncs)'>
<summary>
Sets the callback function storing the data as a refcounted callback
"object". This is used internally. Note that calling
<see cref="Source.SetCallbackIndirect(System.IntPtr,GISharp.Lib.GLib.SourceCallbackFuncs)"/> assumes
an initial reference count on <paramref name="callbackData"/>, and thus
<paramref name="callbackFuncs"/>-&gt;unref will eventually be called once more
than <paramref name="callbackFuncs"/>-&gt;ref.
</summary>
<remarks>
It is safe to call this function multiple times on a source which has already
been attached to a context. The changes will take effect for the next time
the source is dispatched after this call returns.
</remarks>
<param name="callbackData">
pointer to callback data "object"
</param>
<param name="callbackFuncs">
functions for reference counting <paramref name="callbackData"/>
                 and getting the callback and data
</param>
</member>

<member name='Source.SetFuncs(GISharp.Lib.GLib.SourceFuncs)'>
<summary>
Sets the source functions (can be used to override
default implementations) of an unattached source.
</summary>
<param name="funcs">
the new <see cref="SourceFuncs"/>
</param>
</member>

<member name='Source'>
<summary>
The `GSource` struct is an opaque data type
representing an event source.
</summary>
</member>

</declaration>
