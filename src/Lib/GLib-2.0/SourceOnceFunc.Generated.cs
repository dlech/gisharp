// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <summary>
    /// A source function that is only called once before being removed from the main
    /// context automatically.
    /// </summary>
    /// <remarks>
    /// <para>
    /// See: g_idle_add_once(), g_timeout_add_once()
    /// </para>
    /// </remarks>
    [GISharp.Runtime.SinceAttribute("2.74")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedSourceOnceFunc(
    /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 closure:0 direction:in */
    System.IntPtr userData);

    /// <include file="SourceOnceFunc.xmldoc" path="declaration/member[@name='SourceOnceFunc']/*" />
    [GISharp.Runtime.SinceAttribute("2.74")]
    public delegate void SourceOnceFunc();

    /// <summary>
    /// Class for marshalling <see cref="SourceOnceFunc"/> methods.
    /// </summary>
    public static unsafe class SourceOnceFuncMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="SourceOnceFunc"/>.
        /// </summary>
        public static GISharp.Lib.GLib.SourceOnceFunc FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, void> callback_, System.IntPtr userData_)
        {
            void managedCallback()
            {
                callback_(userData_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            return managedCallback;
        }

        /// <summary>
        /// For runtime use only.
        /// </summary>
        [System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(System.Runtime.CompilerServices.CallConvCdecl) })]
        public static void Callback(System.IntPtr userData_)
        {
            try
            {
                var userDataHandle = (System.Runtime.InteropServices.GCHandle)userData_;
                var (userData, userDataScope) = ((SourceOnceFunc, GISharp.Runtime.CallbackScope))userDataHandle.Target!;
                userData.Invoke();
                if (userDataScope == GISharp.Runtime.CallbackScope.Async)
                {
                    userDataHandle.Free();
                }
            }
            catch (System.Exception ex)
            {
                GISharp.Runtime.GMarshal.PushUnhandledException(ex);
            }
        }
    }
}