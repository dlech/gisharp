// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <summary>
    /// Specifies the type of a function used to test two values for
    /// equality. The function should return %TRUE if both values are equal
    /// and %FALSE otherwise.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This is a version of #GEqualFunc which provides a @user_data closure from
    /// the caller.
    /// </para>
    /// </remarks>
    [GISharp.Runtime.SinceAttribute("2.74")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="gboolean" type="gboolean" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate GISharp.Runtime.Boolean UnmanagedEqualFuncFull(
    /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr a,
    /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr b,
    /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 closure:2 direction:in */
    System.IntPtr userData);

    /// <include file="EqualFuncFull.xmldoc" path="declaration/member[@name='EqualFuncFull']/*" />
    [GISharp.Runtime.SinceAttribute("2.74")]
    public delegate bool EqualFuncFull(System.IntPtr a, System.IntPtr b);

    /// <summary>
    /// Class for marshalling <see cref="EqualFuncFull"/> methods.
    /// </summary>
    public static unsafe class EqualFuncFullMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="EqualFuncFull"/>.
        /// </summary>
        public static GISharp.Lib.GLib.EqualFuncFull FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, GISharp.Runtime.Boolean> callback_, System.IntPtr userData_)
        {
            bool managedCallback(System.IntPtr a, System.IntPtr b)
            {
                var a_ = (System.IntPtr)a;
                var b_ = (System.IntPtr)b;
                var ret_ = callback_(a_,b_,userData_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
                return ret;
            }

            return managedCallback;
        }

        /// <summary>
        /// For runtime use only.
        /// </summary>
        [System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(System.Runtime.CompilerServices.CallConvCdecl) })]
        public static GISharp.Runtime.Boolean Callback(System.IntPtr a_, System.IntPtr b_, System.IntPtr userData_)
        {
            try
            {
                var a = (System.IntPtr)a_;
                var b = (System.IntPtr)b_;
                var userDataHandle = (System.Runtime.InteropServices.GCHandle)userData_;
                var (userData, userDataScope) = ((EqualFuncFull, GISharp.Runtime.CallbackScope))userDataHandle.Target!;
                var ret = userData.Invoke(a, b);
                if (userDataScope == GISharp.Runtime.CallbackScope.Async)
                {
                    userDataHandle.Free();
                }

                var ret_ = GISharp.Runtime.BooleanExtensions.ToBoolean(ret);
                return ret_;
            }
            catch (System.Exception ex)
            {
                GISharp.Runtime.GMarshal.PushUnhandledException(ex);
            }

            return default(GISharp.Runtime.Boolean);
        }
    }
}