<declaration>

<member name='Timeout.Add(uint,GISharp.Lib.GLib.SourceFunc,int)'>
<summary>
Sets a function to be called at regular intervals, with the given
priority.  The function is called repeatedly until it returns
<c>false</c>, at which point the timeout is automatically destroyed and
the function will not be called again. The first call to the
function will be at the end of the first <paramref name="interval"/>.
</summary>
<remarks>
<para>
Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given interval
(it does not try to 'catch up' time lost in delays).
</para>
<para>
This internally creates a main loop source using <see cref="TimeoutSource.New(uint)"/>
and attaches it to the global <see cref="MainContext"/> using <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/>, so
the callback will be invoked in whichever thread is running that main
context. You can do these steps manually if you need greater control or to
use a custom main context.
</para>
<para>
The interval given in terms of monotonic time, not wall clock time.
</para>
</remarks>
<param name="interval">
the time between calls to the function, in milliseconds
            (1/1000ths of a second)
</param>
<param name="function">
function to call
</param>
<param name="priority">
the priority of the timeout source. Typically this will be in
           the range between <see cref="Priority.Default"/> and <see cref="Priority.High"/>.
</param>
<returns>
the ID (greater than 0) of the event source.
</returns>
</member>

<member name='Timeout.AddSeconds(uint,GISharp.Lib.GLib.SourceFunc,int)'>
<summary>
Sets a function to be called at regular intervals, with <paramref name="priority"/>.
The function is called repeatedly until it returns <c>false</c>, at which
point the timeout is automatically destroyed and the function will
not be called again.
</summary>
<remarks>
<para>
Unlike <see cref="Add"/>, this function operates at whole second granularity.
The initial starting point of the timer is determined by the implementation
and the implementation is expected to group multiple timers together so that
they fire all at the same time.
To allow this grouping, the <paramref name="interval"/> to the first timer is rounded
and can deviate up to one second from the specified interval.
Subsequent timer iterations will generally run at the specified interval.
</para>
<para>
Note that timeout functions may be delayed, due to the processing of other
event sources. Thus they should not be relied on for precise timing.
After each call to the timeout function, the time of the next
timeout is recalculated based on the current time and the given <paramref name="interval"/>
</para>
<para>
If you want timing more precise than whole seconds, use <see cref="Add"/>
instead.
</para>
<para>
The grouping of timers to fire at the same time results in a more power
and CPU efficient behavior so if your timer is in multiples of seconds
and you don't require the first timer exactly one second from now, the
use of <see cref="AddSeconds"/> is preferred over <see cref="Add"/>.
</para>
<para>
This internally creates a main loop source using
<see cref="TimeoutSource.NewSeconds(uint)"/> and attaches it to the main loop context
using <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/>. You can do these steps manually if you need
greater control.
</para>
<para>
It is safe to call this function from any thread.
</para>
<para>
The interval given is in terms of monotonic time, not wall clock
time.
</para>
</remarks>
<param name="interval">
the time between calls to the function, in seconds
</param>
<param name="function">
function to call
</param>
<param name="priority">
the priority of the timeout source. Typically this will be in
           the range between <see cref="Priority.Default"/> and <see cref="Priority.High"/>.
</param>
<returns>
the ID (greater than 0) of the event source.
</returns>
</member>

<member name='Timeout'>
</member>

</declaration>
