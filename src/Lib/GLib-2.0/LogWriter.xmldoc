<declaration>

<member name='LogWriter.DefaultSetUseStderr(bool)'>
<summary>
Configure whether the built-in log functions will output all log messages to `stderr`.
</summary>
<remarks>
<para>
By default, log messages of levels <see cref="LogLevelFlags.Info"/> and
<see cref="LogLevelFlags.Debug"/> are sent to `stdout`, and other log messages are
sent to `stderr`. This is problematic for applications that intend
to reserve `stdout` for structured output such as JSON or XML.
</para>
<para>
This function sets global state. It is not thread-aware, and should be
called at the very start of a program, before creating any other threads
or creating objects that could create worker threads of their own.
</para>
</remarks>
<param name="useStderr">
If <c>true</c>, use `stderr` for log messages that would
 normally have appeared on `stdout`
</param>
</member>

<member name='LogWriter.DefaultWouldDrop(GISharp.Lib.GLib.LogLevelFlags,GISharp.Runtime.NullableUnownedUtf8)'>
<summary>
Check whether <see cref="LogWriter.Default"/> and <see cref="Log.DefaultHandler"/> would
ignore a message with the given domain and level.
</summary>
<remarks>
<para>
As with <see cref="Log.DefaultHandler"/>, this function drops debug and informational
messages unless their log domain (or `all`) is listed in the space-separated
`G_MESSAGES_DEBUG` environment variable.
</para>
<para>
This can be used when implementing log writers with the same filtering
behaviour as the default, but a different destination or output format:
</para>
<para>
|[&lt;!-- language="C" --&gt;
  if (g_log_writer_default_would_drop (log_level, log_domain))
    return G_LOG_WRITER_HANDLED;
]|
</para>
<para>
or to skip an expensive computation if it is only needed for a debugging
message, and `G_MESSAGES_DEBUG` is not set:
</para>
<para>
|[&lt;!-- language="C" --&gt;
  if (!g_log_writer_default_would_drop (G_LOG_LEVEL_DEBUG, G_LOG_DOMAIN))
    {
      gchar *result = expensive_computation (my_object);
</para>
<para>
      g_debug ("my_object result: %s", result);
      g_free (result);
    }
]|
</para>
</remarks>
<param name="logLevel">
log level, either from <see cref="LogLevelFlags"/>, or a user-defined
   level
</param>
<param name="logDomain">
log domain
</param>
<returns>
<c>true</c> if the log message would be dropped by GLib's
 default log handlers
</returns>
</member>

<member name='LogWriter.FormatFields(GISharp.Lib.GLib.LogLevelFlags,System.ReadOnlySpan&lt;GISharp.Lib.GLib.LogField&gt;,bool)'>
<summary>
Format a structured log message as a string suitable for outputting to the
terminal (or elsewhere). This will include the values of all fields it knows
how to interpret, which includes `MESSAGE` and `GLIB_DOMAIN` (see the
documentation for g_log_structured()). It does not include values from
unknown fields.
</summary>
<remarks>
<para>
The returned string does **not** have a trailing new-line character. It is
encoded in the character set of the current locale, which is not necessarily
UTF-8.
</para>
</remarks>
<param name="logLevel">
log level, either from <see cref="LogLevelFlags"/>, or a user-defined
   level
</param>
<param name="fields">
keyâ€“value pairs of structured data forming
   the log message
</param>
<param name="useColor">
<c>true</c> to use ANSI color escape sequences when formatting the
   message, <c>false</c> to not
</param>
<returns>
string containing the formatted log message, in
   the character set of the current locale
</returns>
</member>

<member name='LogWriter.IsJournald(int)'>
<summary>
Check whether the given <paramref name="outputFd"/> file descriptor is a connection to the
systemd journal, or something else (like a log file or `stdout` or
`stderr`).
</summary>
<remarks>
<para>
Invalid file descriptors are accepted and return <c>false</c>, which allows for
the following construct without needing any additional error handling:
|[&lt;!-- language="C" --&gt;
  is_journald = g_log_writer_is_journald (fileno (stderr));
]|
</para>
</remarks>
<param name="outputFd">
output file descriptor to check
</param>
<returns>
<c>true</c> if <paramref name="outputFd"/> points to the journal, <c>false</c> otherwise
</returns>
</member>

<member name='LogWriter.SupportsColor(int)'>
<summary>
Check whether the given <paramref name="outputFd"/> file descriptor supports ANSI color
escape sequences. If so, they can safely be used when formatting log
messages.
</summary>
<param name="outputFd">
output file descriptor to check
</param>
<returns>
<c>true</c> if ANSI color escapes are supported, <c>false</c> otherwise
</returns>
</member>

<member name='LogWriter'>
</member>

</declaration>
