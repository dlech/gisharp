// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <include file="HashTable.xmldoc" path="declaration/member[@name='HashTable']/*" />
    [GISharp.Runtime.GTypeAttribute("GHashTable", IsProxyForUnmanagedType = true)]
    public abstract unsafe partial class HashTable : GISharp.Runtime.Boxed
    {
        private static readonly GISharp.Runtime.GType _GType = g_hash_table_get_type();

        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public struct UnmanagedStruct
        {
        }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public HashTable(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle)
        {
            if (ownership == GISharp.Runtime.Transfer.None)
            {
                this.handle = (System.IntPtr)g_hash_table_ref((UnmanagedStruct*)handle);
            }
        }

        /// <summary>
        /// This is a convenience function for using a #GHashTable as a set.  It
        /// is equivalent to calling g_hash_table_replace() with @key as both the
        /// key and the value.
        /// </summary>
        /// <remarks>
        /// <para>
        /// In particular, this means that if @key already exists in the hash table, then
        /// the old copy of @key in the hash table is freed and @key replaces it in the
        /// table.
        /// </para>
        /// <para>
        /// When a hash table only ever contains keys that have themselves as the
        /// corresponding value it is able to be stored more efficiently.  See
        /// the discussion in the section description.
        /// </para>
        /// <para>
        /// Starting from GLib 2.40, this function returns a boolean value to
        /// indicate whether the newly added value was already in the hash table
        /// or not.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// a key to insert
        /// </param>
        /// <returns>
        /// %TRUE if the key did not exist yet
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.32")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_add(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 allow-none:1 direction:in */
        System.IntPtr key);

        /// <summary>
        /// Checks if @key is in @hash_table.
        /// </summary>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// a key to check
        /// </param>
        /// <returns>
        /// %TRUE if @key is in @hash_table, %FALSE otherwise.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.32")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_contains(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr key);

        /// <summary>
        /// Destroys all keys and values in the #GHashTable and decrements its
        /// reference count by 1. If keys and/or values are dynamically allocated,
        /// you should either free them first or create the #GHashTable with destroy
        /// notifiers using g_hash_table_new_full(). In the latter case the destroy
        /// functions you supplied will be called on all keys and values during the
        /// destruction phase.
        /// </summary>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_hash_table_destroy(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Calls the given function for key/value pairs in the #GHashTable
        /// until @predicate returns %TRUE. The function is passed the key
        /// and value of each pair, and the given @user_data parameter. The
        /// hash table may not be modified while iterating over it (you can't
        /// add/remove items).
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note, that hash tables are really only optimized for forward
        /// lookups, i.e. g_hash_table_lookup(). So code that frequently issues
        /// g_hash_table_find() or g_hash_table_foreach() (e.g. in the order of
        /// once per every entry in a hash table) should probably be reworked
        /// to use additional or different data structures for reverse lookups
        /// (keep in mind that an O(n) find/foreach operation issued for all n
        /// values in a hash table ends up needing O(n*n) operations).
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="predicate">
        /// function to test the key/value pairs for a certain property
        /// </param>
        /// <param name="userData">
        /// user data to pass to the function
        /// </param>
        /// <returns>
        /// The value of the first key/value pair is returned,
        ///     for which @predicate evaluates to %TRUE. If no pair with the
        ///     requested property is found, %NULL is returned.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_hash_table_find(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="HRFunc" type="GHRFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, GISharp.Runtime.Boolean> predicate,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Calls the given function for each of the key/value pairs in the
        /// #GHashTable.  The function is passed the key and value of each
        /// pair, and the given @user_data parameter.  The hash table may not
        /// be modified while iterating over it (you can't add/remove
        /// items). To remove all items matching a predicate, use
        /// g_hash_table_foreach_remove().
        /// </summary>
        /// <remarks>
        /// <para>
        /// The order in which g_hash_table_foreach() iterates over the keys/values in
        /// the hash table is not defined.
        /// </para>
        /// <para>
        /// See g_hash_table_find() for performance caveats for linear
        /// order searches in contrast to g_hash_table_lookup().
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="func">
        /// the function to call for each key/value pair
        /// </param>
        /// <param name="userData">
        /// user data to pass to the function
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_hash_table_foreach(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="HFunc" type="GHFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, void> func,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Calls the given function for each key/value pair in the
        /// #GHashTable. If the function returns %TRUE, then the key/value
        /// pair is removed from the #GHashTable. If you supplied key or
        /// value destroy functions when creating the #GHashTable, they are
        /// used to free the memory allocated for the removed keys and values.
        /// </summary>
        /// <remarks>
        /// <para>
        /// See #GHashTableIter for an alternative way to loop over the
        /// key/value pairs in the hash table.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="func">
        /// the function to call for each key/value pair
        /// </param>
        /// <param name="userData">
        /// user data to pass to the function
        /// </param>
        /// <returns>
        /// the number of key/value pairs removed
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_hash_table_foreach_remove(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="HRFunc" type="GHRFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, GISharp.Runtime.Boolean> func,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Calls the given function for each key/value pair in the
        /// #GHashTable. If the function returns %TRUE, then the key/value
        /// pair is removed from the #GHashTable, but no key or value
        /// destroy functions are called.
        /// </summary>
        /// <remarks>
        /// <para>
        /// See #GHashTableIter for an alternative way to loop over the
        /// key/value pairs in the hash table.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="func">
        /// the function to call for each key/value pair
        /// </param>
        /// <param name="userData">
        /// user data to pass to the function
        /// </param>
        /// <returns>
        /// the number of key/value pairs removed.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_hash_table_foreach_steal(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="HRFunc" type="GHRFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, GISharp.Runtime.Boolean> func,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Retrieves every key inside @hash_table. The returned data is valid
        /// until changes to the hash release those keys.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This iterates over every entry in the hash table to build its return value.
        /// To iterate over the entries in a #GHashTable more efficiently, use a
        /// #GHashTableIter.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <returns>
        /// a #GList containing all the keys
        ///     inside the hash table. The content of the list is owned by the
        ///     hash table and should not be modified or freed. Use g_list_free()
        ///     when done using the list.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.14")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:container direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_hash_table_get_keys(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Retrieves every key inside @hash_table, as an array.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The returned array is %NULL-terminated but may contain %NULL as a
        /// key.  Use @length to determine the true length if it's possible that
        /// %NULL was used as the value for a key.
        /// </para>
        /// <para>
        /// Note: in the common case of a string-keyed #GHashTable, the return
        /// value of this function can be conveniently cast to (const gchar **).
        /// </para>
        /// <para>
        /// This iterates over every entry in the hash table to build its return value.
        /// To iterate over the entries in a #GHashTable more efficiently, use a
        /// #GHashTableIter.
        /// </para>
        /// <para>
        /// You should always free the return result with g_free().  In the
        /// above-mentioned case of a string-keyed hash table, it may be
        /// appropriate to use g_strfreev() if you call g_hash_table_steal_all()
        /// first to transfer ownership of the keys.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="length">
        /// the length of the returned array
        /// </param>
        /// <returns>
        /// a
        ///   %NULL-terminated array containing each key from the table.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.40")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array length="1" zero-terminated="0" type="gpointer*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </array> */
        /* transfer-ownership:container direction:in */
        private static extern System.IntPtr* g_hash_table_get_keys_as_array(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="guint" type="guint*" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full */
        uint* length);

        /// <summary>
        /// Retrieves every value inside @hash_table. The returned data
        /// is valid until @hash_table is modified.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This iterates over every entry in the hash table to build its return value.
        /// To iterate over the entries in a #GHashTable more efficiently, use a
        /// #GHashTableIter.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <returns>
        /// a #GList containing all the values
        ///     inside the hash table. The content of the list is owned by the
        ///     hash table and should not be modified or freed. Use g_list_free()
        ///     when done using the list.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.14")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:container direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_hash_table_get_values(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Inserts a new key and value into a #GHashTable.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If the key already exists in the #GHashTable its current
        /// value is replaced with the new value. If you supplied a
        /// @value_destroy_func when creating the #GHashTable, the old
        /// value is freed using that function. If you supplied a
        /// @key_destroy_func when creating the #GHashTable, the passed
        /// key is freed using that function.
        /// </para>
        /// <para>
        /// Starting from GLib 2.40, this function returns a boolean value to
        /// indicate whether the newly added value was already in the hash table
        /// or not.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// a key to insert
        /// </param>
        /// <param name="value">
        /// the value to associate with the key
        /// </param>
        /// <returns>
        /// %TRUE if the key did not exist yet
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_insert(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr key,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr value);

        /// <summary>
        /// Looks up a key in a #GHashTable. Note that this function cannot
        /// distinguish between a key that is not present and one which is present
        /// and has the value %NULL. If you need this distinction, use
        /// g_hash_table_lookup_extended().
        /// </summary>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// the key to look up
        /// </param>
        /// <returns>
        /// the associated value, or %NULL if the key is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_hash_table_lookup(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr key);

        /// <summary>
        /// Looks up a key in the #GHashTable, returning the original key and the
        /// associated value and a #gboolean which is %TRUE if the key was found. This
        /// is useful if you need to free the memory allocated for the original key,
        /// for example before calling g_hash_table_remove().
        /// </summary>
        /// <remarks>
        /// <para>
        /// You can actually pass %NULL for @lookup_key to test
        /// whether the %NULL key exists, provided the hash and equal functions
        /// of @hash_table are %NULL-safe.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="lookupKey">
        /// the key to look up
        /// </param>
        /// <param name="origKey">
        /// return location for the original key
        /// </param>
        /// <param name="value">
        /// return location for the value associated
        /// with the key
        /// </param>
        /// <returns>
        /// %TRUE if the key was found in the #GHashTable
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_lookup_extended(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr lookupKey,
        /* <type name="gpointer" type="gpointer*" is-pointer="1" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full nullable:1 optional:1 allow-none:1 */
        System.IntPtr* origKey,
        /* <type name="gpointer" type="gpointer*" is-pointer="1" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full nullable:1 optional:1 allow-none:1 */
        System.IntPtr* value);

        /// <summary>
        /// Creates a new #GHashTable with a reference count of 1.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Hash values returned by @hash_func are used to determine where keys
        /// are stored within the #GHashTable data structure. The g_direct_hash(),
        /// g_int_hash(), g_int64_hash(), g_double_hash() and g_str_hash()
        /// functions are provided for some common types of keys.
        /// If @hash_func is %NULL, g_direct_hash() is used.
        /// </para>
        /// <para>
        /// @key_equal_func is used when looking up keys in the #GHashTable.
        /// The g_direct_equal(), g_int_equal(), g_int64_equal(), g_double_equal()
        /// and g_str_equal() functions are provided for the most common types
        /// of keys. If @key_equal_func is %NULL, keys are compared directly in
        /// a similar fashion to g_direct_equal(), but without the overhead of
        /// a function call. @key_equal_func is called with the key from the hash table
        /// as its first parameter, and the user-provided key to check against as
        /// its second.
        /// </para>
        /// </remarks>
        /// <param name="hashFunc">
        /// a function to create a hash value from a key
        /// </param>
        /// <param name="keyEqualFunc">
        /// a function to check two keys for equality
        /// </param>
        /// <returns>
        /// a new #GHashTable
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.HashTable.UnmanagedStruct* g_hash_table_new(
        /* <type name="HashFunc" type="GHashFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, uint> hashFunc,
        /* <type name="EqualFunc" type="GEqualFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, GISharp.Runtime.Boolean> keyEqualFunc);

        /// <summary>
        /// Creates a new #GHashTable like g_hash_table_new() with a reference
        /// count of 1 and allows to specify functions to free the memory
        /// allocated for the key and value that get called when removing the
        /// entry from the #GHashTable.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Since version 2.42 it is permissible for destroy notify functions to
        /// recursively remove further items from the hash table. This is only
        /// permissible if the application still holds a reference to the hash table.
        /// This means that you may need to ensure that the hash table is empty by
        /// calling g_hash_table_remove_all() before releasing the last reference using
        /// g_hash_table_unref().
        /// </para>
        /// </remarks>
        /// <param name="hashFunc">
        /// a function to create a hash value from a key
        /// </param>
        /// <param name="keyEqualFunc">
        /// a function to check two keys for equality
        /// </param>
        /// <param name="keyDestroyFunc">
        /// a function to free the memory allocated for the key
        ///     used when removing the entry from the #GHashTable, or %NULL
        ///     if you don't want to supply such a function.
        /// </param>
        /// <param name="valueDestroyFunc">
        /// a function to free the memory allocated for the
        ///     value used when removing the entry from the #GHashTable, or %NULL
        ///     if you don't want to supply such a function.
        /// </param>
        /// <returns>
        /// a new #GHashTable
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.HashTable.UnmanagedStruct* g_hash_table_new_full(
        /* <type name="HashFunc" type="GHashFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, uint> hashFunc,
        /* <type name="EqualFunc" type="GEqualFunc" /> */
        /* transfer-ownership:none scope:notified destroy:3 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, GISharp.Runtime.Boolean> keyEqualFunc,
        /* <type name="DestroyNotify" type="GDestroyNotify" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 scope:async direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, void> keyDestroyFunc,
        /* <type name="DestroyNotify" type="GDestroyNotify" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 scope:async direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, void> valueDestroyFunc);

        /// <summary>
        /// Removes a key and its associated value from a #GHashTable.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If the #GHashTable was created using g_hash_table_new_full(), the
        /// key and value are freed using the supplied destroy functions, otherwise
        /// you have to make sure that any dynamically allocated values are freed
        /// yourself.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// the key to remove
        /// </param>
        /// <returns>
        /// %TRUE if the key was found and removed from the #GHashTable
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_remove(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr key);

        /// <summary>
        /// Removes all keys and their associated values from a #GHashTable.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If the #GHashTable was created using g_hash_table_new_full(),
        /// the keys and values are freed using the supplied destroy functions,
        /// otherwise you have to make sure that any dynamically allocated
        /// values are freed yourself.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.12")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_hash_table_remove_all(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Inserts a new key and value into a #GHashTable similar to
        /// g_hash_table_insert(). The difference is that if the key
        /// already exists in the #GHashTable, it gets replaced by the
        /// new key. If you supplied a @value_destroy_func when creating
        /// the #GHashTable, the old value is freed using that function.
        /// If you supplied a @key_destroy_func when creating the
        /// #GHashTable, the old key is freed using that function.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Starting from GLib 2.40, this function returns a boolean value to
        /// indicate whether the newly added value was already in the hash table
        /// or not.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// a key to insert
        /// </param>
        /// <param name="value">
        /// the value to associate with the key
        /// </param>
        /// <returns>
        /// %TRUE if the key did not exist yet
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_replace(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr key,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr value);

        /// <summary>
        /// Returns the number of elements contained in the #GHashTable.
        /// </summary>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <returns>
        /// the number of key/value pairs in the #GHashTable.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_hash_table_size(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Removes a key and its associated value from a #GHashTable without
        /// calling the key and value destroy functions.
        /// </summary>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="key">
        /// the key to remove
        /// </param>
        /// <returns>
        /// %TRUE if the key was found and removed from the #GHashTable
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_steal(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr key);

        /// <summary>
        /// Removes all keys and their associated values from a #GHashTable
        /// without calling the key and value destroy functions.
        /// </summary>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.12")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_hash_table_steal_all(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Looks up a key in the #GHashTable, stealing the original key and the
        /// associated value and returning %TRUE if the key was found. If the key was
        /// not found, %FALSE is returned.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If found, the stolen key and value are removed from the hash table without
        /// calling the key and value destroy functions, and ownership is transferred to
        /// the caller of this method; as with g_hash_table_steal().
        /// </para>
        /// <para>
        /// You can pass %NULL for @lookup_key, provided the hash and equal functions
        /// of @hash_table are %NULL-safe.
        /// </para>
        /// </remarks>
        /// <param name="hashTable">
        /// a #GHashTable
        /// </param>
        /// <param name="lookupKey">
        /// the key to look up
        /// </param>
        /// <param name="stolenKey">
        /// return location for the
        ///    original key
        /// </param>
        /// <param name="stolenValue">
        /// return location
        ///    for the value associated with the key
        /// </param>
        /// <returns>
        /// %TRUE if the key was found in the #GHashTable
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.58")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_hash_table_steal_extended(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr lookupKey,
        /* <type name="gpointer" type="gpointer*" is-pointer="1" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full nullable:1 optional:1 allow-none:1 */
        System.IntPtr* stolenKey,
        /* <type name="gpointer" type="gpointer*" is-pointer="1" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full nullable:1 optional:1 allow-none:1 */
        System.IntPtr* stolenValue);
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Runtime.GType g_hash_table_get_type();

        /// <summary>
        /// Atomically increments the reference count of @hash_table by one.
        /// This function is MT-safe and may be called from any thread.
        /// </summary>
        /// <param name="hashTable">
        /// a valid #GHashTable
        /// </param>
        /// <returns>
        /// the passed in #GHashTable
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.10")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.HashTable.UnmanagedStruct* g_hash_table_ref(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <summary>
        /// Takes ownership of the unmanaged pointer without freeing it.
        /// The managed object can no longer be used (will throw disposed exception).
        /// </summary>
        public override System.IntPtr Take() => (System.IntPtr)g_hash_table_ref((GISharp.Lib.GLib.HashTable.UnmanagedStruct*)UnsafeHandle);

        /// <summary>
        /// Atomically decrements the reference count of @hash_table by one.
        /// If the reference count drops to 0, all keys and values will be
        /// destroyed, and all memory allocated by the hash table is released.
        /// This function is MT-safe and may be called from any thread.
        /// </summary>
        /// <param name="hashTable">
        /// a valid #GHashTable
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.10")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_hash_table_unref(
        /* <type name="GLib.HashTable" type="GHashTable*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.HashTable.UnmanagedStruct* hashTable);

        /// <inheritdoc/>
        protected override void Dispose(bool disposing)
        {
            if (handle != System.IntPtr.Zero)
            {
                g_hash_table_unref((UnmanagedStruct*)handle);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            base.Dispose(disposing);
        }
    }
}