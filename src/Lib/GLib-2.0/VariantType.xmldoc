<declaration>

<member name='VariantType.Element'>
<summary>
Determines the element type of an array or maybe type.
</summary>
<remarks>
<para>
This function may only be used with array or maybe types.
</para>
</remarks>
</member>

<member name='VariantType.First'>
<summary>
Determines the first item type of a tuple or dictionary entry
type.
</summary>
<remarks>
<para>
This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
%G_VARIANT_TYPE_TUPLE.
</para>
<para>
In the case of a dictionary entry type, this returns the type of
the key.
</para>
<para>
<c>null</c> is returned in case of this instance being %G_VARIANT_TYPE_UNIT.
</para>
<para>
This call, together with <see cref="VariantType.Next()"/> provides an iterator
interface over tuple and dictionary entry types.
</para>
</remarks>
</member>

<member name='VariantType.IsArray'>
<summary>
Determines if the given this instance is an array type.  This is true if the
type string for this instance starts with an 'a'.
</summary>
<remarks>
<para>
This function returns <c>true</c> for any indefinite type for which every
definite subtype is an array type -- %G_VARIANT_TYPE_ARRAY, for
example.
</para>
</remarks>
</member>

<member name='VariantType.IsBasic'>
<summary>
Determines if the given this instance is a basic type.
</summary>
<remarks>
<para>
Basic types are booleans, bytes, integers, doubles, strings, object
paths and signatures.
</para>
<para>
Only a basic type may be used as the key of a dictionary entry.
</para>
<para>
This function returns <c>false</c> for all indefinite types except
%G_VARIANT_TYPE_BASIC.
</para>
</remarks>
</member>

<member name='VariantType.IsContainer'>
<summary>
Determines if the given this instance is a container type.
</summary>
<remarks>
<para>
Container types are any array, maybe, tuple, or dictionary
entry types plus the variant type.
</para>
<para>
This function returns <c>true</c> for any indefinite type for which every
definite subtype is a container -- %G_VARIANT_TYPE_ARRAY, for
example.
</para>
</remarks>
</member>

<member name='VariantType.IsDefinite'>
<summary>
Determines if the given this instance is definite (ie: not indefinite).
</summary>
<remarks>
<para>
A type is definite if its type string does not contain any indefinite
type characters ('*', '?', or 'r').
</para>
<para>
A <see cref="Variant"/> instance may not have an indefinite type, so calling
this function on the result of <see cref="Variant.GetType_()"/> will always
result in <c>true</c> being returned.  Calling this function on an
indefinite type like %G_VARIANT_TYPE_ARRAY, however, will result in
<c>false</c> being returned.
</para>
</remarks>
</member>

<member name='VariantType.IsDictEntry'>
<summary>
Determines if the given this instance is a dictionary entry type.  This is
true if the type string for this instance starts with a '{'.
</summary>
<remarks>
<para>
This function returns <c>true</c> for any indefinite type for which every
definite subtype is a dictionary entry type --
%G_VARIANT_TYPE_DICT_ENTRY, for example.
</para>
</remarks>
</member>

<member name='VariantType.IsMaybe'>
<summary>
Determines if the given this instance is a maybe type.  This is true if the
type string for this instance starts with an 'm'.
</summary>
<remarks>
<para>
This function returns <c>true</c> for any indefinite type for which every
definite subtype is a maybe type -- %G_VARIANT_TYPE_MAYBE, for
example.
</para>
</remarks>
</member>

<member name='VariantType.IsTuple'>
<summary>
Determines if the given this instance is a tuple type.  This is true if the
type string for this instance starts with a '(' or if this instance is
%G_VARIANT_TYPE_TUPLE.
</summary>
<remarks>
<para>
This function returns <c>true</c> for any indefinite type for which every
definite subtype is a tuple type -- %G_VARIANT_TYPE_TUPLE, for
example.
</para>
</remarks>
</member>

<member name='VariantType.IsVariant'>
<summary>
Determines if the given this instance is the variant type.
</summary>
</member>

<member name='VariantType.Key'>
<summary>
Determines the key type of a dictionary entry type.
</summary>
<remarks>
<para>
This function may only be used with a dictionary entry type.  Other
than the additional restriction, this call is equivalent to
<see cref="VariantType.GetFirst()"/>.
</para>
</remarks>
</member>

<member name='VariantType.ItemCount'>
<summary>
Determines the number of items contained in a tuple or
dictionary entry type.
</summary>
<remarks>
<para>
This function may only be used with tuple or dictionary entry types,
but must not be used with the generic tuple type
<see cref="VariantType.Tuple"/>.
</para>
<para>
In the case of a dictionary entry type, this function will always
return 2.
</para>
</remarks>
</member>

<member name='VariantType.Value'>
<summary>
Determines the value type of a dictionary entry type.
</summary>
<remarks>
<para>
This function may only be used with a dictionary entry type.
</para>
</remarks>
</member>

<member name='VariantType.VariantType(GISharp.Runtime.UnownedUtf8)'>
<summary>
Creates a new <see cref="VariantType"/> corresponding to the type string given
by <paramref name="typeString"/>.
</summary>
<remarks>
<para>
It is a programmer error to call this function with an invalid type
string.  Use <see cref="VariantType.StringIsValid(GISharp.Runtime.UnownedUtf8)"/> if you are unsure.
</para>
</remarks>
<param name="typeString">
a valid GVariant type string
</param>
</member>

<member name='VariantType.NewArray(GISharp.Lib.GLib.VariantType)'>
<summary>
Constructs the type corresponding to an array of elements of the
type <c>type</c>.
</summary>
<param name="element">
a <see cref="VariantType"/>
</param>
<returns>
a new array <see cref="VariantType"/>
</returns>
</member>

<member name='VariantType.NewDictEntry(GISharp.Lib.GLib.VariantType,GISharp.Lib.GLib.VariantType)'>
<summary>
Constructs the type corresponding to a dictionary entry with a key
of type <paramref name="key"/> and a value of type <paramref name="value"/>.
</summary>
<param name="key">
a basic <see cref="VariantType"/>
</param>
<param name="value">
a <see cref="VariantType"/>
</param>
<returns>
a new dictionary entry <see cref="VariantType"/>
</returns>
</member>

<member name='VariantType.NewMaybe(GISharp.Lib.GLib.VariantType)'>
<summary>
Constructs the type corresponding to a maybe instance containing
type <c>type</c> or Nothing.
</summary>
<param name="element">
a <see cref="VariantType"/>
</param>
<returns>
a new maybe <see cref="VariantType"/>
</returns>
</member>

<member name='VariantType.NewTuple(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GLib.VariantType&gt;)'>
<summary>
Constructs a new tuple type, from <paramref name="items"/>.
</summary>
<param name="items">
an array of <see cref="VariantType"/>s, one for each item
</param>
<returns>
a new tuple <see cref="VariantType"/>
</returns>
</member>

<member name='VariantType.Checked(GISharp.Runtime.UnownedUtf8)'>
</member>

<member name='VariantType.StringGetDepth(GISharp.Runtime.UnownedUtf8)'>
</member>

<member name='VariantType.StringIsValid(GISharp.Runtime.UnownedUtf8)'>
<summary>
Checks if <paramref name="typeString"/> is a valid GVariant type string.  This call is
equivalent to calling <see cref="VariantType.TryStringScan(GISharp.Runtime.UnownedUtf8,GISharp.Runtime.NullableUnownedUtf8,out GISharp.Runtime.Utf8)"/> and confirming
that the following character is a nul terminator.
</summary>
<param name="typeString">
a pointer to any string
</param>
<returns>
<c>true</c> if <paramref name="typeString"/> is exactly one valid type string
</returns>
</member>

<member name='VariantType.TryStringScan(GISharp.Runtime.UnownedUtf8,GISharp.Runtime.NullableUnownedUtf8,GISharp.Runtime.Utf8)'>
<summary>
Scan for a single complete and valid GVariant type string in <paramref name="string"/>.
The memory pointed to by <paramref name="limit"/> (or bytes beyond it) is never
accessed.
</summary>
<remarks>
<para>
If a valid type string is found, <paramref name="endptr"/> is updated to point to the
first character past the end of the string that was found and <c>true</c>
is returned.
</para>
<para>
If there is no valid type string starting at <paramref name="string"/>, or if the type
string does not end before <paramref name="limit"/> then <c>false</c> is returned.
</para>
<para>
For the simple case of checking if a string is a valid type string,
see <see cref="VariantType.StringIsValid(GISharp.Runtime.UnownedUtf8)"/>.
</para>
</remarks>
<param name="string">
a pointer to any string
</param>
<param name="limit">
the end of <paramref name="string"/>, or <c>null</c>
</param>
<param name="endptr">
location to store the end pointer, or <c>null</c>
</param>
<returns>
<c>true</c> if a valid type string was found
</returns>
</member>

<member name='VariantType.DupString()'>
<summary>
Returns a newly-allocated copy of the type string corresponding to
this instance.  The returned string is nul-terminated.  It is appropriate to
call g_free() on the return value.
</summary>
<returns>
the corresponding type string
</returns>
</member>

<member name='VariantType.Equals(GISharp.Lib.GLib.VariantType?)'>
<summary>
Compares this instance and <paramref name="type2"/> for equality.
</summary>
<remarks>
<para>
Only returns <c>true</c> if the types are exactly equal.  Even if one type
is an indefinite type and the other is a subtype of it, <c>false</c> will
be returned if they are not exactly equal.  If you want to check for
subtypes, use <see cref="VariantType.IsSubtypeOf(GISharp.Lib.GLib.VariantType)"/>.
</para>
<para>
The argument types of this instance and <paramref name="type2"/> are only #gconstpointer to
allow use with <see cref="HashTable"/> without function pointer casting.  For
both arguments, a valid <see cref="VariantType"/> must be provided.
</para>
</remarks>
<param name="type2">
a <see cref="VariantType"/>
</param>
<returns>
<c>true</c> if this instance and <paramref name="type2"/> are exactly equal
</returns>
</member>

<member name='VariantType.GetHashCode()'>
<summary>
Hashes this instance.
</summary>
<remarks>
<para>
The argument type of this instance is only #gconstpointer to allow use with
<see cref="HashTable"/> without function pointer casting.  A valid
<see cref="VariantType"/> must be provided.
</para>
</remarks>
<returns>
the hash value
</returns>
</member>

<member name='VariantType.IsSubtypeOf(GISharp.Lib.GLib.VariantType)'>
<summary>
Checks if this instance is a subtype of <paramref name="supertype"/>.
</summary>
<remarks>
<para>
This function returns <c>true</c> if this instance is a subtype of <paramref name="supertype"/>.  All
types are considered to be subtypes of themselves.  Aside from that,
only indefinite types can have subtypes.
</para>
</remarks>
<param name="supertype">
a <see cref="VariantType"/>
</param>
<returns>
<c>true</c> if this instance is a subtype of <paramref name="supertype"/>
</returns>
</member>

<member name='VariantType.Next()'>
<summary>
Determines the next item type of a tuple or dictionary entry
type.
</summary>
<remarks>
<para>
this instance must be the result of a previous call to
<see cref="VariantType.GetFirst()"/> or <see cref="VariantType.Next()"/>.
</para>
<para>
If called on the key type of a dictionary entry then this call
returns the value type.  If called on the value type of a dictionary
entry then this call returns <c>null</c>.
</para>
<para>
For tuples, <c>null</c> is returned when this instance is the last item in a tuple.
</para>
</remarks>
<returns>
the next <see cref="VariantType"/> after this instance, or <c>null</c>
</returns>
</member>

<member name='VariantType'>
<summary>
This section introduces the GVariant type system. It is based, in
large part, on the D-Bus type system, with two major changes and
some minor lifting of restrictions. The
[D-Bus specification](http://dbus.freedesktop.org/doc/dbus-specification.html),
therefore, provides a significant amount of
information that is useful when working with GVariant.
</summary>
<remarks>
<para>
The first major change with respect to the D-Bus type system is the
introduction of maybe (or "nullable") types.  Any type in GVariant can be
converted to a maybe type, in which case, "nothing" (or "null") becomes a
valid value.  Maybe types have been added by introducing the
character "m" to type strings.
</para>
<para>
The second major change is that the GVariant type system supports the
concept of "indefinite types" -- types that are less specific than
the normal types found in D-Bus.  For example, it is possible to speak
of "an array of any type" in GVariant, where the D-Bus type system
would require you to speak of "an array of integers" or "an array of
strings".  Indefinite types have been added by introducing the
characters "*", "?" and "r" to type strings.
</para>
<para>
Finally, all arbitrary restrictions relating to the complexity of
types are lifted along with the restriction that dictionary entries
may only appear nested inside of arrays.
</para>
<para>
Just as in D-Bus, GVariant types are described with strings ("type
strings").  Subject to the differences mentioned above, these strings
are of the same form as those found in D-Bus.  Note, however: D-Bus
always works in terms of messages and therefore individual type
strings appear nowhere in its interface.  Instead, "signatures"
are a concatenation of the strings of the type of each argument in a
message.  GVariant deals with single values directly so GVariant type
strings always describe the type of exactly one value.  This means
that a D-Bus signature string is generally not a valid GVariant type
string -- except in the case that it is the signature of a message
containing exactly one argument.
</para>
<para>
An indefinite type is similar in spirit to what may be called an
abstract type in other type systems.  No value can exist that has an
indefinite type as its type, but values can exist that have types
that are subtypes of indefinite types.  That is to say,
<see cref="Variant.GetType_()"/> will never return an indefinite type, but
calling <see cref="Variant.IsOfType(GISharp.Lib.GLib.VariantType)"/> with an indefinite type may return
<c>true</c>.  For example, you cannot have a value that represents "an
array of no particular type", but you can have an "array of integers"
which certainly matches the type of "an array of no particular type",
since "array of integers" is a subtype of "array of no particular
type".
</para>
<para>
This is similar to how instances of abstract classes may not
directly exist in other type systems, but instances of their
non-abstract subtypes may.  For example, in GTK, no object that has
the type of #GtkBin can exist (since #GtkBin is an abstract class),
but a #GtkWindow can certainly be instantiated, and you would say
that the #GtkWindow is a #GtkBin (since #GtkWindow is a subclass of
#GtkBin).
</para>
<para>
## GVariant Type Strings
</para>
<para>
A GVariant type string can be any of the following:
</para>
<para>
- any basic type string (listed below)
</para>
<para>
- "v", "r" or "*"
</para>
<para>
- one of the characters 'a' or 'm', followed by another type string
</para>
<para>
- the character '(', followed by a concatenation of zero or more other
  type strings, followed by the character ')'
</para>
<para>
- the character '{', followed by a basic type string (see below),
  followed by another type string, followed by the character '}'
</para>
<para>
A basic type string describes a basic type (as per
<see cref="VariantType.GetIsBasic()"/>) and is always a single character in length.
The valid basic type strings are "b", "y", "n", "q", "i", "u", "x", "t",
"h", "d", "s", "o", "g" and "?".
</para>
<para>
The above definition is recursive to arbitrary depth. "aaaaai" and
"(ui(nq((y)))s)" are both valid type strings, as is
"a(aa(ui)(qna{ya(yd)}))". In order to not hit memory limits, <see cref="Variant"/>
imposes a limit on recursion depth of 65 nested containers. This is the
limit in the D-Bus specification (64) plus one to allow a #GDBusMessage to
be nested in a top-level tuple.
</para>
<para>
The meaning of each of the characters is as follows:
- `b`: the type string of %G_VARIANT_TYPE_BOOLEAN; a boolean value.
- `y`: the type string of %G_VARIANT_TYPE_BYTE; a byte.
- `n`: the type string of %G_VARIANT_TYPE_INT16; a signed 16 bit integer.
- `q`: the type string of %G_VARIANT_TYPE_UINT16; an unsigned 16 bit integer.
- `i`: the type string of %G_VARIANT_TYPE_INT32; a signed 32 bit integer.
- `u`: the type string of %G_VARIANT_TYPE_UINT32; an unsigned 32 bit integer.
- `x`: the type string of %G_VARIANT_TYPE_INT64; a signed 64 bit integer.
- `t`: the type string of %G_VARIANT_TYPE_UINT64; an unsigned 64 bit integer.
- `h`: the type string of %G_VARIANT_TYPE_HANDLE; a signed 32 bit value
  that, by convention, is used as an index into an array of file
  descriptors that are sent alongside a D-Bus message.
- `d`: the type string of %G_VARIANT_TYPE_DOUBLE; a double precision
  floating point value.
- `s`: the type string of %G_VARIANT_TYPE_STRING; a string.
- `o`: the type string of %G_VARIANT_TYPE_OBJECT_PATH; a string in the form
  of a D-Bus object path.
- `g`: the type string of %G_VARIANT_TYPE_SIGNATURE; a string in the form of
  a D-Bus type signature.
- `?`: the type string of %G_VARIANT_TYPE_BASIC; an indefinite type that
  is a supertype of any of the basic types.
- `v`: the type string of %G_VARIANT_TYPE_VARIANT; a container type that
  contain any other type of value.
- `a`: used as a prefix on another type string to mean an array of that
  type; the type string "ai", for example, is the type of an array of
  signed 32-bit integers.
- `m`: used as a prefix on another type string to mean a "maybe", or
  "nullable", version of that type; the type string "ms", for example,
  is the type of a value that maybe contains a string, or maybe contains
  nothing.
- `()`: used to enclose zero or more other concatenated type strings to
  create a tuple type; the type string "(is)", for example, is the type of
  a pair of an integer and a string.
- `r`: the type string of %G_VARIANT_TYPE_TUPLE; an indefinite type that is
  a supertype of any tuple type, regardless of the number of items.
- `{}`: used to enclose a basic type string concatenated with another type
  string to create a dictionary entry type, which usually appears inside of
  an array to form a dictionary; the type string "a{sd}", for example, is
  the type of a dictionary that maps strings to double precision floating
  point values.
</para>
<para>
  The first type (the basic type) is the key type and the second type is
  the value type. The reason that the first type is restricted to being a
  basic type is so that it can easily be hashed.
- `*`: the type string of %G_VARIANT_TYPE_ANY; the indefinite type that is
  a supertype of all types.  Note that, as with all type strings, this
  character represents exactly one type. It cannot be used inside of tuples
  to mean "any number of items".
</para>
<para>
Any type string of a container that contains an indefinite type is,
itself, an indefinite type. For example, the type string "a*"
(corresponding to %G_VARIANT_TYPE_ARRAY) is an indefinite type
that is a supertype of every array type. "(*s)" is a supertype
of all tuples that contain exactly two items where the second
item is a string.
</para>
<para>
"a{?*}" is an indefinite type that is a supertype of all arrays
containing dictionary entries where the key is any basic type and
the value is any type at all.  This is, by definition, a dictionary,
so this type string corresponds to %G_VARIANT_TYPE_DICTIONARY. Note
that, due to the restriction that the key of a dictionary entry must
be a basic type, "{**}" is not a valid type string.
</para>
</remarks>
</member>

</declaration>
