<declaration>

<member name='MainContext.IsOwner'>
<summary>
Determines whether this thread holds the (recursive)
ownership of this <see cref="MainContext"/>. This is useful to
know before waiting on another thread that may be
blocking to get ownership of this instance.
</summary>
</member>

<member name='MainContext.IsPending'>
<summary>
Checks if any sources have pending events for the given context.
</summary>
</member>

<member name='MainContext.Default'>
<summary>
Returns the global default main context. This is the main context
used for main loop functions when a main loop is not explicitly
specified, and corresponds to the "main" main loop. See also
g_main_context_get_thread_default().
</summary>
</member>

<member name='MainContext.ThreadDefault'>
<summary>
Gets the thread-default <see cref="MainContext"/> for this thread, as with
g_main_context_get_thread_default(), but also adds a reference to
it with <see cref="MainContext.Ref()"/>. In addition, unlike
g_main_context_get_thread_default(), if the thread-default context
is the global default context, this will return that <see cref="MainContext"/>
(with a ref added to it) rather than returning <c>null</c>.
</summary>
</member>

<member name='MainContext.Depth'>
<summary>
Returns the depth of the stack of calls to
<see cref="MainContext.Dispatch()"/> on any <see cref="MainContext"/> in the current thread.
 That is, when called from the toplevel, it gives 0. When
called from within a callback from <see cref="MainContext.Iteration(bool)"/>
(or <see cref="MainLoop.Run()"/>, etc.) it returns 1. When called from within
a callback to a recursive call to <see cref="MainContext.Iteration(bool)"/>,
it returns 2. And so forth.
</summary>
<remarks>
<para>
This function is useful in a situation like the following:
Imagine an extremely simple "garbage collected" system.
</para>
<para>
|[&lt;!-- language="C" --&gt;
static GList *free_list;
</para>
<para>
gpointer
allocate_memory (gsize size)
{
  gpointer result = g_malloc (size);
  free_list = g_list_prepend (free_list, result);
  return result;
}
</para>
<para>
void
free_allocated_memory (void)
{
  GList *l;
  for (l = free_list; l; l = l-&gt;next);
    g_free (l-&gt;data);
  g_list_free (free_list);
  free_list = NULL;
 }
</para>
<para>
[...]
</para>
<para>
while (TRUE);
 {
   g_main_context_iteration (NULL, TRUE);
   free_allocated_memory();
  }
]|
</para>
<para>
This works from an application, however, if you want to do the same
thing from a library, it gets more difficult, since you no longer
control the main loop. You might think you can simply use an idle
function to make the call to free_allocated_memory(), but that
doesn't work, since the idle function could be called from a
recursive callback. This can be fixed by using <see cref="MainContext.GetDepth()"/>
</para>
<para>
|[&lt;!-- language="C" --&gt;
gpointer
allocate_memory (gsize size)
{
  FreeListBlock *block = g_new (FreeListBlock, 1);
  block-&gt;mem = g_malloc (size);
  block-&gt;depth = g_main_depth ();
  free_list = g_list_prepend (free_list, block);
  return block-&gt;mem;
}
</para>
<para>
void
free_allocated_memory (void)
{
  GList *l;
  
  int depth = g_main_depth ();
  for (l = free_list; l; );
    {
      GList *next = l-&gt;next;
      FreeListBlock *block = l-&gt;data;
      if (block-&gt;depth &gt; depth)
        {
          g_free (block-&gt;mem);
          g_free (block);
          free_list = g_list_delete_link (free_list, l);
        }
              
      l = next;
    }
  }
]|
</para>
<para>
There is a temptation to use <see cref="MainContext.GetDepth()"/> to solve
problems with reentrancy. For instance, while waiting for data
to be received from the network in response to a menu item,
the menu item might be selected again. It might seem that
one could make the menu item's callback return immediately
and do nothing if <see cref="MainContext.GetDepth()"/> returns a value greater than 1.
However, this should be avoided since the user then sees selecting
the menu item do nothing. Furthermore, you'll find yourself adding
these checks all over your code, since there are doubtless many,
many things that the user could do. Instead, you can use the
following techniques:
</para>
<para>
1. Use gtk_widget_set_sensitive() or modal dialogs to prevent
   the user from interacting with elements while the main
   loop is recursing.
</para>
<para>
2. Avoid main loop recursion in situations where you can't handle
   arbitrary  callbacks. Instead, structure your code so that you
   simply return to the main loop and then get called again when
   there is more work to do.
</para>
</remarks>
</member>

<member name='MainContext.MainContext()'>
<summary>
Creates a new <see cref="MainContext"/> structure.
</summary>
</member>

<member name='MainContext.Poll(System.ReadOnlySpan&lt;GISharp.Lib.GLib.PollFD&gt;,int)'>
<summary>
Polls <paramref name="fds"/>, as with the poll() system call, but portably. (On
systems that don't have poll(), it is emulated using select().)
This is used internally by <see cref="MainContext"/>, but it can be called
directly if you need to block until a file descriptor is ready, but
don't want to run the full main loop.
</summary>
<remarks>
<para>
Each element of <paramref name="fds"/> is a <see cref="PollFD"/> describing a single file
descriptor to poll. The <c>fd</c> field indicates the file descriptor,
and the <c>events</c> field indicates the events to poll for. On return,
the <c>revents</c> fields will be filled with the events that actually
occurred.
</para>
<para>
On POSIX systems, the file descriptors in <paramref name="fds"/> can be any sort of
file descriptor, but the situation is much more complicated on
Windows. If you need to use <see cref="MainContext.Poll(System.ReadOnlySpan{GISharp.Lib.GLib.PollFD},int)"/> in code that has to run on
Windows, the easiest solution is to construct all of your
<see cref="PollFD"/>s with g_io_channel_win32_make_pollfd().
</para>
</remarks>
<param name="fds">
file descriptors to poll
</param>
<param name="timeout">
amount of time to wait, in milliseconds, or -1 to wait forever
</param>
<returns>
the number of entries in <paramref name="fds"/> whose <c>revents</c> fields
were filled in, or 0 if the operation timed out, or -1 on error or
if the call was interrupted.
</returns>
</member>

<member name='MainContext.Acquire()'>
<summary>
Tries to become the owner of the specified context.
If some other thread is the owner of the context,
returns <c>false</c> immediately. Ownership is properly
recursive: the owner can require ownership again
and will release ownership when <see cref="MainContext.Release()"/>
is called as many times as <see cref="MainContext.Acquire()"/>.
</summary>
<remarks>
<para>
You must be the owner of a context before you
can call <see cref="MainContext.TryPrepare(out int)"/>, <see cref="MainContext.Query(int,out int,System.Span{GISharp.Lib.GLib.PollFD})"/>,
<see cref="MainContext.Check(int,System.ReadOnlySpan{GISharp.Lib.GLib.PollFD})"/>, <see cref="MainContext.Dispatch()"/>.
</para>
</remarks>
<returns>
<c>true</c> if the operation succeeded, and
  this thread is now the owner of this instance.
</returns>
</member>

<member name='MainContext.AddPoll(GISharp.Lib.GLib.PollFD,int)'>
<summary>
Adds a file descriptor to the set of file descriptors polled for
this context. This will very seldom be used directly. Instead
a typical event source will use <see cref="Source.AddUnixFd(int,GISharp.Lib.GLib.IOCondition)"/> instead.
</summary>
<param name="fd">
a <see cref="PollFD"/> structure holding information about a file
     descriptor to watch.
</param>
<param name="priority">
the priority for this file descriptor which should be
     the same as the priority used for <see cref="Source.Attach(GISharp.Lib.GLib.MainContext)"/> to ensure that the
     file descriptor is polled whenever the results may be needed.
</param>
</member>

<member name='MainContext.Check(int,System.ReadOnlySpan&lt;GISharp.Lib.GLib.PollFD&gt;)'>
<summary>
Passes the results of polling back to the main loop. You should be
careful to pass <paramref name="fds"/> and its length the length of <paramref name="fds"/> as received from
<see cref="MainContext.Query(int,out int,System.Span{GISharp.Lib.GLib.PollFD})"/>, as this functions relies on assumptions
on how <paramref name="fds"/> is filled.
</summary>
<remarks>
<para>
You must have successfully acquired the context with
<see cref="MainContext.Acquire()"/> before you may call this function.
</para>
</remarks>
<param name="maxPriority">
the maximum numerical priority of sources to check
</param>
<param name="fds">
array of <see cref="PollFD"/>'s that was passed to
      the last call to <see cref="MainContext.Query(int,out int,System.Span{GISharp.Lib.GLib.PollFD})"/>
</param>
<returns>
<c>true</c> if some sources are ready to be dispatched.
</returns>
</member>

<member name='MainContext.Dispatch()'>
<summary>
Dispatches all pending sources.
</summary>
<remarks>
<para>
You must have successfully acquired the context with
<see cref="MainContext.Acquire()"/> before you may call this function.
</para>
</remarks>
</member>

<member name='MainContext.FindSourceByFuncsUserData(GISharp.Lib.GLib.SourceFuncs,System.IntPtr)'>
<summary>
Finds a source with the given source functions and user data.  If
multiple sources exist with the same source function and user data,
the first one found will be returned.
</summary>
<param name="funcs">
the <c>sourceFuncs</c> passed to <see cref="Source.Source(ref GISharp.Lib.GLib.SourceFuncs,uint)"/>.
</param>
<param name="userData">
the user data from the callback.
</param>
<returns>
the source, if one was found, otherwise <c>null</c>
</returns>
</member>

<member name='MainContext.FindSourceById(uint)'>
<summary>
Finds a <see cref="Source"/> given a pair of context and ID.
</summary>
<remarks>
<para>
It is a programmer error to attempt to look up a non-existent source.
</para>
<para>
More specifically: source IDs can be reissued after a source has been
destroyed and therefore it is never valid to use this function with a
source ID which may have already been removed.  An example is when
scheduling an idle to run in another thread with g_idle_add(): the
idle may already have run and been removed by the time this function
is called on its (now invalid) source ID.  This source ID may have
been reissued, leading to the operation being performed against the
wrong source.
</para>
</remarks>
<param name="sourceId">
the source ID, as returned by <see cref="Source.GetId()"/>.
</param>
<returns>
the <see cref="Source"/>
</returns>
</member>

<member name='MainContext.FindSourceByUserData(System.IntPtr)'>
<summary>
Finds a source with the given user data for the callback.  If
multiple sources exist with the same user data, the first
one found will be returned.
</summary>
<param name="userData">
the user_data for the callback.
</param>
<returns>
the source, if one was found, otherwise <c>null</c>
</returns>
</member>

<member name='MainContext.Invoke(GISharp.Lib.GLib.SourceFunc,int)'>
<summary>
Invokes a function in such a way that this instance is owned during the
invocation of <paramref name="function"/>.
</summary>
<remarks>
<para>
This function is the same as g_main_context_invoke() except that it
lets you specify the priority in case <paramref name="function"/> ends up being
scheduled as an idle and also lets you give a <see cref="DestroyNotify"/> for <paramref name="data"/>.
</para>
<para>
<paramref name="notify"/> should not assume that it is called from any particular
thread or with any particular context acquired.
</para>
</remarks>
<param name="function">
function to call
</param>
<param name="priority">
the priority at which to run <paramref name="function"/>
</param>
</member>

<member name='MainContext.Iteration(bool)'>
<summary>
Runs a single iteration for the given main loop. This involves
checking to see if any event sources are ready to be processed,
then if no events sources are ready and <paramref name="mayBlock"/> is <c>true</c>, waiting
for a source to become ready, then dispatching the highest priority
events sources that are ready. Otherwise, if <paramref name="mayBlock"/> is <c>false</c>
sources are not waited to become ready, only those highest priority
events sources will be dispatched (if any), that are ready at this
given moment without further waiting.
</summary>
<remarks>
<para>
Note that even when <paramref name="mayBlock"/> is <c>true</c>, it is still possible for
<see cref="MainContext.Iteration(bool)"/> to return <c>false</c>, since the wait may
be interrupted for other reasons than an event source becoming ready.
</para>
</remarks>
<param name="mayBlock">
whether the call may block.
</param>
<returns>
<c>true</c> if events were dispatched.
</returns>
</member>

<member name='MainContext.PopThreadDefault()'>
<summary>
Pops this instance off the thread-default context stack (verifying that
it was on the top of the stack).
</summary>
</member>

<member name='MainContext.TryPrepare(int)'>
<summary>
Prepares to poll sources within a main loop. The resulting information
for polling is determined by calling g_main_context_query ().
</summary>
<remarks>
<para>
You must have successfully acquired the context with
<see cref="MainContext.Acquire()"/> before you may call this function.
</para>
</remarks>
<param name="priority">
location to store priority of highest priority
           source already ready.
</param>
<returns>
<c>true</c> if some source is ready to be dispatched
              prior to polling.
</returns>
</member>

<member name='MainContext.PushThreadDefault()'>
<summary>
Acquires this instance and sets it as the thread-default context for the
current thread. This will cause certain asynchronous operations
(such as most [gio][gio]-based I/O) which are
started in this thread to run under this instance and deliver their
results to its main loop, rather than running under the global
default context in the main thread. Note that calling this function
changes the context returned by g_main_context_get_thread_default(),
not the one returned by <see cref="MainContext.GetDefault()"/>, so it does not affect
the context used by functions like g_idle_add().
</summary>
<remarks>
<para>
Normally you would call this function shortly after creating a new
thread, passing it a <see cref="MainContext"/> which will be run by a
<see cref="MainLoop"/> in that thread, to set a new default context for all
async operations in that thread. In this case you may not need to
ever call <see cref="MainContext.PopThreadDefault()"/>, assuming you want the
new <see cref="MainContext"/> to be the default for the whole lifecycle of the
thread.
</para>
<para>
If you don't have control over how the new thread was created (e.g.
in the new thread isn't newly created, or if the thread life
cycle is managed by a #GThreadPool), it is always suggested to wrap
the logic that needs to use the new <see cref="MainContext"/> inside a
<see cref="MainContext.PushThreadDefault()"/> / <see cref="MainContext.PopThreadDefault()"/>
pair, otherwise threads that are re-used will end up never explicitly
releasing the <see cref="MainContext"/> reference they hold.
</para>
<para>
In some cases you may want to schedule a single operation in a
non-default context, or temporarily use a non-default context in
the main thread. In that case, you can wrap the call to the
asynchronous operation inside a
<see cref="MainContext.PushThreadDefault()"/> /
<see cref="MainContext.PopThreadDefault()"/> pair, but it is up to you to
ensure that no other asynchronous operations accidentally get
started while the non-default context is active.
</para>
<para>
Beware that libraries that predate this function may not correctly
handle being used from a thread with a thread-default context. Eg,
see g_file_supports_thread_contexts().
</para>
</remarks>
</member>

<member name='MainContext.Query(int,int,System.Span&lt;GISharp.Lib.GLib.PollFD&gt;)'>
<summary>
Determines information necessary to poll this main loop. You should
be careful to pass the resulting <paramref name="fds"/> array and its length the length of <paramref name="fds"/>
as is when calling <see cref="MainContext.Check(int,System.ReadOnlySpan{GISharp.Lib.GLib.PollFD})"/>, as this function relies
on assumptions made when the array is filled.
</summary>
<remarks>
<para>
You must have successfully acquired the context with
<see cref="MainContext.Acquire()"/> before you may call this function.
</para>
</remarks>
<param name="maxPriority">
maximum priority source to check
</param>
<param name="timeout">
location to store timeout to be used in polling
</param>
<param name="fds">
location to
      store <see cref="PollFD"/> records that need to be polled.
</param>
<returns>
the number of records actually stored in <paramref name="fds"/>,
  or, if more than the length of <paramref name="fds"/> records need to be stored, the number
  of records that need to be stored.
</returns>
</member>

<member name='MainContext.Release()'>
<summary>
Releases ownership of a context previously acquired by this thread
with <see cref="MainContext.Acquire()"/>. If the context was acquired multiple
times, the ownership will be released only when <see cref="MainContext.Release()"/>
is called as many times as it was acquired.
</summary>
</member>

<member name='MainContext.RemovePoll(GISharp.Lib.GLib.PollFD)'>
<summary>
Removes file descriptor from the set of file descriptors to be
polled for a particular context.
</summary>
<param name="fd">
a <see cref="PollFD"/> descriptor previously added with <see cref="MainContext.AddPoll(ref GISharp.Lib.GLib.PollFD,int)"/>
</param>
</member>

<member name='MainContext.WakeUp()'>
<summary>
If this instance is currently blocking in <see cref="MainContext.Iteration(bool)"/>
waiting for a source to become ready, cause it to stop blocking
and return.  Otherwise, cause the next invocation of
<see cref="MainContext.Iteration(bool)"/> to return without blocking.
</summary>
<remarks>
<para>
This API is useful for low-level control over <see cref="MainContext"/>; for
example, integrating it with main loop implementations such as
<see cref="MainLoop"/>.
</para>
<para>
Another related use for this function is when implementing a main
loop with a termination condition, computed from multiple threads:
</para>
<para>
|[&lt;!-- language="C" --&gt;
  #define NUM_TASKS 10
  static gint tasks_remaining = NUM_TASKS;  // (atomic)
  ...
 
  while (g_atomic_int_get (&amp;tasks_remaining) != 0)
    g_main_context_iteration (NULL, TRUE);
]|
 
Then in a thread:
|[&lt;!-- language="C" --&gt;
  perform_work();
</para>
<para>
  if (g_atomic_int_dec_and_test (&amp;tasks_remaining))
    g_main_context_wakeup (NULL);
]|
</para>
</remarks>
</member>

<member name='MainContext'>
<summary>
The `GMainContext` struct is an opaque data
type representing a set of sources to be handled in a main loop.
</summary>
</member>

</declaration>
