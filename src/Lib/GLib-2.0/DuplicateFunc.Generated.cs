// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <summary>
    /// The type of functions that are used to 'duplicate' an object.
    /// What this means depends on the context, it could just be
    /// incrementing the reference count, if @data is a ref-counted
    /// object.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 direction:in */
    public unsafe delegate System.IntPtr UnmanagedDuplicateFunc(
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr data,
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 closure:1 direction:in */
    System.IntPtr userData);

    /// <include file="DuplicateFunc.xmldoc" path="declaration/member[@name='DuplicateFunc']/*" />
    public delegate System.IntPtr DuplicateFunc(System.IntPtr data);

    /// <summary>
    /// Class for marshalling <see cref="DuplicateFunc"/> methods.
    /// </summary>
    public static unsafe class DuplicateFuncMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="DuplicateFunc"/>.
        /// </summary>
        public static GISharp.Lib.GLib.DuplicateFunc FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr> callback_, System.IntPtr userData_)
        {
            System.IntPtr managedCallback(System.IntPtr data)
            {
                var data_ = (System.IntPtr)data;
                var ret_ = callback_(data_,userData_);
                var ret = (System.IntPtr)ret_;
                return ret;
            }

            return managedCallback;
        }

        /// <summary>
        /// For runtime use only.
        /// </summary>
        [System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(System.Runtime.CompilerServices.CallConvCdecl) })]
        public static System.IntPtr Callback(System.IntPtr data_, System.IntPtr userData_)
        {
            try
            {
                var data = (System.IntPtr)data_;
                var userDataHandle = (System.Runtime.InteropServices.GCHandle)userData_;
                var (userData, userDataScope) = ((DuplicateFunc, GISharp.Runtime.CallbackScope))userDataHandle.Target!;
                var ret = userData.Invoke(data);
                if (userDataScope == GISharp.Runtime.CallbackScope.Async)
                {
                    userDataHandle.Free();
                }

                var ret_ = (System.IntPtr)ret;
                return ret_;
            }
            catch (System.Exception ex)
            {
                GISharp.Runtime.GMarshal.LogUnhandledException(ex);
            }

            return default(System.IntPtr);
        }
    }
}