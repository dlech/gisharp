// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <summary>
    /// A function of this signature is used to copy the node data
    /// when doing a deep-copy of a tree.
    /// </summary>
    [GISharp.Runtime.SinceAttribute("2.4")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate System.IntPtr UnmanagedCopyFunc(
    /* <type name="gpointer" type="gconstpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    System.IntPtr src,
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr data);

    /// <include file="CopyFunc.xmldoc" path="declaration/member[@name='CopyFunc']/*" />
    [GISharp.Runtime.SinceAttribute("2.4")]
    public delegate System.IntPtr CopyFunc(System.IntPtr src, System.IntPtr data);

    /// <summary>
    /// Class for marshalling <see cref="CopyFunc"/> methods.
    /// </summary>
    public static unsafe class CopyFuncMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="CopyFunc"/>.
        /// </summary>
        public static GISharp.Lib.GLib.CopyFunc FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr> callback_, System.IntPtr userData_)
        {
            System.IntPtr managedCallback(System.IntPtr src, System.IntPtr data)
            {
                var src_ = (System.IntPtr)src;
                var data_ = (System.IntPtr)data;
                var ret_ = callback_(src_,data_);
                var ret = (System.IntPtr)ret_;
                return ret;
            }

            return managedCallback;
        }
    }
}