// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <summary>
    /// Specifies the type of function which is called when a data element
    /// is destroyed. It is passed the pointer to the data element and
    /// should free any memory and resources allocated for it.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" managed-name="System.Void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedDestroyNotify(
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr data);

    /// <include file="DestroyNotify.xmldoc" path="declaration/member[@name='DestroyNotify']/*" />
    public delegate void DestroyNotify(System.IntPtr data);

    /// <summary>
    /// Class for marshalling <see cref="DestroyNotify"/> methods.
    /// </summary>
    public static unsafe class DestroyNotifyMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="DestroyNotify"/>.
        /// </summary>
        public static GISharp.Lib.GLib.DestroyNotify FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(System.IntPtr data) { var data_ = (System.IntPtr)data; callback_(data_); }

            return managedCallback;
        }
    }
}