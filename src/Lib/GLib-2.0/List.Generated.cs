// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GLib
{
    /// <include file="List.xmldoc" path="declaration/member[@name='List']/*" />
    public abstract unsafe partial class List : GISharp.Runtime.Opaque
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="List.xmldoc" path="declaration/member[@name='UnmanagedStruct.Data']/*" />
            public readonly System.IntPtr Data;

            /// <include file="List.xmldoc" path="declaration/member[@name='UnmanagedStruct.Next']/*" />
            public readonly GISharp.Lib.GLib.List.UnmanagedStruct* Next;

            /// <include file="List.xmldoc" path="declaration/member[@name='UnmanagedStruct.Prev']/*" />
            public readonly GISharp.Lib.GLib.List.UnmanagedStruct* Prev;
#pragma warning restore CS0169, CS0414, CS0649
        }

        /// <summary>
        /// Allocates space for one #GList element. It is called by
        /// g_list_append(), g_list_prepend(), g_list_insert() and
        /// g_list_insert_sorted() and so is rarely used on its own.
        /// </summary>
        /// <returns>
        /// a pointer to the newly-allocated #GList element
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_alloc();

        /// <summary>
        /// Adds a new element on to the end of the list.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note that the return value is the new start of the list,
        /// if @list was empty; make sure you store the new value.
        /// </para>
        /// <para>
        /// g_list_append() has to traverse the entire list to find the end,
        /// which is inefficient when adding multiple elements. A common idiom
        /// to avoid the inefficiency is to use g_list_prepend() and reverse
        /// the list with g_list_reverse() when all elements have been added.
        /// </para>
        /// <para>
        /// |[&lt;!-- language="C" --&gt;
        /// // Notice that these are initialized to the empty list.
        /// GList *string_list = NULL, *number_list = NULL;
        /// </para>
        /// <para>
        /// // This is a list of strings.
        /// string_list = g_list_append (string_list, "first");
        /// string_list = g_list_append (string_list, "second");
        /// </para>
        /// <para>
        /// // This is a list of integers.
        /// number_list = g_list_append (number_list, GINT_TO_POINTER (27));
        /// number_list = g_list_append (number_list, GINT_TO_POINTER (14));
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a pointer to a #GList
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <returns>
        /// either @list or the new start of the #GList if @list was %NULL
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_append(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Adds the second #GList onto the end of the first #GList.
        /// Note that the elements of the second #GList are not copied.
        /// They are used directly.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This function is for example used to move an element in the list.
        /// The following example moves an element to the top of the list:
        /// |[&lt;!-- language="C" --&gt;
        /// list = g_list_remove_link (list, llink);
        /// list = g_list_concat (llink, list);
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list1">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="list2">
        /// the #GList to add to the end of the first #GList,
        ///     this must point  to the top of the list
        /// </param>
        /// <returns>
        /// the start of the new #GList, which equals @list1 if not %NULL
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_concat(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list1,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list2);

        /// <summary>
        /// Copies a #GList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note that this is a "shallow" copy. If the list elements
        /// consist of pointers to data, the pointers are copied but
        /// the actual data is not. See g_list_copy_deep() if you need
        /// to copy the data as well.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <returns>
        /// the start of the new list that holds the same data as @list
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_copy(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Makes a full (deep) copy of a #GList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// In contrast with g_list_copy(), this function uses @func to make
        /// a copy of each list element, in addition to copying the list
        /// container itself.
        /// </para>
        /// <para>
        /// @func, as a #GCopyFunc, takes two arguments, the data to be copied
        /// and a @user_data pointer. On common processor architectures, it's safe to
        /// pass %NULL as @user_data if the copy function takes only one argument. You
        /// may get compiler warnings from this though if compiling with GCCâ€™s
        /// `-Wcast-function-type` warning.
        /// </para>
        /// <para>
        /// For instance, if @list holds a list of GObjects, you can do:
        /// |[&lt;!-- language="C" --&gt;
        /// another_list = g_list_copy_deep (list, (GCopyFunc) g_object_ref, NULL);
        /// ]|
        /// </para>
        /// <para>
        /// And, to entirely free the new list, you could do:
        /// |[&lt;!-- language="C" --&gt;
        /// g_list_free_full (another_list, g_object_unref);
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="func">
        /// a copy function used to copy every element in the list
        /// </param>
        /// <param name="userData">
        /// user data passed to the copy function @func, or %NULL
        /// </param>
        /// <returns>
        /// the start of the new list that holds a full copy of @list,
        ///     use g_list_free_full() to free it
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.34")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_copy_deep(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="CopyFunc" type="GCopyFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr> func,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Removes the node link_ from the list and frees it.
        /// Compare this to g_list_remove_link() which removes the node
        /// without freeing it.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="link">
        /// node to delete from @list
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_delete_link(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* link);

        /// <summary>
        /// Finds the element in a #GList which contains the given data.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// the element data to find
        /// </param>
        /// <returns>
        /// the found #GList element, or %NULL if it is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_find(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Finds an element in a #GList, using a supplied function to
        /// find the desired element. It iterates over the list, calling
        /// the given function which should return 0 when the desired
        /// element is found. The function takes two #gconstpointer arguments,
        /// the #GList element's data as the first argument and the
        /// given user data.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// user data passed to the function
        /// </param>
        /// <param name="func">
        /// the function to call for each element.
        ///     It should return 0 when the desired element is found
        /// </param>
        /// <returns>
        /// the found #GList element, or %NULL if it is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_find_custom(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="CompareFunc" type="GCompareFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, int> func);

        /// <summary>
        /// Gets the first element in a #GList.
        /// </summary>
        /// <param name="list">
        /// any #GList element
        /// </param>
        /// <returns>
        /// the first element in the #GList,
        ///     or %NULL if the #GList has no elements
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_first(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Calls a function for each element of a #GList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// It is safe for @func to remove the element from @list, but it must
        /// not modify any part of the list after that element.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="func">
        /// the function to call with each element's data
        /// </param>
        /// <param name="userData">
        /// user data to pass to the function
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_list_foreach(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="Func" type="GFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, void> func,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Frees all of the memory used by a #GList.
        /// The freed elements are returned to the slice allocator.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If list elements contain dynamically-allocated memory, you should
        /// either use g_list_free_full() or free them manually first.
        /// </para>
        /// <para>
        /// It can be combined with g_steal_pointer() to ensure the list head pointer
        /// is not left dangling:
        /// |[&lt;!-- language="C" --&gt;
        /// GList *list_of_borrowed_things = â€¦;  /&lt;!-- --&gt;* (transfer container) *&lt;!-- --&gt;/
        /// g_list_free (g_steal_pointer (&amp;list_of_borrowed_things));
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// the first link of a #GList
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_list_free(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Frees one #GList element, but does not update links from the next and
        /// previous elements in the list, so you should not call this function on an
        /// element that is currently part of a list.
        /// </summary>
        /// <remarks>
        /// <para>
        /// It is usually used after g_list_remove_link().
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList element
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_list_free_1(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Convenience method, which frees all the memory used by a #GList,
        /// and calls @free_func on every element's data.
        /// </summary>
        /// <remarks>
        /// <para>
        /// @free_func must not modify the list (eg, by removing the freed
        /// element from it).
        /// </para>
        /// <para>
        /// It can be combined with g_steal_pointer() to ensure the list head pointer
        /// is not left dangling Â­â€” this also has the nice property that the head pointer
        /// is cleared before any of the list elements are freed, to prevent double frees
        /// from @free_func:
        /// |[&lt;!-- language="C" --&gt;
        /// GList *list_of_owned_things = â€¦;  /&lt;!-- --&gt;* (transfer full) (element-type GObject) *&lt;!-- --&gt;/
        /// g_list_free_full (g_steal_pointer (&amp;list_of_owned_things), g_object_unref);
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// the first link of a #GList
        /// </param>
        /// <param name="freeFunc">
        /// the function to be called to free each element's data
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.28")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_list_free_full(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="DestroyNotify" type="GDestroyNotify" /> */
        /* transfer-ownership:none scope:async direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, void> freeFunc);

        /// <summary>
        /// Gets the position of the element containing
        /// the given data (starting from 0).
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// the data to find
        /// </param>
        /// <returns>
        /// the index of the element containing the data,
        ///     or -1 if the data is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        private static extern int g_list_index(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Inserts a new element into the list at the given position.
        /// </summary>
        /// <param name="list">
        /// a pointer to a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <param name="position">
        /// the position to insert the element. If this is
        ///     negative, or is larger than the number of elements in the
        ///     list, the new element is added on to the end of the list.
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_insert(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        int position);

        /// <summary>
        /// Inserts a new element into the list before the given position.
        /// </summary>
        /// <param name="list">
        /// a pointer to a #GList, this must point to the top of the list
        /// </param>
        /// <param name="sibling">
        /// the list element before which the new element
        ///     is inserted or %NULL to insert at the end of the list
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_insert_before(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* sibling,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Inserts @link_ into the list before the given position.
        /// </summary>
        /// <param name="list">
        /// a pointer to a #GList, this must point to the top of the list
        /// </param>
        /// <param name="sibling">
        /// the list element before which the new element
        ///     is inserted or %NULL to insert at the end of the list
        /// </param>
        /// <param name="link">
        /// the list element to be added, which must not be part of
        ///     any other list
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.62")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_insert_before_link(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* sibling,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* link);

        /// <summary>
        /// Inserts a new element into the list, using the given comparison
        /// function to determine its position.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If you are adding many new elements to a list, and the number of
        /// new elements is much larger than the length of the list, use
        /// g_list_prepend() to add the new items and sort the list afterwards
        /// with g_list_sort().
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a pointer to a #GList, this must point to the top of the
        ///     already sorted list
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <param name="func">
        /// the function to compare elements in the list. It should
        ///     return a number &gt; 0 if the first parameter comes after the
        ///     second parameter in the sort order.
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_insert_sorted(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="CompareFunc" type="GCompareFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, int> func);

        /// <summary>
        /// Inserts a new element into the list, using the given comparison
        /// function to determine its position.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If you are adding many new elements to a list, and the number of
        /// new elements is much larger than the length of the list, use
        /// g_list_prepend() to add the new items and sort the list afterwards
        /// with g_list_sort().
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a pointer to a #GList, this must point to the top of the
        ///     already sorted list
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <param name="func">
        /// the function to compare elements in the list. It should
        ///     return a number &gt; 0 if the first parameter  comes after the
        ///     second parameter in the sort order.
        /// </param>
        /// <param name="userData">
        /// user data to pass to comparison function
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.10")]
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_insert_sorted_with_data(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data,
        /* <type name="CompareDataFunc" type="GCompareDataFunc" /> */
        /* transfer-ownership:none closure:3 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, int> func,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);

        /// <summary>
        /// Gets the last element in a #GList.
        /// </summary>
        /// <param name="list">
        /// any #GList element
        /// </param>
        /// <returns>
        /// the last element in the #GList,
        ///     or %NULL if the #GList has no elements
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_last(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Gets the number of elements in a #GList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This function iterates over the whole list to count its elements.
        /// Use a #GQueue instead of a GList if you regularly need the number
        /// of items. To check whether the list is non-empty, it is faster to check
        /// @list against %NULL.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <returns>
        /// the number of elements in the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_list_length(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Gets the element at the given position in a #GList.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This iterates over the list until it reaches the @n-th position. If you
        /// intend to iterate over every element, it is better to use a for-loop as
        /// described in the #GList introduction.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="n">
        /// the position of the element, counting from 0
        /// </param>
        /// <returns>
        /// the element, or %NULL if the position is off
        ///     the end of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_nth(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint n);

        /// <summary>
        /// Gets the data of the element at the given position.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This iterates over the list until it reaches the @n-th position. If you
        /// intend to iterate over every element, it is better to use a for-loop as
        /// described in the #GList introduction.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="n">
        /// the position of the element
        /// </param>
        /// <returns>
        /// the element's data, or %NULL if the position
        ///     is off the end of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_list_nth_data(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint n);

        /// <summary>
        /// Gets the element @n places before @list.
        /// </summary>
        /// <param name="list">
        /// a #GList
        /// </param>
        /// <param name="n">
        /// the position of the element, counting from 0
        /// </param>
        /// <returns>
        /// the element, or %NULL if the position is
        ///     off the end of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_nth_prev(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint n);

        /// <summary>
        /// Gets the position of the given element
        /// in the #GList (starting from 0).
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="llink">
        /// an element in the #GList
        /// </param>
        /// <returns>
        /// the position of the element in the #GList,
        ///     or -1 if the element is not found
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        private static extern int g_list_position(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* llink);

        /// <summary>
        /// Prepends a new element on to the start of the list.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note that the return value is the new start of the list,
        /// which will have changed, so make sure you store the new value.
        /// </para>
        /// <para>
        /// |[&lt;!-- language="C" --&gt;
        /// // Notice that it is initialized to the empty list.
        /// GList *list = NULL;
        /// </para>
        /// <para>
        /// list = g_list_prepend (list, "last");
        /// list = g_list_prepend (list, "first");
        /// ]|
        /// </para>
        /// <para>
        /// Do not use this function to prepend a new element to a different
        /// element than the start of the list. Use g_list_insert_before() instead.
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a pointer to a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// the data for the new element
        /// </param>
        /// <returns>
        /// a pointer to the newly prepended element, which is the new
        ///     start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_prepend(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Removes an element from a #GList.
        /// If two elements contain the same data, only the first is removed.
        /// If none of the elements contain the data, the #GList is unchanged.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// the data of the element to remove
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_remove(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Removes all list nodes with data equal to @data.
        /// Returns the new head of the list. Contrast with
        /// g_list_remove() which removes only the first node
        /// matching the given data.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="data">
        /// data to remove
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_remove_all(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr data);

        /// <summary>
        /// Removes an element from a #GList, without freeing the element.
        /// The removed element's prev and next links are set to %NULL, so
        /// that it becomes a self-contained list with one element.
        /// </summary>
        /// <remarks>
        /// <para>
        /// This function is for example used to move an element in the list
        /// (see the example for g_list_concat()) or to remove an element in
        /// the list before freeing its data:
        /// |[&lt;!-- language="C" --&gt;
        /// list = g_list_remove_link (list, llink);
        /// free_some_data_that_may_access_the_list_again (llink-&gt;data);
        /// g_list_free (llink);
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="llink">
        /// an element in the #GList
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_remove_link(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* llink);

        /// <summary>
        /// Reverses a #GList.
        /// It simply switches the next and prev pointers of each element.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <returns>
        /// the start of the reversed #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_reverse(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list);

        /// <summary>
        /// Sorts a #GList using the given comparison function. The algorithm
        /// used is a stable sort.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="compareFunc">
        /// the comparison function used to sort the #GList.
        ///     This function is passed the data from 2 elements of the #GList
        ///     and should return 0 if they are equal, a negative value if the
        ///     first element comes before the second, or a positive value if
        ///     the first element comes after the second.
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_sort(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="CompareFunc" type="GCompareFunc" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, int> compareFunc);

        /// <summary>
        /// Like g_list_sort(), but the comparison function accepts
        /// a user data argument.
        /// </summary>
        /// <param name="list">
        /// a #GList, this must point to the top of the list
        /// </param>
        /// <param name="compareFunc">
        /// comparison function
        /// </param>
        /// <param name="userData">
        /// user data to pass to comparison function
        /// </param>
        /// <returns>
        /// the (possibly changed) start of the #GList
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("glib-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GLib.List.UnmanagedStruct* g_list_sort_with_data(
        /* <type name="GLib.List" type="GList*" is-pointer="1">
*   <type name="gpointer" type="gpointer" is-pointer="1" />
* </type> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.List.UnmanagedStruct* list,
        /* <type name="CompareDataFunc" type="GCompareDataFunc" /> */
        /* transfer-ownership:none closure:2 direction:in */
        delegate* unmanaged[Cdecl]<System.IntPtr, System.IntPtr, System.IntPtr, int> compareFunc,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr userData);
    }
}