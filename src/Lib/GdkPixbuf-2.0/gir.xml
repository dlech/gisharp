<?xml version="1.0" encoding="utf-8"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" xmlns:gs="http://gisharp.org/introspection/gisharp/1.0">
  <include name="GModule" version="2.0" gs:managed-name="GModule" />
  <include name="Gio" version="2.0" gs:managed-name="Gio" />
  <package name="gdk-pixbuf-2.0" gs:managed-name="GdkPixbuf2.0" />
  <c:include name="gdk-pixbuf/gdk-pixbuf.h" gs:managed-name="GdkPixbuf/gdkPixbuf.h" />
  <namespace name="GdkPixbuf" version="2.0" shared-library="libgdk_pixbuf-2.0.0.dylib" c:identifier-prefixes="Gdk" c:symbol-prefixes="gdk" gs:managed-name="GdkPixbuf">
    <enumeration name="Colorspace" glib:type-name="GdkColorspace" glib:get-type="gdk_colorspace_get_type" c:type="GdkColorspace" gs:managed-name="Colorspace">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="71">This enumeration defines the color spaces that are supported by
the gdk-pixbuf library.

Currently only RGB is supported.</doc>
      <member name="rgb" value="0" c:identifier="GDK_COLORSPACE_RGB" glib:nick="rgb" gs:managed-name="Rgb">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="73">Indicates a red/green/blue additive color space.</doc>
      </member>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="gdk_colorspace_get_type" gs:access-modifiers="private" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <enumeration name="InterpType" glib:type-name="GdkInterpType" glib:get-type="gdk_interp_type_get_type" c:type="GdkInterpType" gs:managed-name="InterpType">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="39">Interpolation modes for scaling functions.

The `GDK_INTERP_NEAREST` mode is the fastest scaling method, but has
horrible quality when scaling down; `GDK_INTERP_BILINEAR` is the best
choice if you aren't sure what to choose, it has a good speed/quality
balance.

**Note**: Cubic filtering is missing from the list; hyperbolic
interpolation is just as fast and results in higher quality.</doc>
      <member name="nearest" value="0" c:identifier="GDK_INTERP_NEAREST" glib:nick="nearest" gs:managed-name="Nearest">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="41">Nearest neighbor sampling; this is the fastest
 and lowest quality mode. Quality is normally unacceptable when scaling
 down, but may be OK when scaling up.</doc>
      </member>
      <member name="tiles" value="1" c:identifier="GDK_INTERP_TILES" glib:nick="tiles" gs:managed-name="Tiles">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="44">This is an accurate simulation of the PostScript
 image operator without any interpolation enabled.  Each pixel is
 rendered as a tiny parallelogram of solid color, the edges of which
 are implemented with antialiasing.  It resembles nearest neighbor for
 enlargement, and bilinear for reduction.</doc>
      </member>
      <member name="bilinear" value="2" c:identifier="GDK_INTERP_BILINEAR" glib:nick="bilinear" gs:managed-name="Bilinear">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="49">Best quality/speed balance; use this mode by
 default. Bilinear interpolation.  For enlargement, it is
 equivalent to point-sampling the ideal bilinear-interpolated image.
 For reduction, it is equivalent to laying down small tiles and
 integrating over the coverage area.</doc>
      </member>
      <member name="hyper" value="3" c:identifier="GDK_INTERP_HYPER" glib:nick="hyper" version="2.38" gs:managed-name="Hyper">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="54">This is the slowest and highest quality
 reconstruction function. It is derived from the hyperbolic filters in
 Wolberg's "Digital Image Warping", and is formally defined as the
 hyperbolic-filter sampling the ideal hyperbolic-filter interpolated
 image (the filter is designed to be idempotent for 1:1 pixel mapping).
 **Deprecated**: this interpolation filter is deprecated, as in reality
 it has a lower quality than the @GDK_INTERP_BILINEAR filter
 ()</doc>
      </member>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="gdk_interp_type_get_type" gs:access-modifiers="private" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
  </namespace>
</repository>