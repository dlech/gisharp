<?xml version="1.0" encoding="utf-8"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" xmlns:gs="http://gisharp.org/introspection/gisharp/1.0">
  <include name="GModule" version="2.0" gs:managed-name="GModule" />
  <include name="Gio" version="2.0" gs:managed-name="Gio" />
  <package name="gdk-pixbuf-2.0" gs:managed-name="GdkPixbuf2.0" />
  <c:include name="gdk-pixbuf/gdk-pixbuf.h" gs:managed-name="GdkPixbuf/gdkPixbuf.h" />
  <namespace name="GdkPixbuf" version="2.0" shared-library="libgdk_pixbuf-2.0.0.dylib" c:identifier-prefixes="Gdk" c:symbol-prefixes="gdk" gs:managed-name="GdkPixbuf">
    <enumeration name="Colorspace" glib:type-name="GdkColorspace" glib:get-type="gdk_colorspace_get_type" c:type="GdkColorspace" gs:managed-name="Colorspace">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="71">This enumeration defines the color spaces that are supported by
the gdk-pixbuf library.

Currently only RGB is supported.</doc>
      <member name="rgb" value="0" c:identifier="GDK_COLORSPACE_RGB" glib:nick="rgb" gs:managed-name="Rgb">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="73">Indicates a red/green/blue additive color space.</doc>
      </member>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="gdk_colorspace_get_type" gs:access-modifiers="private" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <enumeration name="InterpType" glib:type-name="GdkInterpType" glib:get-type="gdk_interp_type_get_type" c:type="GdkInterpType" gs:managed-name="InterpType">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="39">Interpolation modes for scaling functions.

The `GDK_INTERP_NEAREST` mode is the fastest scaling method, but has
horrible quality when scaling down; `GDK_INTERP_BILINEAR` is the best
choice if you aren't sure what to choose, it has a good speed/quality
balance.

**Note**: Cubic filtering is missing from the list; hyperbolic
interpolation is just as fast and results in higher quality.</doc>
      <member name="nearest" value="0" c:identifier="GDK_INTERP_NEAREST" glib:nick="nearest" gs:managed-name="Nearest">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="41">Nearest neighbor sampling; this is the fastest
 and lowest quality mode. Quality is normally unacceptable when scaling
 down, but may be OK when scaling up.</doc>
      </member>
      <member name="tiles" value="1" c:identifier="GDK_INTERP_TILES" glib:nick="tiles" gs:managed-name="Tiles">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="44">This is an accurate simulation of the PostScript
 image operator without any interpolation enabled.  Each pixel is
 rendered as a tiny parallelogram of solid color, the edges of which
 are implemented with antialiasing.  It resembles nearest neighbor for
 enlargement, and bilinear for reduction.</doc>
      </member>
      <member name="bilinear" value="2" c:identifier="GDK_INTERP_BILINEAR" glib:nick="bilinear" gs:managed-name="Bilinear">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="49">Best quality/speed balance; use this mode by
 default. Bilinear interpolation.  For enlargement, it is
 equivalent to point-sampling the ideal bilinear-interpolated image.
 For reduction, it is equivalent to laying down small tiles and
 integrating over the coverage area.</doc>
      </member>
      <member name="hyper" value="3" c:identifier="GDK_INTERP_HYPER" glib:nick="hyper" version="2.38" gs:managed-name="Hyper">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-transform.h" line="54">This is the slowest and highest quality
 reconstruction function. It is derived from the hyperbolic filters in
 Wolberg's "Digital Image Warping", and is formally defined as the
 hyperbolic-filter sampling the ideal hyperbolic-filter interpolated
 image (the filter is designed to be idempotent for 1:1 pixel mapping).
 **Deprecated**: this interpolation filter is deprecated, as in reality
 it has a lower quality than the @GDK_INTERP_BILINEAR filter
 ()</doc>
      </member>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="gdk_interp_type_get_type" gs:access-modifiers="private" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <enumeration name="PixbufAlphaMode" deprecated="1" deprecated-version="2.42" glib:type-name="GdkPixbufAlphaMode" glib:get-type="gdk_pixbuf_alpha_mode_get_type" c:type="GdkPixbufAlphaMode" gs:managed-name="PixbufAlphaMode">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="39">Control the alpha channel for drawables.

These values can be passed to gdk_pixbuf_xlib_render_to_drawable_alpha()
in gdk-pixbuf-xlib to control how the alpha channel of an image should
be handled.

This function can create a bilevel clipping mask (black and white) and use
it while painting the image.

In the future, when the X Window System gets an alpha channel extension,
it will be possible to do full alpha compositing onto arbitrary drawables.
For now both cases fall back to a bilevel clipping mask.</doc>
      <doc-deprecated xml:space="preserve">There is no user of GdkPixbufAlphaMode in GdkPixbuf,
  and the Xlib utility functions have been split out to their own
  library, gdk-pixbuf-xlib</doc-deprecated>
      <member name="bilevel" value="0" c:identifier="GDK_PIXBUF_ALPHA_BILEVEL" glib:nick="bilevel" gs:managed-name="Bilevel">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="41">A bilevel clipping mask (black and white)
 will be created and used to draw the image.  Pixels below 0.5 opacity
 will be considered fully transparent, and all others will be
 considered fully opaque.</doc>
      </member>
      <member name="full" value="1" c:identifier="GDK_PIXBUF_ALPHA_FULL" glib:nick="full" gs:managed-name="Full">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="45">For now falls back to #GDK_PIXBUF_ALPHA_BILEVEL.
 In the future it will do full alpha compositing.</doc>
      </member>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="gdk_pixbuf_alpha_mode_get_type" gs:access-modifiers="private" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <enumeration name="PixbufError" glib:type-name="GdkPixbufError" glib:get-type="gdk_pixbuf_error_get_type" c:type="GdkPixbufError" glib:error-domain="gdk-pixbuf-error-quark" gs:managed-name="PixbufError">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="123">An error code in the `GDK_PIXBUF_ERROR` domain.

Many gdk-pixbuf operations can cause errors in this domain, or in
the `G_FILE_ERROR` domain.</doc>
      <member name="corrupt_image" value="0" c:identifier="GDK_PIXBUF_ERROR_CORRUPT_IMAGE" glib:nick="corrupt-image" gs:managed-name="CorruptImage">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="125">An image file was broken somehow.</doc>
      </member>
      <member name="insufficient_memory" value="1" c:identifier="GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY" glib:nick="insufficient-memory" gs:managed-name="InsufficientMemory">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="126">Not enough memory.</doc>
      </member>
      <member name="bad_option" value="2" c:identifier="GDK_PIXBUF_ERROR_BAD_OPTION" glib:nick="bad-option" gs:managed-name="BadOption">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="127">A bad option was passed to a pixbuf save module.</doc>
      </member>
      <member name="unknown_type" value="3" c:identifier="GDK_PIXBUF_ERROR_UNKNOWN_TYPE" glib:nick="unknown-type" gs:managed-name="UnknownType">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="128">Unknown image type.</doc>
      </member>
      <member name="unsupported_operation" value="4" c:identifier="GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION" glib:nick="unsupported-operation" gs:managed-name="UnsupportedOperation">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="129">Don't know how to perform the
 given operation on the type of image at hand.</doc>
      </member>
      <member name="failed" value="5" c:identifier="GDK_PIXBUF_ERROR_FAILED" glib:nick="failed" gs:managed-name="Failed">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="131">Generic failure code, something went wrong.</doc>
      </member>
      <member name="incomplete_animation" value="6" c:identifier="GDK_PIXBUF_ERROR_INCOMPLETE_ANIMATION" glib:nick="incomplete-animation" gs:managed-name="IncompleteAnimation">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-core.h" line="132">Only part of the animation was loaded.</doc>
      </member>
      <gs:managed-property name="get_quark" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="Quark">
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="GLib.Quark" c:type="GQuark" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_quark" c:identifier="gdk_pixbuf_error_quark" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetQuark" gs:property-getter-for="Quark" gs:access-modifiers="private">
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="GLib.Quark" c:type="GQuark" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="gdk_pixbuf_error_get_type" gs:access-modifiers="private" gs:dll-name="gdk_pixbuf-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <bitfield name="PixbufFormatFlags" version="2.2" c:type="GdkPixbufFormatFlags" gs:managed-name="PixbufFormatFlags">
      <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="292">Flags which allow a module to specify further details about the supported
operations.</doc>
      <source-position filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="309" />
      <member name="writable" value="1" c:identifier="GDK_PIXBUF_FORMAT_WRITABLE" gs:managed-name="Writable">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="294">the module can write out images in the format.</doc>
      </member>
      <member name="scalable" value="2" c:identifier="GDK_PIXBUF_FORMAT_SCALABLE" gs:managed-name="Scalable">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="295">the image format is scalable</doc>
      </member>
      <member name="threadsafe" value="4" c:identifier="GDK_PIXBUF_FORMAT_THREADSAFE" version="2.28" gs:managed-name="Threadsafe">
        <doc xml:space="preserve" filename="../gdk-pixbuf/gdk-pixbuf-io.h" line="296">the module is threadsafe. gdk-pixbuf
    ignores modules that are not marked as threadsafe. ().</doc>
      </member>
    </bitfield>
  </namespace>
</repository>