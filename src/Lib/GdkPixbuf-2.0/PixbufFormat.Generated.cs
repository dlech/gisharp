// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GdkPixbuf
{
    /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat']/*" />
    [GISharp.Runtime.SinceAttribute("2.2")]
    [GISharp.Runtime.GTypeAttribute("GdkPixbufFormat", IsProxyForUnmanagedType = true)]
    public sealed unsafe partial class PixbufFormat : GISharp.Runtime.Boxed
    {
        private static readonly GISharp.Runtime.GType _GType = gdk_pixbuf_format_get_type();

        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Name']/*" />
            public readonly byte* Name;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Signature']/*" />
            public readonly GISharp.Lib.GdkPixbuf.PixbufModulePattern* Signature;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Domain']/*" />
            public readonly byte* Domain;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Description']/*" />
            public readonly byte* Description;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.MimeTypes']/*" />
            public readonly byte** MimeTypes;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Extensions']/*" />
            public readonly byte** Extensions;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Flags']/*" />
            public readonly uint Flags;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.Disabled']/*" />
            public readonly GISharp.Runtime.Boolean Disabled;

            /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='UnmanagedStruct.License']/*" />
            public readonly byte* License;
#pragma warning restore CS0169, CS0414, CS0649
        }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.Description']/*" />
        [GISharp.Runtime.SinceAttribute("2.2")]
        public GISharp.Runtime.Utf8 Description { get => GetDescription(); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.Extensions']/*" />
        [GISharp.Runtime.SinceAttribute("2.2")]
        public GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8> Extensions { get => GetExtensions(); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.License']/*" />
        [GISharp.Runtime.SinceAttribute("2.6")]
        public GISharp.Runtime.Utf8 License { get => GetLicense(); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.MimeTypes']/*" />
        [GISharp.Runtime.SinceAttribute("2.2")]
        public GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8> MimeTypes { get => GetMimeTypes(); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.Name']/*" />
        [GISharp.Runtime.SinceAttribute("2.2")]
        public GISharp.Runtime.Utf8 Name { get => GetName(); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.IsDisabled']/*" />
        [GISharp.Runtime.SinceAttribute("2.6")]
        public bool IsDisabled { get => GetIsDisabled(); set => SetDisabled(value); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.IsScalable']/*" />
        [GISharp.Runtime.SinceAttribute("2.6")]
        public bool IsScalable { get => GetIsScalable(); }

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.IsWritable']/*" />
        [GISharp.Runtime.SinceAttribute("2.2")]
        public bool IsWritable { get => GetIsWritable(); }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public PixbufFormat(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle)
        {
            if (ownership == GISharp.Runtime.Transfer.None)
            {
                this.handle = (System.IntPtr)gdk_pixbuf_format_copy((UnmanagedStruct*)handle);
            }
        }

        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Runtime.GType gdk_pixbuf_format_get_type();

        /// <summary>
        /// Creates a copy of `format`.
        /// </summary>
        /// <param name="format">
        /// a pixbuf format
        /// </param>
        /// <returns>
        /// the newly allocated copy of a `GdkPixbufFormat`. Use
        ///   gdk_pixbuf_format_free() to free the resources when done
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.22")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* gdk_pixbuf_format_copy(
        /* <type name="PixbufFormat" type="const GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);

        /// <summary>
        /// Frees the resources allocated when copying a `GdkPixbufFormat`
        /// using gdk_pixbuf_format_copy()
        /// </summary>
        /// <param name="format">
        /// a pixbuf format
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.22")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void gdk_pixbuf_format_free(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);

        /// <inheritdoc/>
        protected override void Dispose(bool disposing)
        {
            if (handle != System.IntPtr.Zero)
            {
                gdk_pixbuf_format_free((UnmanagedStruct*)handle);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            base.Dispose(disposing);
        }

        /// <summary>
        /// Returns a description of the format.
        /// </summary>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// a description of the format.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.2")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern byte* gdk_pixbuf_format_get_description(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetDescriptionArgs();

        [GISharp.Runtime.SinceAttribute("2.2")]
        private GISharp.Runtime.Utf8 GetDescription()
        {
            CheckGetDescriptionArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_get_description(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.Utf8.GetInstance<GISharp.Runtime.Utf8>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
            return ret;
        }

        /// <summary>
        /// Returns the filename extensions typically used for files in the
        /// given format.
        /// </summary>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// an array of
        ///   filename extensions
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.2")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array type="gchar**" zero-terminated="1" is-pointer="1">
*   <type name="utf8" is-pointer="1" />
* </array> */
        /* transfer-ownership:full direction:in */
        private static extern byte** gdk_pixbuf_format_get_extensions(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetExtensionsArgs();

        [GISharp.Runtime.SinceAttribute("2.2")]
        private GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8> GetExtensions()
        {
            CheckGetExtensionsArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_get_extensions(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = new GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8>((System.IntPtr)ret_, -1, GISharp.Runtime.Transfer.Full);
            return ret;
        }

        /// <summary>
        /// Returns information about the license of the image loader for the format.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The returned string should be a shorthand for a well known license, e.g.
        /// "LGPL", "GPL", "QPL", "GPL/QPL", or "other" to indicate some other license.
        /// </para>
        /// </remarks>
        /// <param name="format">
        /// a pixbuf format
        /// </param>
        /// <returns>
        /// a string describing the license of the pixbuf format
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.6")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern byte* gdk_pixbuf_format_get_license(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetLicenseArgs();

        [GISharp.Runtime.SinceAttribute("2.6")]
        private GISharp.Runtime.Utf8 GetLicense()
        {
            CheckGetLicenseArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_get_license(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.Utf8.GetInstance<GISharp.Runtime.Utf8>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
            return ret;
        }

        /// <summary>
        /// Returns the mime types supported by the format.
        /// </summary>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// an array of mime types
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.2")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array type="gchar**" zero-terminated="1" is-pointer="1">
*   <type name="utf8" is-pointer="1" />
* </array> */
        /* transfer-ownership:full direction:in */
        private static extern byte** gdk_pixbuf_format_get_mime_types(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetMimeTypesArgs();

        [GISharp.Runtime.SinceAttribute("2.2")]
        private GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8> GetMimeTypes()
        {
            CheckGetMimeTypesArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_get_mime_types(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = new GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8>((System.IntPtr)ret_, -1, GISharp.Runtime.Transfer.Full);
            return ret;
        }

        /// <summary>
        /// Returns the name of the format.
        /// </summary>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// the name of the format.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.2")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern byte* gdk_pixbuf_format_get_name(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetNameArgs();

        [GISharp.Runtime.SinceAttribute("2.2")]
        private GISharp.Runtime.Utf8 GetName()
        {
            CheckGetNameArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_get_name(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.Utf8.GetInstance<GISharp.Runtime.Utf8>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
            return ret;
        }

        /// <summary>
        /// Returns whether this image format is disabled.
        /// </summary>
        /// <remarks>
        /// <para>
        /// See gdk_pixbuf_format_set_disabled().
        /// </para>
        /// </remarks>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// whether this image format is disabled.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.6")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean gdk_pixbuf_format_is_disabled(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetIsDisabledArgs();

        [GISharp.Runtime.SinceAttribute("2.6")]
        private bool GetIsDisabled()
        {
            CheckGetIsDisabledArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_is_disabled(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Returns `TRUE` if the save option specified by @option_key is supported when
        /// saving a pixbuf using the module implementing @format.
        /// </summary>
        /// <remarks>
        /// <para>
        /// See gdk_pixbuf_save() for more information about option keys.
        /// </para>
        /// </remarks>
        /// <param name="format">
        /// a pixbuf format
        /// </param>
        /// <param name="optionKey">
        /// the name of an option
        /// </param>
        /// <returns>
        /// `TRUE` if the specified option is supported
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.36")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean gdk_pixbuf_format_is_save_option_supported(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format,
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* optionKey);
        partial void CheckIsSaveOptionSupportedArgs(GISharp.Runtime.UnownedUtf8 optionKey);

        /// <include file="PixbufFormat.xmldoc" path="declaration/member[@name='PixbufFormat.IsSaveOptionSupported(GISharp.Runtime.UnownedUtf8)']/*" />
        [GISharp.Runtime.SinceAttribute("2.36")]
        public bool IsSaveOptionSupported(GISharp.Runtime.UnownedUtf8 optionKey)
        {
            CheckIsSaveOptionSupportedArgs(optionKey);
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var optionKey_ = (byte*)optionKey.UnsafeHandle;
            var ret_ = gdk_pixbuf_format_is_save_option_supported(format_,optionKey_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Returns whether this image format is scalable.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If a file is in a scalable format, it is preferable to load it at
        /// the desired size, rather than loading it at the default size and
        /// scaling the resulting pixbuf to the desired size.
        /// </para>
        /// </remarks>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// whether this image format is scalable.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.6")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean gdk_pixbuf_format_is_scalable(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetIsScalableArgs();

        [GISharp.Runtime.SinceAttribute("2.6")]
        private bool GetIsScalable()
        {
            CheckGetIsScalableArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_is_scalable(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Returns whether pixbufs can be saved in the given format.
        /// </summary>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <returns>
        /// whether pixbufs can be saved in the given format.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.2")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean gdk_pixbuf_format_is_writable(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format);
        partial void CheckGetIsWritableArgs();

        [GISharp.Runtime.SinceAttribute("2.2")]
        private bool GetIsWritable()
        {
            CheckGetIsWritableArgs();
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var ret_ = gdk_pixbuf_format_is_writable(format_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Disables or enables an image format.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If a format is disabled, GdkPixbuf won't use the image loader for
        /// this format to load images.
        /// </para>
        /// <para>
        /// Applications can use this to avoid using image loaders with an
        /// inappropriate license, see gdk_pixbuf_format_get_license().
        /// </para>
        /// </remarks>
        /// <param name="format">
        /// a `GdkPixbufFormat`
        /// </param>
        /// <param name="disabled">
        /// `TRUE` to disable the format @format
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.6")]
        [System.Runtime.InteropServices.DllImportAttribute("gdk_pixbuf-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void gdk_pixbuf_format_set_disabled(
        /* <type name="PixbufFormat" type="GdkPixbufFormat*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct* format,
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.Boolean disabled);
        partial void CheckSetDisabledArgs(bool disabled);

        [GISharp.Runtime.SinceAttribute("2.6")]
        private void SetDisabled(bool disabled)
        {
            CheckSetDisabledArgs(disabled);
            var format_ = (GISharp.Lib.GdkPixbuf.PixbufFormat.UnmanagedStruct*)UnsafeHandle;
            var disabled_ = GISharp.Runtime.BooleanExtensions.ToBoolean(disabled);
            gdk_pixbuf_format_set_disabled(format_, disabled_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }
    }
}