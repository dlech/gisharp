<declaration>

<member name='UnmanagedStruct.ParentInstance'>
</member>

<member name='UnmanagedStruct.Priv'>
</member>

<member name='IOStream.IsClosed_'>
</member>

<member name='IOStream.InputStream_'>
</member>

<member name='IOStream.OutputStream_'>
</member>

<member name='IOStream.InputStream'>
<summary>
Gets the input stream for this object. This is used
for reading.
</summary>
</member>

<member name='IOStream.OutputStream'>
<summary>
Gets the output stream for this object. This is used for
writing.
</summary>
</member>

<member name='IOStream.IsClosed'>
<summary>
Checks if a stream is closed.
</summary>
</member>

<member name='IOStream.ClearPending()'>
<summary>
Clears the pending flag on this instance.
</summary>
</member>

<member name='IOStream.Close(GISharp.Lib.Gio.Cancellable?)'>
<summary>
Closes the stream, releasing resources related to it. This will also
close the individual input and output streams, if they are not already
closed.
</summary>
<remarks>
<para>
Once the stream is closed, all other operations will return
<see cref="IOErrorEnum.Closed"/>. Closing a stream multiple times will not
return an error.
</para>
<para>
Closing a stream will automatically flush any outstanding buffers
in the stream.
</para>
<para>
Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.
</para>
<para>
Some streams might keep the backing store of the stream (e.g. a file
descriptor) open after the stream is closed. See the documentation for
the individual stream for details.
</para>
<para>
On failure the first error that happened will be reported, but the
close operation will finish as much as possible. A stream that failed
to close will still return <see cref="IOErrorEnum.Closed"/> for all operations.
Still, it is important to check and report the error to the user,
otherwise there might be a loss of data as all data might not be written.
</para>
<para>
If <paramref name="cancellable"/> is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors.
</para>
<para>
The default implementation of this method just calls close on the
individual input/output streams.
</para>
</remarks>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore
</param>
<exception name="GISharp.Lib.GLib.Error.Exception">
On error
</exception>
</member>

<member name='IOStream.CloseAsync(int,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Requests an asynchronous close of the stream, releasing resources
related to it.
</summary>
<remarks>
<para>
For behaviour details see <see cref="IOStream.Close(GISharp.Lib.Gio.Cancellable)"/>.
</para>
<para>
The asynchronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.
</para>
</remarks>
<param name="ioPriority">
the io priority of the request
</param>
<param name="cancellable">
optional cancellable object
</param>
</member>

<member name='IOStream.HasPending()'>
<summary>
Checks if a stream has pending actions.
</summary>
<returns>
<c>true</c> if this instance has pending actions.
</returns>
</member>

<member name='IOStream.SetPending()'>
<summary>
Sets this instance to have actions pending. If the pending flag is
already set or this instance is closed, it will return <c>false</c> and set
<see cref="GISharp.Lib.GLib.Error.Exception"/>.
</summary>
<exception name="GISharp.Lib.GLib.Error.Exception">
On error
</exception>
</member>

<member name='IOStream.SpliceAsync(GISharp.Lib.Gio.IOStream,GISharp.Lib.Gio.IOStreamSpliceFlags,int,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously splice the output stream of this instance to the input stream of
<paramref name="stream2"/>, and splice the output stream of <paramref name="stream2"/> to the input stream of
this instance.
</summary>
<param name="stream2">
a <see cref="IOStream"/>.
</param>
<param name="flags">
a set of <see cref="IOStreamSpliceFlags"/>.
</param>
<param name="ioPriority">
the io priority of the request.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='IOStream.DoCloseAsync(int,GISharp.Lib.Gio.AsyncReadyCallback?,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Requests an asynchronous close of the stream, releasing resources
related to it. When the operation is finished <paramref name="callback"/> will be
called. You can then call <see cref="IOStream.DoCloseFinish(GISharp.Lib.Gio.IAsyncResult)"/> to get
the result of the operation.
</summary>
<remarks>
<para>
For behaviour details see <see cref="IOStream.Close(GISharp.Lib.Gio.Cancellable)"/>.
</para>
<para>
The asynchronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.
</para>
</remarks>
<param name="ioPriority">
the io priority of the request
</param>
<param name="callback">
callback to call when the request is satisfied
</param>
<param name="cancellable">
optional cancellable object
</param>
</member>

<member name='IOStream.DoCloseFinish(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Closes a stream.
</summary>
<param name="result">
a <see cref="IAsyncResult"/>
</param>
<returns>
<c>true</c> if stream was successfully closed, <c>false</c> otherwise.
</returns>
<exception name="GISharp.Lib.GLib.Error.Exception">
On error
</exception>
</member>

<member name='IOStream.DoCloseFn(GISharp.Lib.Gio.Cancellable?)'>
<exception name="GISharp.Lib.GLib.Error.Exception">
On error
</exception>
</member>

<member name='IOStream.DoGetInputStream()'>
<summary>
Gets the input stream for this object. This is used
for reading.
</summary>
<returns>
a <see cref="InputStream"/>, owned by the <see cref="IOStream"/>.
Do not free.
</returns>
</member>

<member name='IOStream.DoGetOutputStream()'>
<summary>
Gets the output stream for this object. This is used for
writing.
</summary>
<returns>
a <see cref="OutputStream"/>, owned by the <see cref="IOStream"/>.
Do not free.
</returns>
</member>

<member name='IOStream'>
<summary>
GIOStream represents an object that has both read and write streams.
Generally the two streams act as separate input and output streams,
but they share some common resources and state. For instance, for
seekable streams, both streams may use the same position.
</summary>
<remarks>
<para>
Examples of <see cref="IOStream"/> objects are #GSocketConnection, which represents
a two-way network connection; and <see cref="FileIOStream"/>, which represents a
file handle opened in read-write mode.
</para>
<para>
To do the actual reading and writing you need to get the substreams
with <see cref="IOStream.GetInputStream()"/> and <see cref="IOStream.GetOutputStream()"/>.
</para>
<para>
The <see cref="IOStream"/> object owns the input and the output streams, not the other
way around, so keeping the substreams alive will not keep the <see cref="IOStream"/>
object alive. If the <see cref="IOStream"/> object is freed it will be closed, thus
closing the substreams, so even if the substreams stay alive they will
always return <see cref="IOErrorEnum.Closed"/> for all operations.
</para>
<para>
To close a stream use <see cref="IOStream.Close(GISharp.Lib.Gio.Cancellable)"/> which will close the common
stream object and also the individual substreams. You can also close
the substreams themselves. In most cases this only marks the
substream as closed, so further I/O on it fails but common state in the
<see cref="IOStream"/> may still be open. However, some streams may support
"half-closed" states where one direction of the stream is actually shut down.
</para>
<para>
Operations on <see cref="IOStream"/>s cannot be started while another operation on the
<see cref="IOStream"/> or its substreams is in progress. Specifically, an application can
read from the <see cref="InputStream"/> and write to the <see cref="OutputStream"/> simultaneously
(either in separate threads, or as asynchronous operations in the same
thread), but an application cannot start any <see cref="IOStream"/> operation while there
is a <see cref="IOStream"/>, <see cref="InputStream"/> or <see cref="OutputStream"/> operation in progress, and
an application canâ€™t start any <see cref="InputStream"/> or <see cref="OutputStream"/> operation
while there is a <see cref="IOStream"/> operation in progress.
</para>
<para>
This is a product of individual stream operations being associated with a
given #GMainContext (the thread-default context at the time the operation was
started), rather than entire streams being associated with a single
#GMainContext.
</para>
<para>
GIO may run operations on <see cref="IOStream"/>s from other (worker) threads, and this
may be exposed to application code in the behaviour of wrapper streams, such
as #GBufferedInputStream or #GTlsConnection. With such wrapper APIs,
application code may only run operations on the base (wrapped) stream when
the wrapper stream is idle. Note that the semantics of such operations may
not be well-defined due to the state the wrapper stream leaves the base
stream in (though they are guaranteed not to crash).
</para>
</remarks>
</member>

</declaration>
