<declaration>

<member name='SimpleAction.Enabled'>
<summary>
If this instance is currently enabled.
</summary>
<remarks>
If the action is disabled then calls to <see cref="Action.Activate(GISharp.Lib.Gio.IAction,GISharp.Lib.GLib.Variant)"/> and
<see cref="Action.ChangeState(GISharp.Lib.Gio.IAction,GISharp.Lib.GLib.Variant)"/> have no effect.
</remarks>
</member>

<member name='SimpleAction.Name'>
<summary>
The name of the action. This is mostly meaningful for identifying
the action once it has been added to a <see cref="T:SimpleActionGroup"/>.
</summary>
</member>

<member name='SimpleAction.ParameterType'>
<summary>
The type of the parameter that must be given when activating the
action.
</summary>
</member>

<member name='SimpleAction.State'>
<summary>
The state of the action, or <c>null</c> if the action is stateless.
</summary>
</member>

<member name='SimpleAction.StateType'>
<summary>
The <see cref="GLib.VariantType"/> of the state that the action has, or <c>null</c> if the
action is stateless.
</summary>
</member>

<member name='SimpleAction.SimpleAction(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.VariantType?)'>
<summary>
Creates a new action.
</summary>
<remarks>
The created action is stateless. See <see cref="SimpleAction.SimpleAction(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.VariantType,GISharp.Lib.GLib.Variant)"/> to create
an action that has state.
</remarks>
<param name="name">
the name of the action
</param>
<param name="parameterType">
the type of parameter that will be passed to
  handlers for the <see cref="SimpleAction.ActivateSignal"/>, or <c>null</c> for no parameter
</param>
</member>

<member name='SimpleAction.SimpleAction(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.VariantType?,GISharp.Lib.GLib.Variant)'>
<summary>
Creates a new stateful action.
</summary>
<remarks>
All future state values must have the same <see cref="GLib.VariantType"/> as the initial
<paramref name="state"/>.

If the <paramref name="state"/> <see cref="GLib.Variant"/> is floating, it is consumed.
</remarks>
<param name="name">
the name of the action
</param>
<param name="parameterType">
the type of the parameter that will be passed to
  handlers for the <see cref="SimpleAction.ActivateSignal"/>, or <c>null</c> for no parameter
</param>
<param name="state">
the initial state of the action
</param>
</member>

<member name='ActivateSignalHandler'>
<summary>
Indicates that the action was just activated.
</summary>
<remarks>
<paramref name="parameter"/> will always be of the expected type, i.e. the parameter type
specified when the action was created. If an incorrect type is given when
activating the action, this signal is not emitted.

Since GLib 2.40, if no handler is connected to this signal then the
default behaviour for boolean-stated actions with a <c>null</c> parameter
type is to toggle them via the <see cref="SimpleAction.ChangeStateSignal"/>.
For stateful actions where the state type is equal to the parameter
type, the default is to forward them directly to
<see cref="SimpleAction.ChangeStateSignal"/>.  This should allow almost all users
of <see cref="SimpleAction"/> to connect only one handler or the other.
</remarks>
<param name="simpleAction">
the instance on which the signal was invoked
</param>
<param name="parameter">
the parameter to the activation, or <c>null</c> if it has
  no parameter
</param>
</member>

<member name='SimpleAction.ActivateSignal'>
<seealso cref="ActivateSignalHandler"/>
</member>

<member name='ChangeStateSignalHandler'>
<summary>
Indicates that the action just received a request to change its
state.
</summary>
<remarks>
<paramref name="value"/> will always be of the correct state type, i.e. the type of the
initial state passed to <see cref="SimpleAction.SimpleAction(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.VariantType,GISharp.Lib.GLib.Variant)"/>. If an incorrect
type is given when requesting to change the state, this signal is not
emitted.

If no handler is connected to this signal then the default
behaviour is to call <see cref="SimpleAction.SetState(GISharp.Lib.GLib.Variant)"/> to set the state
to the requested value. If you connect a signal handler then no
default action is taken. If the state should change then you must
call <see cref="SimpleAction.SetState(GISharp.Lib.GLib.Variant)"/> from the handler.

An example of a 'change-state' handler:
|[&lt;!-- language="C" --&gt;
static void
change_volume_state (GSimpleAction *action,
                     GVariant      *value,
                     gpointer       user_data)
{
  gint requested;

  requested = g_variant_get_int32 (value);

  // Volume only goes from 0 to 10
  if (0 &lt;= requested &amp;&amp; requested &lt;= 10)
    g_simple_action_set_state (action, value);
}
]|

The handler need not set the state to the requested value.
It could set it to any value at all, or take some other action.
</remarks>
<param name="simpleAction">
the instance on which the signal was invoked
</param>
<param name="value">
the requested value for the state
</param>
</member>

<member name='SimpleAction.ChangeStateSignal'>
<seealso cref="ChangeStateSignalHandler"/>
</member>

<member name='SimpleAction.SetEnabled(System.Boolean)'>
<summary>
Sets the action as enabled or not.
</summary>
<remarks>
An action must be enabled in order to be activated or in order to
have its state changed from outside callers.

This should only be called by the implementor of the action.  Users
of the action should not attempt to modify its enabled flag.
</remarks>
<param name="enabled">
whether the action is enabled
</param>
</member>

<member name='SimpleAction.SetState(GISharp.Lib.GLib.Variant)'>
<summary>
Sets the state of the action.
</summary>
<remarks>
This directly updates the 'state' property to the given value.

This should only be called by the implementor of the action.  Users
of the action should not attempt to directly modify the 'state'
property.  Instead, they should call <see cref="Action.ChangeState(GISharp.Lib.Gio.IAction,GISharp.Lib.GLib.Variant)"/> to
request the change.

If the <paramref name="value"/> GVariant is floating, it is consumed.
</remarks>
<param name="value">
the new <see cref="GLib.Variant"/> for the state
</param>
</member>

<member name='SimpleAction.SetStateHint(GISharp.Lib.GLib.Variant?)'>
<summary>
Sets the state hint for the action.
</summary>
<remarks>
See <see cref="Action.GetStateHint(GISharp.Lib.Gio.IAction)"/> for more information about
action state hints.
</remarks>
<param name="stateHint">
a <see cref="GLib.Variant"/> representing the state hint
</param>
</member>

<member name='SimpleAction'>
<summary>
A <see cref="SimpleAction"/> is the obvious simple implementation of the <see cref="IAction"/>
interface. This is the easiest way to create an action for purposes of
adding it to a <see cref="T:SimpleActionGroup"/>.
</summary>
<remarks>
See also #GtkAction.
</remarks>
</member>

</declaration>
