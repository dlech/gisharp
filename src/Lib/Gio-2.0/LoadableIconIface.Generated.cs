// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='LoadableIconIface']/*" />
    public sealed unsafe partial class LoadableIconIface : GISharp.Lib.GObject.TypeInterface
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.GIface']/*" />
            public readonly GISharp.Lib.GObject.TypeInterface.UnmanagedStruct GIface;

            /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.Load']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct*, int, byte**, GISharp.Lib.Gio.Cancellable.UnmanagedStruct*, GISharp.Lib.GLib.Error.UnmanagedStruct**, GISharp.Lib.Gio.InputStream.UnmanagedStruct*> Load;

            /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.LoadAsync']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct*, int, GISharp.Lib.Gio.Cancellable.UnmanagedStruct*, delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, System.IntPtr, void>, System.IntPtr, void> LoadAsync;

            /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.LoadFinish']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct*, GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, byte**, GISharp.Lib.GLib.Error.UnmanagedStruct**, GISharp.Lib.Gio.InputStream.UnmanagedStruct*> LoadFinish;
#pragma warning restore CS0169, CS0414, CS0649
        }

        static LoadableIconIface()
        {
            int loadOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Load));
            RegisterVirtualMethod(loadOffset, LoadMarshal.Create);
            int loadAsyncOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.LoadAsync));
            RegisterVirtualMethod(loadAsyncOffset, LoadAsyncMarshal.Create);
            int loadFinishOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.LoadFinish));
            RegisterVirtualMethod(loadFinishOffset, LoadFinishMarshal.Create);
        }

        /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='_Load']/*" />
        public delegate GISharp.Lib.Gio.InputStream _Load(int size, out GISharp.Runtime.Utf8 type, GISharp.Lib.Gio.Cancellable? cancellable = null);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="InputStream" type="GInputStream*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        public unsafe delegate GISharp.Lib.Gio.InputStream.UnmanagedStruct* UnmanagedLoad(
/* <type name="LoadableIcon" type="GLoadableIcon*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct* icon,
/* <type name="gint" type="int" /> */
/* transfer-ownership:none direction:in */
int size,
/* <type name="utf8" type="char**" is-pointer="1" /> */
/* direction:out caller-allocates:0 transfer-ownership:full optional:1 allow-none:1 */
byte** type,
/* <type name="Cancellable" type="GCancellable*" is-pointer="1" /> */
/* transfer-ownership:none nullable:1 allow-none:1 direction:in */
GISharp.Lib.Gio.Cancellable.UnmanagedStruct* cancellable,
/* <type name="GLib.Error" type="GError**" is-pointer="1" /> */
/* direction:inout transfer-ownership:full */
GISharp.Lib.GLib.Error.UnmanagedStruct** error);

        /// <summary>
        /// Class for marshalling <see cref="_Load"/> methods.
        /// </summary>
        public static unsafe class LoadMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedLoad Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Lib.Gio.InputStream.UnmanagedStruct* unmanagedLoad(GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct* icon_, int size_, byte** type_, GISharp.Lib.Gio.Cancellable.UnmanagedStruct* cancellable_, GISharp.Lib.GLib.Error.UnmanagedStruct** error_)
                {
                    try
                    {
                        var icon = (GISharp.Lib.Gio.ILoadableIcon)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)icon_, GISharp.Runtime.Transfer.None)!;
                        var size = (int)size_;
                        var cancellable = GISharp.Lib.Gio.Cancellable.GetInstance<GISharp.Lib.Gio.Cancellable>((System.IntPtr)cancellable_, GISharp.Runtime.Transfer.None);
                        var doLoad = (_Load)methodInfo.CreateDelegate(typeof(_Load), icon);
                        var ret = doLoad(size,out var type, cancellable);
                        *type_ = (byte*)type.Take();
                        var ret_ = (GISharp.Lib.Gio.InputStream.UnmanagedStruct*)ret.Take();
                        return ret_;
                    }
                    catch (GISharp.Lib.GLib.Error.Exception ex)
                    {
                        GISharp.Lib.GLib.Error.Propagate(error_, ex.Error);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }

                    return default(GISharp.Lib.Gio.InputStream.UnmanagedStruct*);
                }

                return unmanagedLoad;
            }
        }

        /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='_LoadAsync']/*" />
        public delegate void _LoadAsync(int size, GISharp.Lib.Gio.AsyncReadyCallback? callback, GISharp.Lib.Gio.Cancellable? cancellable = null);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedLoadAsync(
/* <type name="LoadableIcon" type="GLoadableIcon*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct* icon,
/* <type name="gint" type="int" /> */
/* transfer-ownership:none direction:in */
int size,
/* <type name="Cancellable" type="GCancellable*" is-pointer="1" /> */
/* transfer-ownership:none nullable:1 allow-none:1 direction:in */
GISharp.Lib.Gio.Cancellable.UnmanagedStruct* cancellable,
/* <type name="AsyncReadyCallback" type="GAsyncReadyCallback" /> */
/* transfer-ownership:none nullable:1 allow-none:1 scope:async closure:4 direction:in */
delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, System.IntPtr, void> callback,
/* <type name="gpointer" type="gpointer" is-pointer="1" /> */
/* transfer-ownership:none nullable:1 allow-none:1 closure:4 direction:in */
System.IntPtr userData);

        /// <summary>
        /// Class for marshalling <see cref="_LoadAsync"/> methods.
        /// </summary>
        public static unsafe class LoadAsyncMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedLoadAsync Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedLoadAsync(GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct* icon_, int size_, GISharp.Lib.Gio.Cancellable.UnmanagedStruct* cancellable_, delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, System.IntPtr, void> callback_, System.IntPtr userData_)
                {
                    try
                    {
                        var icon = (GISharp.Lib.Gio.ILoadableIcon)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)icon_, GISharp.Runtime.Transfer.None)!;
                        var size = (int)size_;
                        var callback = callback_ is null ? default(GISharp.Lib.Gio.AsyncReadyCallback) : GISharp.Lib.Gio.AsyncReadyCallbackMarshal.FromPointer(callback_, userData_);
                        var cancellable = GISharp.Lib.Gio.Cancellable.GetInstance<GISharp.Lib.Gio.Cancellable>((System.IntPtr)cancellable_, GISharp.Runtime.Transfer.None);
                        var doLoadAsync = (_LoadAsync)methodInfo.CreateDelegate(typeof(_LoadAsync), icon);
                        doLoadAsync(size, callback, cancellable);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedLoadAsync;
            }
        }

        /// <include file="LoadableIconIface.xmldoc" path="declaration/member[@name='_LoadFinish']/*" />
        public delegate GISharp.Lib.Gio.InputStream _LoadFinish(GISharp.Lib.Gio.IAsyncResult res, out GISharp.Runtime.Utf8 type);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="InputStream" type="GInputStream*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        public unsafe delegate GISharp.Lib.Gio.InputStream.UnmanagedStruct* UnmanagedLoadFinish(
/* <type name="LoadableIcon" type="GLoadableIcon*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct* icon,
/* <type name="AsyncResult" type="GAsyncResult*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res,
/* <type name="utf8" type="char**" is-pointer="1" /> */
/* direction:out caller-allocates:0 transfer-ownership:full optional:1 allow-none:1 */
byte** type,
/* <type name="GLib.Error" type="GError**" is-pointer="1" /> */
/* direction:inout transfer-ownership:full */
GISharp.Lib.GLib.Error.UnmanagedStruct** error);

        /// <summary>
        /// Class for marshalling <see cref="_LoadFinish"/> methods.
        /// </summary>
        public static unsafe class LoadFinishMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedLoadFinish Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Lib.Gio.InputStream.UnmanagedStruct* unmanagedLoadFinish(GISharp.Lib.Gio.LoadableIcon.UnmanagedStruct* icon_, GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res_, byte** type_, GISharp.Lib.GLib.Error.UnmanagedStruct** error_)
                {
                    try
                    {
                        var icon = (GISharp.Lib.Gio.ILoadableIcon)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)icon_, GISharp.Runtime.Transfer.None)!;
                        var res = (GISharp.Lib.Gio.IAsyncResult)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)res_, GISharp.Runtime.Transfer.None)!;
                        var doLoadFinish = (_LoadFinish)methodInfo.CreateDelegate(typeof(_LoadFinish), icon);
                        var ret = doLoadFinish(res,out var type);
                        *type_ = (byte*)type.Take();
                        var ret_ = (GISharp.Lib.Gio.InputStream.UnmanagedStruct*)ret.Take();
                        return ret_;
                    }
                    catch (GISharp.Lib.GLib.Error.Exception ex)
                    {
                        GISharp.Lib.GLib.Error.Propagate(error_, ex.Error);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }

                    return default(GISharp.Lib.Gio.InputStream.UnmanagedStruct*);
                }

                return unmanagedLoadFinish;
            }
        }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public LoadableIconIface(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }
    }
}