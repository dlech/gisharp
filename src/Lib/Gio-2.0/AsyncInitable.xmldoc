<declaration>

<member name='IAsyncInitable.NewAsync(GISharp.Runtime.GType,uint,GISharp.Lib.GObject.Parameter,int,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Helper function for constructing <see cref="IAsyncInitable"/> object. This is
similar to g_object_newv() but also initializes the object asynchronously.
</summary>
<param name="objectType">
a #GType supporting <see cref="IAsyncInitable"/>.
</param>
<param name="nParameters">
the number of parameters in <paramref name="parameters"/>
</param>
<param name="parameters">
the parameters to use to construct the object
</param>
<param name="ioPriority">
the [I/O priority][io-priority] of the operation
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='IAsyncInitable.DoInitAsync(int,GISharp.Lib.Gio.AsyncReadyCallback?,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Starts asynchronous initialization of the object implementing the
interface. This must be done before any real use of the object after
initial construction. If the object also implements <see cref="IInitable"/> you can
optionally call <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/> instead.
</summary>
<remarks>
<para>
This method is intended for language bindings. If writing in C,
g_async_initable_new_async() should typically be used instead.
</para>
<para>
When the initialization is finished, <paramref name="callback"/> will be called. You can
then call <see cref="IAsyncInitable.DoInitFinish(GISharp.Lib.Gio.IAsyncResult)"/> to get the result of the
initialization.
</para>
<para>
Implementations may also support cancellation. If <paramref name="cancellable"/> is not
<c>null</c>, then initialization can be cancelled by triggering the cancellable
object from another thread. If the operation was cancelled, the error
<see cref="IOErrorEnum.Cancelled"/> will be returned. If <paramref name="cancellable"/> is not <c>null</c>, and
the object doesn't support cancellable initialization, the error
<see cref="IOErrorEnum.NotSupported"/> will be returned.
</para>
<para>
As with <see cref="IInitable"/>, if the object is not initialized, or initialization
returns with an error, then all operations on the object except
g_object_ref() and g_object_unref() are considered to be invalid, and
have undefined behaviour. They will often fail with g_critical() or
g_warning(), but this must not be relied on.
</para>
<para>
Callers should not assume that a class which implements <see cref="IAsyncInitable"/> can
be initialized multiple times; for more information, see <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/>.
If a class explicitly supports being initialized multiple times,
implementation requires yielding all subsequent calls to init_async() on the
results of the first call.
</para>
<para>
For classes that also support the <see cref="IInitable"/> interface, the default
implementation of this method will run the <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/> function
in a thread, so if you want to support asynchronous initialization via
threads, just implement the <see cref="IAsyncInitable"/> interface without overriding
any interface methods.
</para>
</remarks>
<param name="ioPriority">
the [I/O priority][io-priority] of the operation
</param>
<param name="callback">
a <see cref="AsyncReadyCallback"/> to call when the request is satisfied
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='IAsyncInitable.DoInitFinish(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Finishes asynchronous initialization and returns the result.
See <see cref="AsyncInitable.InitAsync(GISharp.Lib.Gio.IAsyncInitable,int,GISharp.Lib.Gio.Cancellable)"/>.
</summary>
<param name="res">
a <see cref="IAsyncResult"/>.
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='IAsyncInitable'>
<summary>
This is the asynchronous version of <see cref="IInitable"/>; it behaves the same
in all ways except that initialization is asynchronous. For more details
see the descriptions on <see cref="IInitable"/>.
</summary>
<remarks>
<para>
A class may implement both the <see cref="IInitable"/> and <see cref="IAsyncInitable"/> interfaces.
</para>
<para>
Users of objects implementing this are not intended to use the interface
method directly; instead it will be used automatically in various ways.
For C applications you generally just call g_async_initable_new_async()
directly, or indirectly via a foo_thing_new_async() wrapper. This will call
<see cref="AsyncInitable.InitAsync(GISharp.Lib.Gio.IAsyncInitable,int,GISharp.Lib.Gio.Cancellable)"/> under the cover, calling back with <c>null</c> and
a set %GError on failure.
</para>
<para>
A typical implementation might look something like this:
</para>
<para>
|[&lt;!-- language="C" --&gt;
enum {
   NOT_INITIALIZED,
   INITIALIZING,
   INITIALIZED
};
</para>
<para>
static void
_foo_ready_cb (Foo *self)
{
  GList *l;
</para>
<para>
  self-&gt;priv-&gt;state = INITIALIZED;
</para>
<para>
  for (l = self-&gt;priv-&gt;init_results; l != NULL; l = l-&gt;next)
    {
      GTask *task = l-&gt;data;
</para>
<para>
      if (self-&gt;priv-&gt;success)
        g_task_return_boolean (task, TRUE);
      else
        g_task_return_new_error (task, ...);
      g_object_unref (task);
    }
</para>
<para>
  g_list_free (self-&gt;priv-&gt;init_results);
  self-&gt;priv-&gt;init_results = NULL;
}
</para>
<para>
static void
foo_init_async (GAsyncInitable       *initable,
                int                   io_priority,
                GCancellable         *cancellable,
                GAsyncReadyCallback   callback,
                gpointer              user_data)
{
  Foo *self = FOO (initable);
  GTask *task;
</para>
<para>
  task = g_task_new (initable, cancellable, callback, user_data);
  g_task_set_name (task, G_STRFUNC);
</para>
<para>
  switch (self-&gt;priv-&gt;state)
    {
      case NOT_INITIALIZED:
        _foo_get_ready (self);
        self-&gt;priv-&gt;init_results = g_list_append (self-&gt;priv-&gt;init_results,
                                                  task);
        self-&gt;priv-&gt;state = INITIALIZING;
        break;
      case INITIALIZING:
        self-&gt;priv-&gt;init_results = g_list_append (self-&gt;priv-&gt;init_results,
                                                  task);
        break;
      case INITIALIZED:
        if (!self-&gt;priv-&gt;success)
          g_task_return_new_error (task, ...);
        else
          g_task_return_boolean (task, TRUE);
        g_object_unref (task);
        break;
    }
}
</para>
<para>
static gboolean
foo_init_finish (GAsyncInitable       *initable,
                 GAsyncResult         *result,
                 GError              **error)
{
  g_return_val_if_fail (g_task_is_valid (result, initable), FALSE);
</para>
<para>
  return g_task_propagate_boolean (G_TASK (result), error);
}
</para>
<para>
static void
foo_async_initable_iface_init (gpointer g_iface,
                               gpointer data)
{
  GAsyncInitableIface *iface = g_iface;
</para>
<para>
  iface-&gt;init_async = foo_init_async;
  iface-&gt;init_finish = foo_init_finish;
}
]|
</para>
</remarks>
</member>

<member name='AsyncInitable.InitAsync(GISharp.Lib.Gio.IAsyncInitable,int,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Starts asynchronous initialization of the object implementing the
interface. This must be done before any real use of the object after
initial construction. If the object also implements <see cref="IInitable"/> you can
optionally call <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/> instead.
</summary>
<remarks>
<para>
Implementations may also support cancellation. If <paramref name="cancellable"/> is not
<c>null</c>, then initialization can be cancelled by triggering the cancellable
object from another thread. If the operation was cancelled, the error
<see cref="IOErrorEnum.Cancelled"/> will be returned. If <paramref name="cancellable"/> is not <c>null</c>, and
the object doesn't support cancellable initialization, the error
<see cref="IOErrorEnum.NotSupported"/> will be returned.
</para>
<para>
As with <see cref="IInitable"/>, if the object is not initialized, or initialization
returns with an error, then all operations on the object except
g_object_ref() and g_object_unref() are considered to be invalid, and
have undefined behaviour. They will often fail with g_critical() or
g_warning(), but this must not be relied on.
</para>
<para>
Callers should not assume that a class which implements <see cref="IAsyncInitable"/> can
be initialized multiple times; for more information, see <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/>.
If a class explicitly supports being initialized multiple times,
implementation requires yielding all subsequent calls to init_async() on the
results of the first call.
</para>
<para>
For classes that also support the <see cref="IInitable"/> interface, the default
implementation of this method will run the <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/> function
in a thread, so if you want to support asynchronous initialization via
threads, just implement the <see cref="IAsyncInitable"/> interface without overriding
any interface methods.
</para>
</remarks>
<param name="initable">
a <see cref="IAsyncInitable"/>.
</param>
<param name="ioPriority">
the [I/O priority][io-priority] of the operation
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

</declaration>
