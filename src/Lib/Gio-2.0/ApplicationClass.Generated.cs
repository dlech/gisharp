// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='ApplicationClass']/*" />
    [GISharp.Runtime.SinceAttribute("2.28")]
    public unsafe partial class ApplicationClass : GISharp.Lib.GObject.ObjectClass
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.ParentClass']/*" />
            internal readonly GISharp.Lib.GObject.ObjectClass.UnmanagedStruct ParentClass;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Startup']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, void> Startup;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Activate']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, void> Activate;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Open']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Lib.Gio.File.UnmanagedStruct**, int, byte*, void> Open;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.CommandLine']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Lib.Gio.ApplicationCommandLine.UnmanagedStruct*, int> CommandLine;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.LocalCommandLine']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, byte***, int*, GISharp.Runtime.Boolean> LocalCommandLine;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.BeforeEmit']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Lib.GLib.Variant.UnmanagedStruct*, void> BeforeEmit;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.AfterEmit']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Lib.GLib.Variant.UnmanagedStruct*, void> AfterEmit;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.AddPlatformData']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Lib.GLib.VariantBuilder.UnmanagedStruct*, void> AddPlatformData;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.QuitMainloop']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, void> QuitMainloop;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.RunMainloop']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, void> RunMainloop;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Shutdown']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, void> Shutdown;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.DbusRegister']/*" />
            public readonly System.IntPtr DbusRegister;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.DbusUnregister']/*" />
            public readonly System.IntPtr DbusUnregister;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.HandleLocalOptions']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Lib.GLib.VariantDict.UnmanagedStruct*, int> HandleLocalOptions;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.NameLost']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.Application.UnmanagedStruct*, GISharp.Runtime.Boolean> NameLost;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding0']/*" />
            internal readonly System.IntPtr Padding0;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding1']/*" />
            internal readonly System.IntPtr Padding1;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding2']/*" />
            internal readonly System.IntPtr Padding2;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding3']/*" />
            internal readonly System.IntPtr Padding3;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding4']/*" />
            internal readonly System.IntPtr Padding4;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding5']/*" />
            internal readonly System.IntPtr Padding5;

            /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Padding6']/*" />
            internal readonly System.IntPtr Padding6;
#pragma warning restore CS0169, CS0414, CS0649
        }

        static ApplicationClass()
        {
            int startupOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Startup));
            RegisterVirtualMethod(startupOffset, StartupMarshal.Create);
            int activateOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Activate));
            RegisterVirtualMethod(activateOffset, ActivateMarshal.Create);
            int openOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Open));
            RegisterVirtualMethod(openOffset, OpenMarshal.Create);
            int commandLineOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.CommandLine));
            RegisterVirtualMethod(commandLineOffset, CommandLineMarshal.Create);
            int localCommandLineOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.LocalCommandLine));
            RegisterVirtualMethod(localCommandLineOffset, TryLocalCommandLineMarshal.Create);
            int beforeEmitOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.BeforeEmit));
            RegisterVirtualMethod(beforeEmitOffset, BeforeEmitMarshal.Create);
            int afterEmitOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.AfterEmit));
            RegisterVirtualMethod(afterEmitOffset, AfterEmitMarshal.Create);
            int addPlatformDataOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.AddPlatformData));
            RegisterVirtualMethod(addPlatformDataOffset, AddPlatformDataMarshal.Create);
            int quitMainloopOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.QuitMainloop));
            RegisterVirtualMethod(quitMainloopOffset, QuitMainloopMarshal.Create);
            int runMainloopOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.RunMainloop));
            RegisterVirtualMethod(runMainloopOffset, RunMainloopMarshal.Create);
            int shutdownOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Shutdown));
            RegisterVirtualMethod(shutdownOffset, ShutdownMarshal.Create);
            int handleLocalOptionsOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.HandleLocalOptions));
            RegisterVirtualMethod(handleLocalOptionsOffset, HandleLocalOptionsMarshal.Create);
            int nameLostOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.NameLost));
            RegisterVirtualMethod(nameLostOffset, NameLostMarshal.Create);
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_Startup']/*" />
        public delegate void _Startup();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedStartup(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application);

        /// <summary>
        /// Class for marshalling <see cref="_Startup"/> methods.
        /// </summary>
        public static unsafe class StartupMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedStartup Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedStartup(GISharp.Lib.Gio.Application.UnmanagedStruct* application_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var doStartup = (_Startup)methodInfo.CreateDelegate(typeof(_Startup), application);
                        doStartup();
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedStartup;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_Activate']/*" />
        public delegate void _Activate();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedActivate(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application);

        /// <summary>
        /// Class for marshalling <see cref="_Activate"/> methods.
        /// </summary>
        public static unsafe class ActivateMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedActivate Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedActivate(GISharp.Lib.Gio.Application.UnmanagedStruct* application_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var doActivate = (_Activate)methodInfo.CreateDelegate(typeof(_Activate), application);
                        doActivate();
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedActivate;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_Open']/*" />
        public delegate void _Open(GISharp.Runtime.UnownedCPtrArray<GISharp.Lib.Gio.IFile> files, GISharp.Runtime.UnownedUtf8 hint);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedOpen(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <array length="2" zero-terminated="0" type="GFile**" is-pointer="1">
*   <type name="File" type="GFile*" is-pointer="1" />
* </array> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.File.UnmanagedStruct** files,
/* <type name="gint" type="gint" /> */
/* transfer-ownership:none direction:in */
int nFiles,
/* <type name="utf8" type="const gchar*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
byte* hint);

        /// <summary>
        /// Class for marshalling <see cref="_Open"/> methods.
        /// </summary>
        public static unsafe class OpenMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedOpen Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedOpen(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, GISharp.Lib.Gio.File.UnmanagedStruct** files_, int nFiles_, byte* hint_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var files = new GISharp.Runtime.UnownedCPtrArray<GISharp.Lib.Gio.IFile>(files_, (int)nFiles_);
                        var hint = new GISharp.Runtime.UnownedUtf8(hint_);
                        var doOpen = (_Open)methodInfo.CreateDelegate(typeof(_Open), application);
                        doOpen(files, hint);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedOpen;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_CommandLine']/*" />
        public delegate int _CommandLine(GISharp.Lib.Gio.ApplicationCommandLine commandLine);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="int" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate int UnmanagedCommandLine(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <type name="ApplicationCommandLine" type="GApplicationCommandLine*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.ApplicationCommandLine.UnmanagedStruct* commandLine);

        /// <summary>
        /// Class for marshalling <see cref="_CommandLine"/> methods.
        /// </summary>
        public static unsafe class CommandLineMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedCommandLine Create(System.Reflection.MethodInfo methodInfo)
            {
                int unmanagedCommandLine(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, GISharp.Lib.Gio.ApplicationCommandLine.UnmanagedStruct* commandLine_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var commandLine = GISharp.Lib.Gio.ApplicationCommandLine.GetInstance<GISharp.Lib.Gio.ApplicationCommandLine>((System.IntPtr)commandLine_, GISharp.Runtime.Transfer.None)!;
                        var doCommandLine = (_CommandLine)methodInfo.CreateDelegate(typeof(_CommandLine), application);
                        var ret = doCommandLine(commandLine);
                        var ret_ = (int)ret;
                        return ret_;
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }

                    return default(int);
                }

                return unmanagedCommandLine;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_TryLocalCommandLine']/*" />
        public delegate bool _TryLocalCommandLine(ref GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8> arguments, out int exitStatus);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate GISharp.Runtime.Boolean UnmanagedTryLocalCommandLine(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <array type="gchar***" zero-terminated="1" is-pointer="1">
*   <type name="utf8" type="gchar**" is-pointer="1" />
* </array> */
/* direction:inout caller-allocates:0 transfer-ownership:full */
byte*** arguments,
/* <type name="gint" type="int*" /> */
/* direction:out caller-allocates:0 transfer-ownership:full */
int* exitStatus);

        /// <summary>
        /// Class for marshalling <see cref="_TryLocalCommandLine"/> methods.
        /// </summary>
        public static unsafe class TryLocalCommandLineMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedTryLocalCommandLine Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Runtime.Boolean unmanagedTryLocalCommandLine(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, byte*** arguments_, int* exitStatus_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var arguments = new GISharp.Lib.GLib.Strv<GISharp.Runtime.Utf8>((System.IntPtr)arguments_, -1, GISharp.Runtime.Transfer.Full);
                        var doTryLocalCommandLine = (_TryLocalCommandLine)methodInfo.CreateDelegate(typeof(_TryLocalCommandLine), application);
                        var ret = doTryLocalCommandLine(ref arguments,out var exitStatus);
                        *arguments_ = (byte**)arguments.Take();
                        *exitStatus_ = (int)exitStatus;
                        var ret_ = GISharp.Runtime.BooleanExtensions.ToBoolean(ret);
                        return ret_;
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }

                    return default(GISharp.Runtime.Boolean);
                }

                return unmanagedTryLocalCommandLine;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_BeforeEmit']/*" />
        public delegate void _BeforeEmit(GISharp.Lib.GLib.Variant platformData);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedBeforeEmit(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <type name="GLib.Variant" type="GVariant*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GLib.Variant.UnmanagedStruct* platformData);

        /// <summary>
        /// Class for marshalling <see cref="_BeforeEmit"/> methods.
        /// </summary>
        public static unsafe class BeforeEmitMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedBeforeEmit Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedBeforeEmit(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, GISharp.Lib.GLib.Variant.UnmanagedStruct* platformData_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var platformData = GISharp.Lib.GLib.Variant.GetInstance<GISharp.Lib.GLib.Variant>((System.IntPtr)platformData_, GISharp.Runtime.Transfer.None)!;
                        var doBeforeEmit = (_BeforeEmit)methodInfo.CreateDelegate(typeof(_BeforeEmit), application);
                        doBeforeEmit(platformData);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedBeforeEmit;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_AfterEmit']/*" />
        public delegate void _AfterEmit(GISharp.Lib.GLib.Variant platformData);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedAfterEmit(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <type name="GLib.Variant" type="GVariant*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GLib.Variant.UnmanagedStruct* platformData);

        /// <summary>
        /// Class for marshalling <see cref="_AfterEmit"/> methods.
        /// </summary>
        public static unsafe class AfterEmitMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedAfterEmit Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedAfterEmit(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, GISharp.Lib.GLib.Variant.UnmanagedStruct* platformData_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var platformData = GISharp.Lib.GLib.Variant.GetInstance<GISharp.Lib.GLib.Variant>((System.IntPtr)platformData_, GISharp.Runtime.Transfer.None)!;
                        var doAfterEmit = (_AfterEmit)methodInfo.CreateDelegate(typeof(_AfterEmit), application);
                        doAfterEmit(platformData);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedAfterEmit;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_AddPlatformData']/*" />
        public delegate void _AddPlatformData(GISharp.Lib.GLib.VariantBuilder builder);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedAddPlatformData(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <type name="GLib.VariantBuilder" type="GVariantBuilder*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GLib.VariantBuilder.UnmanagedStruct* builder);

        /// <summary>
        /// Class for marshalling <see cref="_AddPlatformData"/> methods.
        /// </summary>
        public static unsafe class AddPlatformDataMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedAddPlatformData Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedAddPlatformData(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, GISharp.Lib.GLib.VariantBuilder.UnmanagedStruct* builder_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var builder = GISharp.Lib.GLib.VariantBuilder.GetInstance<GISharp.Lib.GLib.VariantBuilder>((System.IntPtr)builder_, GISharp.Runtime.Transfer.None)!;
                        var doAddPlatformData = (_AddPlatformData)methodInfo.CreateDelegate(typeof(_AddPlatformData), application);
                        doAddPlatformData(builder);
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedAddPlatformData;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_QuitMainloop']/*" />
        public delegate void _QuitMainloop();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedQuitMainloop(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application);

        /// <summary>
        /// Class for marshalling <see cref="_QuitMainloop"/> methods.
        /// </summary>
        public static unsafe class QuitMainloopMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedQuitMainloop Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedQuitMainloop(GISharp.Lib.Gio.Application.UnmanagedStruct* application_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var doQuitMainloop = (_QuitMainloop)methodInfo.CreateDelegate(typeof(_QuitMainloop), application);
                        doQuitMainloop();
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedQuitMainloop;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_RunMainloop']/*" />
        public delegate void _RunMainloop();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedRunMainloop(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application);

        /// <summary>
        /// Class for marshalling <see cref="_RunMainloop"/> methods.
        /// </summary>
        public static unsafe class RunMainloopMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedRunMainloop Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedRunMainloop(GISharp.Lib.Gio.Application.UnmanagedStruct* application_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var doRunMainloop = (_RunMainloop)methodInfo.CreateDelegate(typeof(_RunMainloop), application);
                        doRunMainloop();
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedRunMainloop;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_Shutdown']/*" />
        public delegate void _Shutdown();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedShutdown(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application);

        /// <summary>
        /// Class for marshalling <see cref="_Shutdown"/> methods.
        /// </summary>
        public static unsafe class ShutdownMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedShutdown Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedShutdown(GISharp.Lib.Gio.Application.UnmanagedStruct* application_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var doShutdown = (_Shutdown)methodInfo.CreateDelegate(typeof(_Shutdown), application);
                        doShutdown();
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }
                }

                return unmanagedShutdown;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_HandleLocalOptions']/*" />
        public delegate int _HandleLocalOptions(GISharp.Lib.GLib.VariantDict options);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate int UnmanagedHandleLocalOptions(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application,
/* <type name="GLib.VariantDict" type="GVariantDict*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GLib.VariantDict.UnmanagedStruct* options);

        /// <summary>
        /// Class for marshalling <see cref="_HandleLocalOptions"/> methods.
        /// </summary>
        public static unsafe class HandleLocalOptionsMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedHandleLocalOptions Create(System.Reflection.MethodInfo methodInfo)
            {
                int unmanagedHandleLocalOptions(GISharp.Lib.Gio.Application.UnmanagedStruct* application_, GISharp.Lib.GLib.VariantDict.UnmanagedStruct* options_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var options = GISharp.Lib.GLib.VariantDict.GetInstance<GISharp.Lib.GLib.VariantDict>((System.IntPtr)options_, GISharp.Runtime.Transfer.None)!;
                        var doHandleLocalOptions = (_HandleLocalOptions)methodInfo.CreateDelegate(typeof(_HandleLocalOptions), application);
                        var ret = doHandleLocalOptions(options);
                        var ret_ = (int)ret;
                        return ret_;
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }

                    return default(int);
                }

                return unmanagedHandleLocalOptions;
            }
        }

        /// <include file="ApplicationClass.xmldoc" path="declaration/member[@name='_NameLost']/*" />
        public delegate bool _NameLost();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate GISharp.Runtime.Boolean UnmanagedNameLost(
/* <type name="Application" type="GApplication*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.Application.UnmanagedStruct* application);

        /// <summary>
        /// Class for marshalling <see cref="_NameLost"/> methods.
        /// </summary>
        public static unsafe class NameLostMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedNameLost Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Runtime.Boolean unmanagedNameLost(GISharp.Lib.Gio.Application.UnmanagedStruct* application_)
                {
                    try
                    {
                        var application = GISharp.Lib.Gio.Application.GetInstance<GISharp.Lib.Gio.Application>((System.IntPtr)application_, GISharp.Runtime.Transfer.None)!;
                        var doNameLost = (_NameLost)methodInfo.CreateDelegate(typeof(_NameLost), application);
                        var ret = doNameLost();
                        var ret_ = GISharp.Runtime.BooleanExtensions.ToBoolean(ret);
                        return ret_;
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Runtime.GMarshal.PushUnhandledException(ex);
                    }

                    return default(GISharp.Runtime.Boolean);
                }

                return unmanagedNameLost;
            }
        }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public ApplicationClass(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }
    }
}