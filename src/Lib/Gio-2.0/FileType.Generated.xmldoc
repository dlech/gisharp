<declaration>

<member name='FileType.Unknown'>
<summary>
File's type is unknown.
</summary>
</member>

<member name='FileType.Regular'>
<summary>
File handle represents a regular file.
</summary>
</member>

<member name='FileType.Directory'>
<summary>
File handle represents a directory.
</summary>
</member>

<member name='FileType.SymbolicLink'>
<summary>
File handle represents a symbolic link
   (Unix systems).
</summary>
</member>

<member name='FileType.Special'>
<summary>
File is a "special" file, such as a socket, fifo,
   block device, or character device.
</summary>
</member>

<member name='FileType.Shortcut'>
<summary>
File is a shortcut (Windows systems).
</summary>
</member>

<member name='FileType.Mountable'>
<summary>
File is a mountable location.
</summary>
</member>

<member name='FileType'>
<summary>
Indicates the file's on-disk type.
</summary>
<remarks>
On Windows systems a file will never have <see cref="FileType.SymbolicLink"/> type;
use <see cref="FileInfo"/> and %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK to determine
whether a file is a symlink or not. This is due to the fact that NTFS does
not have a single filesystem object type for symbolic links - it has
files that symlink to files, and directories that symlink to directories.
<see cref="FileType"/> enumeration cannot precisely represent this important distinction,
which is why all Windows symlinks will continue to be reported as
<see cref="FileType.Regular"/> or <see cref="FileType.Directory"/>.
</remarks>
</member>

</declaration>
