<declaration>

<member name='ApplicationFlags.FlagsNone'>
<summary>
Default. Deprecated in 2.74, use
  <see cref="ApplicationFlags.DefaultFlags"/> instead
</summary>
</member>

<member name='ApplicationFlags.DefaultFlags'>
<summary>
Default flags.
</summary>
</member>

<member name='ApplicationFlags.IsService'>
<summary>
Run as a service. In this mode, registration
     fails if the service is already running, and the application
     will initially wait up to 10 seconds for an initial activation
     message to arrive.
</summary>
</member>

<member name='ApplicationFlags.IsLauncher'>
<summary>
Don't try to become the primary instance.
</summary>
</member>

<member name='ApplicationFlags.HandlesOpen'>
<summary>
This application handles opening files (in
    the primary instance). Note that this flag only affects the default
    implementation of local_command_line(), and has no effect if
    <see cref="ApplicationFlags.HandlesCommandLine"/> is given.
    See <see cref="Application.Run(GISharp.Runtime.UnownedCPtrArray{GISharp.Runtime.Filename})"/> for details.
</summary>
</member>

<member name='ApplicationFlags.HandlesCommandLine'>
<summary>
This application handles command line
    arguments (in the primary instance). Note that this flag only affect
    the default implementation of local_command_line().
    See <see cref="Application.Run(GISharp.Runtime.UnownedCPtrArray{GISharp.Runtime.Filename})"/> for details.
</summary>
</member>

<member name='ApplicationFlags.SendEnvironment'>
<summary>
Send the environment of the
    launching process to the primary instance. Set this flag if your
    application is expected to behave differently depending on certain
    environment variables. For instance, an editor might be expected
    to use the `GIT_COMMITTER_NAME` environment variable
    when editing a git commit message. The environment is available
    to the <see cref="Application"/>::command-line signal handler, via
    <see cref="ApplicationCommandLine.GetEnvironmentVariable(GISharp.Runtime.Filename)"/>.
</summary>
</member>

<member name='ApplicationFlags.NonUnique'>
<summary>
Make no attempts to do any of the typical
    single-instance application negotiation, even if the application
    ID is given.  The application neither attempts to become the
    owner of the application ID nor does it check if an existing
    owner already exists.  Everything occurs in the local process.
</summary>
</member>

<member name='ApplicationFlags.CanOverrideAppId'>
<summary>
Allow users to override the
    application ID from the command line with `--gapplication-app-id`.
</summary>
</member>

<member name='ApplicationFlags.AllowReplacement'>
<summary>
Allow another instance to take over
    the bus name.
</summary>
</member>

<member name='ApplicationFlags.Replace'>
<summary>
Take over from another instance. This flag is
    usually set by passing `--gapplication-replace` on the commandline.
</summary>
</member>

<member name='ApplicationFlags'>
<summary>
Flags used to define the behaviour of a <see cref="Application"/>.
</summary>
</member>

</declaration>
