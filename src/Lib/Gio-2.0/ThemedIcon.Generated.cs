// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon']/*" />
    [GISharp.Runtime.GTypeAttribute("GThemedIcon", IsProxyForUnmanagedType = true)]
    [GISharp.Runtime.GTypeStructAttribute(typeof(ThemedIconClass))]
    public unsafe partial class ThemedIcon : GISharp.Lib.GObject.Object, GISharp.Lib.Gio.IIcon
    {
        private static readonly GISharp.Runtime.GType _GType = g_themed_icon_get_type();

        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
        }

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.Name']/*" />
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [GISharp.Runtime.GPropertyAttribute("name", Construct = GISharp.Runtime.GPropertyConstruct.Only)]
        public GISharp.Runtime.Utf8? Name { set => SetProperty("name", value); }

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.Names_']/*" />
        [GISharp.Runtime.GPropertyAttribute("names", Construct = GISharp.Runtime.GPropertyConstruct.Only)]
        public GISharp.Runtime.CPtrArray? Names_ { get => (GISharp.Runtime.CPtrArray?)GetProperty("names")!; set => SetProperty("names", value); }

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.UseDefaultFallbacks']/*" />
        [GISharp.Runtime.GPropertyAttribute("use-default-fallbacks", Construct = GISharp.Runtime.GPropertyConstruct.Only)]
        public bool UseDefaultFallbacks { get => (bool)GetProperty("use-default-fallbacks")!; set => SetProperty("use-default-fallbacks", value); }

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.Names']/*" />
        public GISharp.Runtime.UnownedZeroTerminatedCPtrArray<GISharp.Runtime.Utf8> Names { get => GetNames(); }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public ThemedIcon(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }

        /// <summary>
        /// Creates a new themed icon for @iconname.
        /// </summary>
        /// <param name="iconname">
        /// a string containing an icon name.
        /// </param>
        /// <returns>
        /// a new #GThemedIcon.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="ThemedIcon" type="GIcon*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* g_themed_icon_new(
        /* <type name="utf8" type="const char*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* iconname);
        static partial void CheckNewArgs(GISharp.Runtime.UnownedUtf8 iconname);

        static GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* New(GISharp.Runtime.UnownedUtf8 iconname)
        {
            CheckNewArgs(iconname);
            var iconname_ = (byte*)iconname.UnsafeHandle;
            var ret_ = g_themed_icon_new(iconname_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            return ret_;
        }

        /// <summary>
        /// Creates a new themed icon for @iconnames.
        /// </summary>
        /// <param name="iconnames">
        /// an array of strings containing icon names.
        /// </param>
        /// <param name="len">
        /// the length of the @iconnames array, or -1 if @iconnames is
        ///     %NULL-terminated
        /// </param>
        /// <returns>
        /// a new #GThemedIcon
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="ThemedIcon" type="GIcon*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* g_themed_icon_new_from_names(
        /* <array length="1" zero-terminated="0" type="char**" is-pointer="1">
*   <type name="utf8" type="char*" is-pointer="1" />
* </array> */
        /* transfer-ownership:none direction:in */
        byte** iconnames,
        /* <type name="gint" type="int" /> */
        /* transfer-ownership:none direction:in */
        int len);
        static partial void CheckNewFromNamesArgs(GISharp.Runtime.UnownedCPtrArray<GISharp.Runtime.Utf8> iconnames);

        static GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* NewFromNames(GISharp.Runtime.UnownedCPtrArray<GISharp.Runtime.Utf8> iconnames)
        {
            fixed (System.IntPtr* iconnamesData_ = iconnames)
            {
                CheckNewFromNamesArgs(iconnames);
                var iconnames_ = (byte**)iconnamesData_;
                var len_ = (int)iconnames.Length;
                var ret_ = g_themed_icon_new_from_names(iconnames_,len_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                return ret_;
            }
        }

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.ThemedIcon(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Runtime.Utf8&gt;)']/*" />
        public ThemedIcon(GISharp.Runtime.UnownedCPtrArray<GISharp.Runtime.Utf8> iconnames) : this((System.IntPtr)NewFromNames(iconnames), GISharp.Runtime.Transfer.Full)
        {
        }

        /// <summary>
        /// Creates a new themed icon for @iconname, and all the names
        /// that can be created by shortening @iconname at '-' characters.
        /// </summary>
        /// <remarks>
        /// <para>
        /// In the following example, @icon1 and @icon2 are equivalent:
        /// |[&lt;!-- language="C" --&gt;
        /// const char *names[] = {
        ///   "gnome-dev-cdrom-audio",
        ///   "gnome-dev-cdrom",
        ///   "gnome-dev",
        ///   "gnome"
        /// };
        /// </para>
        /// <para>
        /// icon1 = g_themed_icon_new_from_names (names, 4);
        /// icon2 = g_themed_icon_new_with_default_fallbacks ("gnome-dev-cdrom-audio");
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="iconname">
        /// a string containing an icon name
        /// </param>
        /// <returns>
        /// a new #GThemedIcon.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="ThemedIcon" type="GIcon*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* g_themed_icon_new_with_default_fallbacks(
        /* <type name="utf8" type="const char*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* iconname);
        static partial void CheckNewWithDefaultFallbacksArgs(GISharp.Runtime.UnownedUtf8 iconname);

        static GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* NewWithDefaultFallbacks(GISharp.Runtime.UnownedUtf8 iconname)
        {
            CheckNewWithDefaultFallbacksArgs(iconname);
            var iconname_ = (byte*)iconname.UnsafeHandle;
            var ret_ = g_themed_icon_new_with_default_fallbacks(iconname_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            return ret_;
        }

        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Runtime.GType g_themed_icon_get_type();

        /// <summary>
        /// Append a name to the list of icons from within @icon.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note that doing so invalidates the hash computed by prior calls
        /// to g_icon_hash().
        /// </para>
        /// </remarks>
        /// <param name="icon">
        /// a #GThemedIcon
        /// </param>
        /// <param name="iconname">
        /// name of icon to append to list of icons from within @icon.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_themed_icon_append_name(
        /* <type name="ThemedIcon" type="GThemedIcon*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* icon,
        /* <type name="utf8" type="const char*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* iconname);
        partial void CheckAppendNameArgs(GISharp.Runtime.UnownedUtf8 iconname);

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.AppendName(GISharp.Runtime.UnownedUtf8)']/*" />
        public void AppendName(GISharp.Runtime.UnownedUtf8 iconname)
        {
            CheckAppendNameArgs(iconname);
            var icon_ = (GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct*)UnsafeHandle;
            var iconname_ = (byte*)iconname.UnsafeHandle;
            g_themed_icon_append_name(icon_, iconname_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }

        /// <summary>
        /// Gets the names of icons from within @icon.
        /// </summary>
        /// <param name="icon">
        /// a #GThemedIcon.
        /// </param>
        /// <returns>
        /// a list of icon names.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array type="const gchar* const*" zero-terminated="1" is-pointer="1">
*   <type name="utf8" is-pointer="1" />
* </array> */
        /* transfer-ownership:none direction:in */
        private static extern byte** g_themed_icon_get_names(
        /* <type name="ThemedIcon" type="GThemedIcon*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* icon);
        partial void CheckGetNamesArgs();

        private GISharp.Runtime.UnownedZeroTerminatedCPtrArray<GISharp.Runtime.Utf8> GetNames()
        {
            CheckGetNamesArgs();
            var icon_ = (GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_themed_icon_get_names(icon_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = new GISharp.Runtime.UnownedZeroTerminatedCPtrArray<GISharp.Runtime.Utf8>(ret_, -1);
            return ret;
        }

        /// <summary>
        /// Prepend a name to the list of icons from within @icon.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note that doing so invalidates the hash computed by prior calls
        /// to g_icon_hash().
        /// </para>
        /// </remarks>
        /// <param name="icon">
        /// a #GThemedIcon
        /// </param>
        /// <param name="iconname">
        /// name of icon to prepend to list of icons from within @icon.
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.18")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_themed_icon_prepend_name(
        /* <type name="ThemedIcon" type="GThemedIcon*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct* icon,
        /* <type name="utf8" type="const char*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* iconname);
        partial void CheckPrependNameArgs(GISharp.Runtime.UnownedUtf8 iconname);

        /// <include file="ThemedIcon.xmldoc" path="declaration/member[@name='ThemedIcon.PrependName(GISharp.Runtime.UnownedUtf8)']/*" />
        [GISharp.Runtime.SinceAttribute("2.18")]
        public void PrependName(GISharp.Runtime.UnownedUtf8 iconname)
        {
            CheckPrependNameArgs(iconname);
            var icon_ = (GISharp.Lib.Gio.ThemedIcon.UnmanagedStruct*)UnsafeHandle;
            var iconname_ = (byte*)iconname.UnsafeHandle;
            g_themed_icon_prepend_name(icon_, iconname_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }

        bool GISharp.Lib.Gio.IIcon.DoEqual(GISharp.Lib.Gio.IIcon? icon2)
        {
            throw new System.NotImplementedException();
        }

        uint GISharp.Lib.Gio.IIcon.DoHash()
        {
            throw new System.NotImplementedException();
        }

        GISharp.Lib.GLib.Variant? GISharp.Lib.Gio.IIcon.DoSerialize()
        {
            throw new System.NotImplementedException();
        }
    }
}