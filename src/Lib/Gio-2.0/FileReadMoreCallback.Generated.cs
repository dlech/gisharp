// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <summary>
    /// When loading the partial contents of a file with g_file_load_partial_contents_async(),
    /// it may become necessary to determine if any more data from the file should be loaded.
    /// A #GFileReadMoreCallback function facilitates this by returning %TRUE if more data
    /// should be read, or %FALSE otherwise.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="gboolean" type="gboolean" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate GISharp.Runtime.Boolean UnmanagedFileReadMoreCallback(
    /* <type name="utf8" type="const char*" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    byte* fileContents,
    /* <type name="gint64" type="goffset" /> */
    /* transfer-ownership:none direction:in */
    long fileSize,
    /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr callbackData);

    /// <include file="FileReadMoreCallback.xmldoc" path="declaration/member[@name='FileReadMoreCallback']/*" />
    public delegate bool FileReadMoreCallback(GISharp.Runtime.UnownedUtf8 fileContents, long fileSize, System.IntPtr callbackData);

    /// <summary>
    /// Class for marshalling <see cref="FileReadMoreCallback"/> methods.
    /// </summary>
    public static unsafe class FileReadMoreCallbackMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="FileReadMoreCallback"/>.
        /// </summary>
        public static GISharp.Lib.Gio.FileReadMoreCallback FromPointer(delegate* unmanaged[Cdecl]<byte*, long, System.IntPtr, GISharp.Runtime.Boolean> callback_, System.IntPtr userData_)
        {
            bool managedCallback(GISharp.Runtime.UnownedUtf8 fileContents, long fileSize, System.IntPtr callbackData)
            {
                var fileContents_ = (byte*)fileContents.UnsafeHandle;
                var fileSize_ = (long)fileSize;
                var callbackData_ = (System.IntPtr)callbackData;
                var ret_ = callback_(fileContents_,fileSize_,callbackData_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
                return ret;
            }

            return managedCallback;
        }
    }
}