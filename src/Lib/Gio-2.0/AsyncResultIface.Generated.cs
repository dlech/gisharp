// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='AsyncResultIface']/*" />
    public sealed unsafe partial class AsyncResultIface : GISharp.Lib.GObject.TypeInterface
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.GIface']/*" />
            public readonly GISharp.Lib.GObject.TypeInterface.UnmanagedStruct GIface;

            /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.GetUserData']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, System.IntPtr> GetUserData;

            /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.GetSourceObject']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, GISharp.Lib.GObject.Object.UnmanagedStruct*> GetSourceObject;

            /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='UnmanagedStruct.IsTagged']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.Gio.AsyncResult.UnmanagedStruct*, System.IntPtr, GISharp.Runtime.Boolean> IsTagged;
#pragma warning restore CS0169, CS0414, CS0649
        }

        static AsyncResultIface()
        {
            int getUserDataOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.GetUserData));
            RegisterVirtualMethod(getUserDataOffset, GetUserDataMarshal.Create);
            int getSourceObjectOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.GetSourceObject));
            RegisterVirtualMethod(getSourceObjectOffset, GetSourceObjectMarshal.Create);
            int isTaggedOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.IsTagged));
            RegisterVirtualMethod(isTaggedOffset, IsTaggedMarshal.Create);
        }

        /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='_GetUserData']/*" />
        public delegate System.IntPtr _GetUserData();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 direction:in */
        public unsafe delegate System.IntPtr UnmanagedGetUserData(
/* <type name="AsyncResult" type="GAsyncResult*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res);

        /// <summary>
        /// Class for marshalling <see cref="_GetUserData"/> methods.
        /// </summary>
        public static unsafe class GetUserDataMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedGetUserData Create(System.Reflection.MethodInfo methodInfo)
            {
                System.IntPtr unmanagedGetUserData(GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res_) { try { var res = (GISharp.Lib.Gio.IAsyncResult)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)res_, GISharp.Runtime.Transfer.None)!; var doGetUserData = (_GetUserData)methodInfo.CreateDelegate(typeof(_GetUserData), res); var ret = doGetUserData(); var ret_ = (System.IntPtr)ret; return ret_; } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } return default(System.IntPtr); }

                return unmanagedGetUserData;
            }
        }

        /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='_GetSourceObject']/*" />
        public delegate GISharp.Lib.GObject.Object? _GetSourceObject();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GObject.Object" type="GObject*" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 direction:in */
        public unsafe delegate GISharp.Lib.GObject.Object.UnmanagedStruct* UnmanagedGetSourceObject(
/* <type name="AsyncResult" type="GAsyncResult*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res);

        /// <summary>
        /// Class for marshalling <see cref="_GetSourceObject"/> methods.
        /// </summary>
        public static unsafe class GetSourceObjectMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedGetSourceObject Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Lib.GObject.Object.UnmanagedStruct* unmanagedGetSourceObject(GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res_) { try { var res = (GISharp.Lib.Gio.IAsyncResult)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)res_, GISharp.Runtime.Transfer.None)!; var doGetSourceObject = (_GetSourceObject)methodInfo.CreateDelegate(typeof(_GetSourceObject), res); var ret = doGetSourceObject(); var ret_ = (GISharp.Lib.GObject.Object.UnmanagedStruct*)(ret?.Take() ?? System.IntPtr.Zero); return ret_; } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } return default(GISharp.Lib.GObject.Object.UnmanagedStruct*); }

                return unmanagedGetSourceObject;
            }
        }

        /// <include file="AsyncResultIface.xmldoc" path="declaration/member[@name='_IsTagged']/*" />
        public delegate bool _IsTagged(System.IntPtr sourceTag);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate GISharp.Runtime.Boolean UnmanagedIsTagged(
/* <type name="AsyncResult" type="GAsyncResult*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res,
/* <type name="gpointer" type="gpointer" is-pointer="1" /> */
/* transfer-ownership:none nullable:1 allow-none:1 direction:in */
System.IntPtr sourceTag);

        /// <summary>
        /// Class for marshalling <see cref="_IsTagged"/> methods.
        /// </summary>
        public static unsafe class IsTaggedMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedIsTagged Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Runtime.Boolean unmanagedIsTagged(GISharp.Lib.Gio.AsyncResult.UnmanagedStruct* res_, System.IntPtr sourceTag_) { try { var res = (GISharp.Lib.Gio.IAsyncResult)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)res_, GISharp.Runtime.Transfer.None)!; var sourceTag = (System.IntPtr)sourceTag_; var doIsTagged = (_IsTagged)methodInfo.CreateDelegate(typeof(_IsTagged), res); var ret = doIsTagged(sourceTag); var ret_ = GISharp.Runtime.BooleanExtensions.ToBoolean(ret); return ret_; } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } return default(GISharp.Runtime.Boolean); }

                return unmanagedIsTagged;
            }
        }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public AsyncResultIface(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }
    }
}