<declaration>

<member name='UnmanagedStruct.ParentInstance'>
</member>

<member name='UnmanagedStruct.Priv'>
</member>

<member name='ApplicationCommandLine.Arguments_'>
</member>

<member name='ApplicationCommandLine.IsRemote_'>
</member>

<member name='ApplicationCommandLine.Options_'>
</member>

<member name='ApplicationCommandLine.PlatformData_'>
</member>

<member name='ApplicationCommandLine.Arguments'>
<summary>
Gets the list of arguments that was passed on the command line.
</summary>
<remarks>
The strings in the array may contain non-UTF-8 data on UNIX (such as
filenames or arguments given in the system locale) but are always in
UTF-8 on Windows.

If you wish to use the return value with #GOptionContext, you must
use g_option_context_parse_strv().

The return value is <c>null</c>-terminated and should be freed using
g_strfreev().
</remarks>
</member>

<member name='ApplicationCommandLine.Cwd'>
<summary>
Gets the working directory of the command line invocation.
The string may contain non-utf8 data.
</summary>
<remarks>
It is possible that the remote application did not send a working
directory, so this may be <c>null</c>.

The return value should not be modified or freed and is valid for as
long as this instance exists.
</remarks>
</member>

<member name='ApplicationCommandLine.Environment'>
<summary>
Gets the contents of the 'environ' variable of the command line
invocation, as would be returned by g_get_environ(), ie as a
<c>null</c>-terminated list of strings in the form 'NAME=VALUE'.
The strings may contain non-utf8 data.
</summary>
<remarks>
The remote application usually does not send an environment.  Use
<see cref="ApplicationFlags.SendEnvironment"/> to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as this instance exists.

See <see cref="ApplicationCommandLine.GetEnvironmentVariable(GISharp.Lib.GLib.Filename)"/> if you are only interested
in the value of a single environment variable.
</remarks>
</member>

<member name='ApplicationCommandLine.ExitStatus'>
<summary>
Gets the exit status of this instance.  See
<see cref="ApplicationCommandLine.SetExitStatus(System.Int32)"/> for more information.
</summary>
</member>

<member name='ApplicationCommandLine.IsRemote'>
<summary>
Determines if this instance represents a remote invocation.
</summary>
</member>

<member name='ApplicationCommandLine.Options'>
<summary>
Gets the options there were passed to g_application_command_line().
</summary>
<remarks>
If you did not override local_command_line() then these are the same
options that were parsed according to the #GOptionEntrys added to the
application with <see cref="Application.AddMainOptionEntries(System.ReadOnlySpan{GISharp.Lib.GLib.OptionEntry})"/> and possibly
modified from your GApplication::handle-local-options handler.

If no options were sent then an empty dictionary is returned so that
you don't need to check for <c>null</c>.
</remarks>
</member>

<member name='ApplicationCommandLine.PlatformData'>
<summary>
Gets the platform data associated with the invocation of this instance.
</summary>
<remarks>
This is a #GVariant dictionary containing information about the
context in which the invocation occurred.  It typically contains
information like the current working directory and the startup
notification ID.

For local invocation, it will be <c>null</c>.
</remarks>
</member>

<member name='ApplicationCommandLine.Stdin'>
<summary>
Gets the stdin of the invoking process.
</summary>
<remarks>
The <see cref="InputStream"/> can be used to read data passed to the standard
input of the invoking process.
This doesn't work on all platforms.  Presently, it is only available
on UNIX when using a DBus daemon capable of passing file descriptors.
If stdin is not available then <c>null</c> will be returned.  In the
future, support may be expanded to other platforms.

You must only call this function once per commandline invocation.
</remarks>
</member>

<member name='ApplicationCommandLine.CreateFileForArg(GISharp.Lib.GLib.Filename)'>
<summary>
Creates a <see cref="IFile"/> corresponding to a filename that was given as part
of the invocation of this instance.
</summary>
<remarks>
This differs from <see cref="File.NewForCommandlineArg(GISharp.Lib.GLib.Filename)"/> in that it
resolves relative pathnames using the current working directory of
the invoking process rather than the local process.
</remarks>
<param name="arg">
an argument from this instance
</param>
<returns>
a new <see cref="IFile"/>
</returns>
</member>

<member name='ApplicationCommandLine.GetEnvironmentVariable(GISharp.Lib.GLib.Filename)'>
<summary>
Gets the value of a particular environment variable of the command
line invocation, as would be returned by g_getenv().  The strings may
contain non-utf8 data.
</summary>
<remarks>
The remote application usually does not send an environment.  Use
<see cref="ApplicationFlags.SendEnvironment"/> to affect that.  Even with this flag
set it is possible that the environment is still not available (due
to invocation messages from other applications).

The return value should not be modified or freed and is valid for as
long as this instance exists.
</remarks>
<param name="name">
the environment variable to get
</param>
<returns>
the value of the variable, or <c>null</c> if unset or unsent
</returns>
</member>

<member name='ApplicationCommandLine.DoGetStdin()'>
<summary>
Gets the stdin of the invoking process.
</summary>
<remarks>
The <see cref="InputStream"/> can be used to read data passed to the standard
input of the invoking process.
This doesn't work on all platforms.  Presently, it is only available
on UNIX when using a DBus daemon capable of passing file descriptors.
If stdin is not available then <c>null</c> will be returned.  In the
future, support may be expanded to other platforms.

You must only call this function once per commandline invocation.
</remarks>
<returns>
a <see cref="InputStream"/> for stdin
</returns>
</member>

<member name='ApplicationCommandLine.DoPrintLiteral(GISharp.Lib.GLib.UnownedUtf8)'>
</member>

<member name='ApplicationCommandLine.DoPrinterrLiteral(GISharp.Lib.GLib.UnownedUtf8)'>
</member>

<member name='ApplicationCommandLine'>
<summary>
<see cref="ApplicationCommandLine"/> represents a command-line invocation of
an application.  It is created by <see cref="Application"/> and emitted
in the <see cref="Application"/>::command-line signal and virtual function.
</summary>
<remarks>
The class contains the list of arguments that the program was invoked
with.  It is also possible to query if the commandline invocation was
local (ie: the current process is running in direct response to the
invocation) or remote (ie: some other process forwarded the
commandline to this process).

The GApplicationCommandLine object can provide the <c>argc</c> and <c>argv</c>
parameters for use with the #GOptionContext command-line parsing API,
with the <see cref="ApplicationCommandLine.GetArguments()"/> function. See
[gapplication-example-cmdline3.c][gapplication-example-cmdline3]
for an example.

The exit status of the originally-invoked process may be set and
messages can be printed to stdout or stderr of that process.  The
lifecycle of the originally-invoked process is tied to the lifecycle
of this object (ie: the process exits when the last reference is
dropped).

The main use for <see cref="ApplicationCommandLine"/> (and the
<see cref="Application"/>::command-line signal) is 'Emacs server' like use cases:
You can set the `EDITOR` environment variable to have e.g. git use
your favourite editor to edit commit messages, and if you already
have an instance of the editor running, the editing will happen
in the running instance, instead of opening a new one. An important
aspect of this use case is that the process that gets started by git
does not return until the editing is done.

Normally, the commandline is completely handled in the
<see cref="Application"/>::command-line handler. The launching instance exits
once the signal handler in the primary instance has returned, and
the return value of the signal handler becomes the exit status
of the launching instance.
|[&lt;!-- language="C" --&gt;
static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  gchar **argv;
  gint argc;
  gint i;

  argv = g_application_command_line_get_arguments (cmdline, &amp;argc);

  g_application_command_line_print (cmdline,
                                    "This text is written back\n"
                                    "to stdout of the caller\n");

  for (i = 0; i &lt; argc; i++)
    g_print ("argument %d: %s\n", i, argv[i]);

  g_strfreev (argv);

  return 0;
}
]|
The complete example can be found here:
[gapplication-example-cmdline.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline.c)

In more complicated cases, the handling of the comandline can be
split between the launcher and the primary instance.
|[&lt;!-- language="C" --&gt;
static gboolean
 test_local_cmdline (GApplication   *application,
                     gchar        ***arguments,
                     gint           *exit_status)
{
  gint i, j;
  gchar **argv;

  argv = *arguments;

  i = 1;
  while (argv[i])
    {
      if (g_str_has_prefix (argv[i], "--local-"))
        {
          g_print ("handling argument %s locally\n", argv[i]);
          g_free (argv[i]);
          for (j = i; argv[j]; j++)
            argv[j] = argv[j + 1];
        }
      else
        {
          g_print ("not handling argument %s locally\n", argv[i]);
          i++;
        }
    }

  *exit_status = 0;

  return FALSE;
}

static void
test_application_class_init (TestApplicationClass *class)
{
  G_APPLICATION_CLASS (class)-&gt;local_command_line = test_local_cmdline;

  ...
}
]|
In this example of split commandline handling, options that start
with `--local-` are handled locally, all other options are passed
to the <see cref="Application"/>::command-line handler which runs in the primary
instance.

The complete example can be found here:
[gapplication-example-cmdline2.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline2.c)

If handling the commandline requires a lot of work, it may
be better to defer it.
|[&lt;!-- language="C" --&gt;
static gboolean
my_cmdline_handler (gpointer data)
{
  GApplicationCommandLine *cmdline = data;

  // do the heavy lifting in an idle

  g_application_command_line_set_exit_status (cmdline, 0);
  g_object_unref (cmdline); // this releases the application

  return G_SOURCE_REMOVE;
}

static int
command_line (GApplication            *application,
              GApplicationCommandLine *cmdline)
{
  // keep the application running until we are done with this commandline
  g_application_hold (application);

  g_object_set_data_full (G_OBJECT (cmdline),
                          "application", application,
                          (GDestroyNotify)g_application_release);

  g_object_ref (cmdline);
  g_idle_add (my_cmdline_handler, cmdline);

  return 0;
}
]|
In this example the commandline is not completely handled before
the <see cref="Application"/>::command-line handler returns. Instead, we keep
a reference to the <see cref="ApplicationCommandLine"/> object and handle it
later (in this example, in an idle). Note that it is necessary to
hold the application until you are done with the commandline.

The complete example can be found here:
[gapplication-example-cmdline3.c](https://git.gnome.org/browse/glib/tree/gio/tests/gapplication-example-cmdline3.c)
</remarks>
</member>

</declaration>
