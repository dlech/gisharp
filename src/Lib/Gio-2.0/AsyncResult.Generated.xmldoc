<declaration>

<member name='IAsyncResult.DoGetSourceObject()'>
<summary>
Gets the source object from a <see cref="IAsyncResult"/>.
</summary>
<returns>
a new reference to the source
   object for the this instance, or <c>null</c> if there is none.
</returns>
</member>

<member name='IAsyncResult.DoGetUserData()'>
<summary>
Gets the user data from a <see cref="IAsyncResult"/>.
</summary>
<returns>
the user data for this instance.
</returns>
</member>

<member name='IAsyncResult.DoIsTagged(System.IntPtr)'>
<summary>
Checks if this instance has the given <paramref name="sourceTag"/> (generally a function
pointer indicating the function this instance was created by).
</summary>
<param name="sourceTag">
an application-defined tag
</param>
<returns>
<c>true</c> if this instance has the indicated <paramref name="sourceTag"/>, <c>false</c> if
  not.
</returns>
</member>

<member name='IAsyncResult'>
<summary>
Provides a base class for implementing asynchronous function results.
</summary>
<remarks>
<para>
Asynchronous operations are broken up into two separate operations
which are chained together by a <see cref="AsyncReadyCallback"/>. To begin
an asynchronous operation, provide a <see cref="AsyncReadyCallback"/> to the
asynchronous function. This callback will be triggered when the
operation has completed, and must be run in a later iteration of
the [thread-default main context][g-main-context-push-thread-default]
from where the operation was initiated. It will be passed a
<see cref="IAsyncResult"/> instance filled with the details of the operation's
success or failure, the object the asynchronous function was
started for and any error codes returned. The asynchronous callback
function is then expected to call the corresponding "_finish()"
function, passing the object the function was called for, the
<see cref="IAsyncResult"/> instance, and (optionally) an <c>error</c> to grab any
error conditions that may have occurred.
</para>
<para>
The "_finish()" function for an operation takes the generic result
(of type <see cref="IAsyncResult"/>) and returns the specific result that the
operation in question yields (e.g. a #GFileEnumerator for a
"enumerate children" operation). If the result or error status of the
operation is not needed, there is no need to call the "_finish()"
function; GIO will take care of cleaning up the result and error
information after the <see cref="AsyncReadyCallback"/> returns. You can pass
<c>null</c> for the <see cref="AsyncReadyCallback"/> if you don't need to take any
action at all after the operation completes. Applications may also
take a reference to the <see cref="IAsyncResult"/> and call "_finish()" later;
however, the "_finish()" function may be called at most once.
</para>
<para>
Example of a typical asynchronous operation flow:
|[&lt;!-- language="C" --&gt;
void _theoretical_frobnitz_async (Theoretical         *t,
                                  GCancellable        *c,
                                  GAsyncReadyCallback  cb,
                                  gpointer             u);
</para>
<para>
gboolean _theoretical_frobnitz_finish (Theoretical   *t,
                                       GAsyncResult  *res,
                                       GError       **e);
</para>
<para>
static void
frobnitz_result_func (GObject      *source_object,
		 GAsyncResult *res,
		 gpointer      user_data)
{
  gboolean success = FALSE;
</para>
<para>
  success = _theoretical_frobnitz_finish (source_object, res, NULL);
</para>
<para>
  if (success)
    g_printf ("Hurray!\n");
  else
    g_printf ("Uh oh!\n");
</para>
<para>
  ...
</para>
<para>
}
</para>
<para>
int main (int argc, void *argv[])
{
   ...
</para>
<para>
   _theoretical_frobnitz_async (theoretical_data,
                                NULL,
                                frobnitz_result_func,
                                NULL);
</para>
<para>
   ...
}
]|
</para>
<para>
The callback for an asynchronous operation is called only once, and is
always called, even in the case of a cancelled operation. On cancellation
the result is a <see cref="IOErrorEnum.Cancelled"/> error.
</para>
<para>
## I/O Priority # {#io-priority}
</para>
<para>
Many I/O-related asynchronous operations have a priority parameter,
which is used in certain cases to determine the order in which
operations are executed. They are not used to determine system-wide
I/O scheduling. Priorities are integers, with lower numbers indicating
higher priority. It is recommended to choose priorities between
%G_PRIORITY_LOW and %G_PRIORITY_HIGH, with %G_PRIORITY_DEFAULT
as a default.
</para>
</remarks>
</member>

<member name='AsyncResult.GetSourceObject(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Gets the source object from a <see cref="IAsyncResult"/>.
</summary>
<param name="res">
a <see cref="IAsyncResult"/>
</param>
<returns>
a new reference to the source
   object for the <paramref name="res"/>, or <c>null</c> if there is none.
</returns>
</member>

<member name='AsyncResult.GetUserData(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Gets the user data from a <see cref="IAsyncResult"/>.
</summary>
<param name="res">
a <see cref="IAsyncResult"/>.
</param>
<returns>
the user data for <paramref name="res"/>.
</returns>
</member>

<member name='AsyncResult.IsTagged(GISharp.Lib.Gio.IAsyncResult,System.IntPtr)'>
<summary>
Checks if <paramref name="res"/> has the given <paramref name="sourceTag"/> (generally a function
pointer indicating the function <paramref name="res"/> was created by).
</summary>
<param name="res">
a <see cref="IAsyncResult"/>
</param>
<param name="sourceTag">
an application-defined tag
</param>
<returns>
<c>true</c> if <paramref name="res"/> has the indicated <paramref name="sourceTag"/>, <c>false</c> if
  not.
</returns>
</member>

</declaration>
