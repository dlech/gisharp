<declaration>

<member name='Version.CompileTimeBinaryAge'>
<summary>
Like [func<c>getBinaryAge</c>], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
</summary>
</member>

<member name='Version.CompileTimeInterfaceAge'>
<summary>
Like [func<c>getInterfaceAge</c>], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
</summary>
</member>

<member name='Version.majorVersion'>
<summary>
Like [func<c>getMajorVersion</c>], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
</summary>
</member>

<member name='Version.microVersion'>
<summary>
Like [func<c>getMicroVersion</c>], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
</summary>
</member>

<member name='Version.minorVersion'>
<summary>
Like [func<c>getMinorVersion</c>], but from the headers used at
application compile time, rather than from the library linked
against at application run time.
</summary>
</member>

<member name='Version.RunTimeBinaryAge'>
<summary>
Returns the binary age as passed to `libtool`.
</summary>
<remarks>
<para>
If `libtool` means nothing to you, don't worry about it.
</para>
</remarks>
</member>

<member name='Version.RunTimeInterfaceAge'>
<summary>
Returns the interface age as passed to `libtool`.
</summary>
<remarks>
<para>
If `libtool` means nothing to you, don't worry about it.
</para>
</remarks>
</member>

<member name='Version.MajorVersion'>
<summary>
Returns the major version number of the GTK library.
</summary>
<remarks>
<para>
For example, in GTK version 3.1.5 this is 3.
</para>
<para>
This function is in the library, so it represents the GTK library
your code is running against. Contrast with the <see cref="Version.majorVersion"/>
macro, which represents the major version of the GTK headers you
have included when compiling your code.
</para>
</remarks>
</member>

<member name='Version.MicroVersion'>
<summary>
Returns the micro version number of the GTK library.
</summary>
<remarks>
<para>
For example, in GTK version 3.1.5 this is 5.
</para>
<para>
This function is in the library, so it represents the GTK library
your code is are running against. Contrast with the
<see cref="Version.microVersion"/> macro, which represents the micro version of the
GTK headers you have included when compiling your code.
</para>
</remarks>
</member>

<member name='Version.MinorVersion'>
<summary>
Returns the minor version number of the GTK library.
</summary>
<remarks>
<para>
For example, in GTK version 3.1.5 this is 1.
</para>
<para>
This function is in the library, so it represents the GTK library
your code is are running against. Contrast with the
<see cref="Version.minorVersion"/> macro, which represents the minor version of the
GTK headers you have included when compiling your code.
</para>
</remarks>
</member>

<member name='Version.Check(uint,uint,uint)'>
<summary>
Checks that the GTK library in use is compatible with the
given version.
</summary>
<remarks>
<para>
Generally you would pass in the constants <see cref="Version.majorVersion"/>,
<see cref="Version.minorVersion"/>, <see cref="Version.microVersion"/> as the three arguments
to this function; that produces a check that the library in
use is compatible with the version of GTK the application or
module was compiled against.
</para>
<para>
Compatibility is defined by two things: first the version
of the running library is newer than the version
<paramref name="requiredMajor"/>.required_minor.<paramref name="requiredMicro"/>. Second
the running library must be binary compatible with the
version <paramref name="requiredMajor"/>.required_minor.<paramref name="requiredMicro"/>
(same major version.)
</para>
<para>
This function is primarily for GTK modules; the module
can call this function to check that it wasn’t loaded
into an incompatible version of GTK. However, such a
check isn’t completely reliable, since the module may be
linked against an old version of GTK and calling the
old version of <see cref="Version.Check(uint,uint,uint)"/>, but still get loaded
into an application using a newer version of GTK.
</para>
</remarks>
<param name="requiredMajor">
the required major version
</param>
<param name="requiredMinor">
the required minor version
</param>
<param name="requiredMicro">
the required micro version
</param>
<returns>
<c>null</c> if the GTK library is compatible with the
  given version, or a string describing the version mismatch.
  The returned string is owned by GTK and should not be modified
  or freed.
</returns>
</member>

<member name='Version'>
</member>

</declaration>
