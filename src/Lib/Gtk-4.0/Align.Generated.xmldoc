<declaration>

<member name='Align.Fill'>
<summary>
stretch to fill all space if possible, center if
    no meaningful way to stretch
</summary>
</member>

<member name='Align.Start'>
<summary>
snap to left or top side, leaving space on right
    or bottom
</summary>
</member>

<member name='Align.End'>
<summary>
snap to right or bottom side, leaving space on left
    or top
</summary>
</member>

<member name='Align.Center'>
<summary>
center natural width of widget inside the
    allocation
</summary>
</member>

<member name='Align.Baseline'>
<summary>
align the widget according to the baseline. See
    #GtkWidget
</summary>
</member>

<member name='Align'>
<summary>
Controls how a widget deals with extra space in a single (x or y)
dimension.
</summary>
<remarks>
<para>
Alignment only matters if the widget receives a “too large” allocation,
for example if you packed the widget with the #GtkWidget:hexpand
property inside a #GtkBox, then the widget might get extra space.
If you have for example a 16x16 icon inside a 32x32 space, the icon
could be scaled and stretched, it could be centered, or it could be
positioned to one side of the space.
</para>
<para>
Note that in horizontal context <see cref="Align.Start"/> and <see cref="Align.End"/>
are interpreted relative to text direction.
</para>
<para>
<see cref="Align.Baseline"/> support is optional for containers and widgets, and
it is only supported for vertical alignment.  When it's not supported by
a child or a container it is treated as <see cref="Align.Fill"/>.
</para>
</remarks>
</member>

</declaration>
