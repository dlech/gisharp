<declaration>

<member name='AccessibleState.Busy'>
<summary>
A “busy” state. This state has boolean values
</summary>
</member>

<member name='AccessibleState.Checked'>
<summary>
A “checked” state; indicates the current
  state of a [class<c>checkButton</c>]. Value type: [enum<c>accessibleTristate</c>]
</summary>
</member>

<member name='AccessibleState.Disabled'>
<summary>
A “disabled” state; corresponds to the
  [property<c>widget</c>:sensitive] property. It indicates a UI element
  that is perceivable, but not editable or operable. Value type: boolean
</summary>
</member>

<member name='AccessibleState.Expanded'>
<summary>
An “expanded” state; corresponds to the
  [property<c>expander</c>:expanded] property. Value type: boolean
  or undefined
</summary>
</member>

<member name='AccessibleState.Hidden'>
<summary>
A “hidden” state; corresponds to the
  [property<c>widget</c>:visible] property. You can use this state
  explicitly on UI elements that should not be exposed to an assistive
  technology. Value type: boolean
  See also: <see cref="AccessibleState.Disabled"/>
</summary>
</member>

<member name='AccessibleState.Invalid'>
<summary>
An “invalid” state; set when a widget
  is showing an error. Value type: [enum<c>accessibleInvalidState</c>]
</summary>
</member>

<member name='AccessibleState.Pressed'>
<summary>
A “pressed” state; indicates the current
  state of a [class<c>toggleButton</c>]. Value type: [enum<c>accessibleTristate</c>]
  enumeration
</summary>
</member>

<member name='AccessibleState.Selected'>
<summary>
A “selected” state; set when a widget
  is selected. Value type: boolean or undefined
</summary>
</member>

<member name='AccessibleState'>
<summary>
The possible accessible states of a [iface<c>accessible</c>].
</summary>
</member>

<member name='AccessibleStateExtensions.InitValue(GISharp.Lib.Gtk.AccessibleState,GISharp.Lib.GObject.Value)'>
</member>

</declaration>
