<declaration>

<member name='TypeInfo.ArrayFixedSize'>
<summary>
Obtain the fixed array size of the type. The type tag must be a
#GI_TYPE_TAG_ARRAY or -1 will returned.
</summary>
</member>

<member name='TypeInfo.ArrayLength'>
<summary>
Obtain the array length of the type. The type tag must be a
#GI_TYPE_TAG_ARRAY or -1 will returned.
</summary>
</member>

<member name='TypeInfo.ArrayType'>
<summary>
Obtain the array type for this type. See <see cref="ArrayType"/> for a list of
possible values. If the type tag of this type is not array, -1 will be
returned.
</summary>
</member>

<member name='TypeInfo.Interface'>
<summary>
For types which have #GI_TYPE_TAG_INTERFACE such as GObjects and boxed values,
this function returns full information about the referenced type.  You can then
inspect the type of the returned <see cref="BaseInfo"/> to further query whether it is
a concrete GObject, a GInterface, a structure, etc. using <see cref="BaseInfo.GetInfoType()"/>.
</summary>
</member>

<member name='TypeInfo.StorageType'>
<summary>
Obtain the type tag corresponding to the underlying storage type in C for
the type.
See <see cref="TypeTag"/> for a list of type tags.
</summary>
</member>

<member name='TypeInfo.Tag'>
<summary>
Obtain the type tag for the type. See <see cref="TypeTag"/> for a list
of type tags.
</summary>
</member>

<member name='TypeInfo.IsPointer'>
<summary>
Obtain if the type is passed as a reference.
</summary>
<remarks>
<para>
Note that the types of <see cref="Direction.Out"/> and <see cref="Direction.InOut"/> parameters
will only be pointers if the underlying type being transferred is a pointer
(i.e. only if the type of the C functionâ€™s formal parameter is a pointer to a
pointer).
</para>
</remarks>
</member>

<member name='TypeInfo.IsZeroTerminated'>
<summary>
Obtain if the last element of the array is <c>null</c>. The type tag must be a
#GI_TYPE_TAG_ARRAY or <c>false</c> will returned.
</summary>
</member>

<member name='TypeInfo.ArgumentFromHashPointer(System.IntPtr,GISharp.Lib.GIRepository.Argument)'>
<summary>
GLib data structures, such as #GList, #GSList, and #GHashTable, all store
data pointers.
In the case where the list or hash table is storing single types rather than
structs, these data pointers may have values stuffed into them via macros
such as %GPOINTER_TO_INT.
</summary>
<remarks>
<para>
Use this function to ensure that all values are correctly extracted from
stuffed pointers, regardless of the machine's architecture or endianness.
</para>
<para>
This function fills in the appropriate field of <paramref name="arg"/> with the value extracted
from <paramref name="hashPointer"/>, depending on the storage type of this instance.
</para>
</remarks>
<param name="hashPointer">
A pointer, such as a #GHashTable data pointer
</param>
<param name="arg">
A <see cref="Argument"/> to fill in
</param>
</member>

<member name='TypeInfo.GetParamType(int)'>
<summary>
Obtain the parameter type <paramref name="n"/>.
</summary>
<param name="n">
index of the parameter
</param>
<returns>
the param type info
</returns>
</member>

<member name='TypeInfo.HashPointerFromArgument(GISharp.Lib.GIRepository.Argument)'>
<summary>
GLib data structures, such as #GList, #GSList, and #GHashTable, all store
data pointers.
In the case where the list or hash table is storing single types rather than
structs, these data pointers may have values stuffed into them via macros
such as %GPOINTER_TO_INT.
</summary>
<remarks>
<para>
Use this function to ensure that all values are correctly stuffed into
pointers, regardless of the machine's architecture or endianness.
</para>
<para>
This function returns a pointer stuffed with the appropriate field of <paramref name="arg"/>,
depending on the storage type of this instance.
</para>
</remarks>
<param name="arg">
A <see cref="Argument"/> with the value to stuff into a pointer
</param>
<returns>
A stuffed pointer, that can be stored in a #GHashTable, for example
</returns>
</member>

<member name='TypeInfo'>
<summary>
Represents type information, direction, transfer etc.
</summary>
</member>

</declaration>
