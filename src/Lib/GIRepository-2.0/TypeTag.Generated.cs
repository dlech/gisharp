// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GIRepository
{
    /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag']/*" />
    public enum TypeTag
    {
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Void']/*" />
        Void = 0,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Boolean']/*" />
        Boolean = 1,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Int8']/*" />
        Int8 = 2,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.UInt8']/*" />
        UInt8 = 3,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Int16']/*" />
        Int16 = 4,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.UInt16']/*" />
        UInt16 = 5,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Int32']/*" />
        Int32 = 6,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.UInt32']/*" />
        UInt32 = 7,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Int64']/*" />
        Int64 = 8,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.UInt64']/*" />
        UInt64 = 9,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Float']/*" />
        Float = 10,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Double']/*" />
        Double = 11,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.GType']/*" />
        GType = 12,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Utf8']/*" />
        Utf8 = 13,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Filename']/*" />
        Filename = 14,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Array']/*" />
        Array = 15,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Interface']/*" />
        Interface = 16,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.GList']/*" />
        GList = 17,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.GSList']/*" />
        GSList = 18,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.GHash']/*" />
        GHash = 19,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Error']/*" />
        Error = 20,
        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTag.Unichar']/*" />
        Unichar = 21
    }

    /// <summary>
    /// Extension methods for <see cref="TypeTag"/>.
    /// </summary>
    public static unsafe partial class TypeTagExtensions
    {
        /// <summary>
        /// Obtain a string representation of @type
        /// </summary>
        /// <param name="type">
        /// the type_tag
        /// </param>
        /// <returns>
        /// the string
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern byte* g_type_tag_to_string(
        /* <type name="TypeTag" type="GITypeTag" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.TypeTag type);
        static partial void CheckToStringArgs(this GISharp.Lib.GIRepository.TypeTag type);

        /// <include file="TypeTag.xmldoc" path="declaration/member[@name='TypeTagExtensions.ToString(GISharp.Lib.GIRepository.TypeTag)']/*" />
        public static GISharp.Lib.GLib.UnownedUtf8 ToString(this GISharp.Lib.GIRepository.TypeTag type)
        {
            CheckToStringArgs(type);
            var type_ = (GISharp.Lib.GIRepository.TypeTag)type;
            var ret_ = g_type_tag_to_string(type_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }
    }
}