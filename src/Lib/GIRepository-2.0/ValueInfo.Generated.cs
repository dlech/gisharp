// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GIRepository
{
    /// <include file="ValueInfo.xmldoc" path="declaration/member[@name='ValueInfo']/*" />
    public sealed unsafe partial class ValueInfo : GISharp.Lib.GIRepository.BaseInfo
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
        }

        /// <include file="ValueInfo.xmldoc" path="declaration/member[@name='ValueInfo.Value']/*" />
        public long Value { get => GetValue(); }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public ValueInfo(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }

        /// <summary>
        /// Obtain the enumeration value of the #GIValueInfo.
        /// </summary>
        /// <param name="info">
        /// a #GIValueInfo
        /// </param>
        /// <returns>
        /// the enumeration value. This will always be representable
        ///   as a 32-bit signed or unsigned value. The use of gint64 as the
        ///   return type is to allow both.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint64" type="gint64" managed-name="System.Int64" /> */
        /* transfer-ownership:none direction:in */
        private static extern long g_value_info_get_value(
        /* <type name="ValueInfo" type="GIValueInfo*" managed-name="ValueInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.ValueInfo.UnmanagedStruct* info);
        partial void CheckGetValueArgs();

        private long GetValue()
        {
            CheckGetValueArgs();
            var info_ = (GISharp.Lib.GIRepository.ValueInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_value_info_get_value(info_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = (long)ret_;
            return ret;
        }
    }
}