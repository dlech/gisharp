// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GIRepository
{
    /// <include file="InvokeError.xmldoc" path="declaration/member[@name='InvokeError']/*" />
    [GISharp.Runtime.GErrorDomainAttribute("g-invoke-error-quark")]
    public enum InvokeError
    {
        /// <include file="InvokeError.xmldoc" path="declaration/member[@name='InvokeError.Failed']/*" />
        Failed = 0,
        /// <include file="InvokeError.xmldoc" path="declaration/member[@name='InvokeError.SymbolNotFound']/*" />
        SymbolNotFound = 1,
        /// <include file="InvokeError.xmldoc" path="declaration/member[@name='InvokeError.ArgumentMismatch']/*" />
        ArgumentMismatch = 2
    }

    /// <summary>
    /// Extension methods for <see cref="InvokeError"/>.
    /// </summary>
    public static unsafe partial class InvokeErrorDomain
    {
        /// <include file="InvokeError.xmldoc" path="declaration/member[@name='InvokeErrorDomain.Quark']/*" />
        public static GISharp.Lib.GLib.Quark Quark { get => GetQuark(); }

        /// <summary>
        /// TODO
        /// </summary>
        /// <returns>
        /// TODO
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.Quark" type="GQuark" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GLib.Quark g_invoke_error_quark();
        static partial void CheckGetQuarkArgs();

        private static GISharp.Lib.GLib.Quark GetQuark()
        {
            CheckGetQuarkArgs();
            var ret_ = g_invoke_error_quark();
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = (GISharp.Lib.GLib.Quark)ret_;
            return ret;
        }
    }
}