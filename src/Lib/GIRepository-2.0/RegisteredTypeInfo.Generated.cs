// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GIRepository
{
    /// <include file="RegisteredTypeInfo.xmldoc" path="declaration/member[@name='RegisteredTypeInfo']/*" />
    public abstract unsafe partial class RegisteredTypeInfo : GISharp.Lib.GIRepository.BaseInfo
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
        }

        /// <include file="RegisteredTypeInfo.xmldoc" path="declaration/member[@name='RegisteredTypeInfo.GType']/*" />
        public GISharp.Lib.GObject.GType GType { get => GetGType(); }

        /// <include file="RegisteredTypeInfo.xmldoc" path="declaration/member[@name='RegisteredTypeInfo.TypeInit']/*" />
        public GISharp.Lib.GLib.UnownedUtf8 TypeInit { get => GetTypeInit(); }

        /// <include file="RegisteredTypeInfo.xmldoc" path="declaration/member[@name='RegisteredTypeInfo.TypeName']/*" />
        public GISharp.Lib.GLib.UnownedUtf8 TypeName { get => GetTypeName(); }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public RegisteredTypeInfo(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }

        /// <summary>
        /// Obtain the #GType for this registered type or G_TYPE_NONE which a special meaning.
        /// It means that either there is no type information associated with this @info or
        /// that the shared library which provides the type_init function for this
        /// @info cannot be called.
        /// </summary>
        /// <param name="info">
        /// a #GIRegisteredTypeInfo
        /// </param>
        /// <returns>
        /// the #GType.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" managed-name="GISharp.Lib.GObject.GType" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.GType g_registered_type_info_get_g_type(
        /* <type name="RegisteredTypeInfo" type="GIRegisteredTypeInfo*" managed-name="RegisteredTypeInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.RegisteredTypeInfo.UnmanagedStruct* info);
        partial void CheckGetGTypeArgs();

        private GISharp.Lib.GObject.GType GetGType()
        {
            CheckGetGTypeArgs();
            var info_ = (GISharp.Lib.GIRepository.RegisteredTypeInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_registered_type_info_get_g_type(info_);
            var ret = (GISharp.Lib.GObject.GType)ret_;
            return ret;
        }

        /// <summary>
        /// Obtain the type init function for @info. The type init function is the
        /// function which will register the GType within the GObject type system.
        /// Usually this is not called by langauge bindings or applications, use
        /// g_registered_type_info_get_g_type() directly instead.
        /// </summary>
        /// <param name="info">
        /// a #GIRegisteredTypeInfo
        /// </param>
        /// <returns>
        /// the symbol name of the type init function, suitable for
        /// passing into g_module_symbol().
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const gchar*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern byte* g_registered_type_info_get_type_init(
        /* <type name="RegisteredTypeInfo" type="GIRegisteredTypeInfo*" managed-name="RegisteredTypeInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.RegisteredTypeInfo.UnmanagedStruct* info);
        partial void CheckGetTypeInitArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetTypeInit()
        {
            CheckGetTypeInitArgs();
            var info_ = (GISharp.Lib.GIRepository.RegisteredTypeInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_registered_type_info_get_type_init(info_);
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Obtain the type name of the struct within the GObject type system.
        /// This type can be passed to g_type_name() to get a #GType.
        /// </summary>
        /// <param name="info">
        /// a #GIRegisteredTypeInfo
        /// </param>
        /// <returns>
        /// the type name
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const gchar*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern byte* g_registered_type_info_get_type_name(
        /* <type name="RegisteredTypeInfo" type="GIRegisteredTypeInfo*" managed-name="RegisteredTypeInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.RegisteredTypeInfo.UnmanagedStruct* info);
        partial void CheckGetTypeNameArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetTypeName()
        {
            CheckGetTypeNameArgs();
            var info_ = (GISharp.Lib.GIRepository.RegisteredTypeInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_registered_type_info_get_type_name(info_);
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }
    }
}