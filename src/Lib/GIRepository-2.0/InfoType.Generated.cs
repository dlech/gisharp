// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GIRepository
{
    /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType']/*" />
    public enum InfoType
    {
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Invalid']/*" />
        Invalid = 0,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Function']/*" />
        Function = 1,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Callback']/*" />
        Callback = 2,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Struct']/*" />
        Struct = 3,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Boxed']/*" />
        Boxed = 4,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Enum']/*" />
        Enum = 5,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Flags']/*" />
        Flags = 6,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Object']/*" />
        Object = 7,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Interface']/*" />
        Interface = 8,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Constant']/*" />
        Constant = 9,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Invalid0']/*" />
        Invalid0 = 10,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Union']/*" />
        Union = 11,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Value']/*" />
        Value = 12,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Signal']/*" />
        Signal = 13,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.VFunc']/*" />
        VFunc = 14,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Property']/*" />
        Property = 15,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Field']/*" />
        Field = 16,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Arg']/*" />
        Arg = 17,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Type']/*" />
        Type = 18,
        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoType.Unresolved']/*" />
        Unresolved = 19
    }

    /// <summary>
    /// Extension methods for <see cref="InfoType"/>.
    /// </summary>
    public static unsafe partial class InfoTypeExtensions
    {
        /// <summary>
        /// Obtain a string representation of @type
        /// </summary>
        /// <param name="type">
        /// the info type
        /// </param>
        /// <returns>
        /// the string
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern byte* g_info_type_to_string(
        /* <type name="InfoType" type="GIInfoType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.InfoType type);
        static partial void CheckToStringArgs(this GISharp.Lib.GIRepository.InfoType type);

        /// <include file="InfoType.xmldoc" path="declaration/member[@name='InfoTypeExtensions.ToString(GISharp.Lib.GIRepository.InfoType)']/*" />
        public static GISharp.Lib.GLib.UnownedUtf8 ToString(this GISharp.Lib.GIRepository.InfoType type)
        {
            CheckToStringArgs(type);
            var type_ = (GISharp.Lib.GIRepository.InfoType)type;
            var ret_ = g_info_type_to_string(type_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }
    }
}