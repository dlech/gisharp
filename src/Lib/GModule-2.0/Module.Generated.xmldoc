<declaration>

<member name='Module.Name'>
<summary>
Returns the filename that the module was opened with.
</summary>
<remarks>
<para>
If this instance refers to the application itself, "main" is returned.
</para>
</remarks>
</member>

<member name='Module.Error'>
<summary>
Gets a string describing the last module error.
</summary>
</member>

<member name='Module.Supported'>
<summary>
Checks if modules are supported on the current platform.
</summary>
</member>

<member name='Module.BuildPath(GISharp.Runtime.NullableUnownedUtf8,GISharp.Runtime.UnownedUtf8)'>
<summary>
A portable way to build the filename of a module. The platform-specific
prefix and suffix are added to the filename, if needed, and the result
is added to the directory, using the correct separator character.
</summary>
<remarks>
<para>
The directory should specify the directory where the module can be found.
It can be <c>null</c> or an empty string to indicate that the module is in a
standard platform-specific directory, though this is not recommended
since the wrong module may be found.
</para>
<para>
For example, calling <see cref="Module.BuildPath(GISharp.Runtime.NullableUnownedUtf8,GISharp.Runtime.UnownedUtf8)"/> on a Linux system with a
<paramref name="directory"/> of `/lib` and a <paramref name="moduleName"/> of "mylibrary" will return
`/lib/libmylibrary.so`. On a Windows system, using `\Windows` as the
directory it will return `\Windows\mylibrary.dll`.
</para>
</remarks>
<param name="directory">
the directory where the module is. This can be
    <c>null</c> or the empty string to indicate that the standard platform-specific
    directories will be used, though that is not recommended
</param>
<param name="moduleName">
the name of the module
</param>
<returns>
the complete path of the module, including the standard library
    prefix and suffix. This should be freed when no longer needed
</returns>
</member>

<member name='Module.Open(GISharp.Runtime.NullableUnownedUtf8,GISharp.Lib.GModule.ModuleFlags)'>
<summary>
Opens a module. If the module has already been opened,
its reference count is incremented.
</summary>
<remarks>
<para>
First of all <see cref="Module.Open(GISharp.Runtime.NullableUnownedUtf8,GISharp.Lib.GModule.ModuleFlags)"/> tries to open <paramref name="fileName"/> as a module.
If that fails and <paramref name="fileName"/> has the ".la"-suffix (and is a libtool
archive) it tries to open the corresponding module. If that fails
and it doesn't have the proper module suffix for the platform
(#G_MODULE_SUFFIX), this suffix will be appended and the corresponding
module will be opened. If that fails and <paramref name="fileName"/> doesn't have the
".la"-suffix, this suffix is appended and <see cref="Module.Open(GISharp.Runtime.NullableUnownedUtf8,GISharp.Lib.GModule.ModuleFlags)"/> tries to open
the corresponding module. If eventually that fails as well, <c>null</c> is
returned.
</para>
</remarks>
<param name="fileName">
the name of the file containing the module, or <c>null</c>
    to obtain a <see cref="Module"/> representing the main program itself
</param>
<param name="flags">
the flags used for opening the module. This can be the
    logical OR of any of the <see cref="ModuleFlags"/>
</param>
<returns>
a <see cref="Module"/> on success, or <c>null</c> on failure
</returns>
</member>

<member name='Module.Close()'>
<summary>
Closes a module.
</summary>
<returns>
<c>true</c> on success
</returns>
</member>

<member name='Module.MakeResident()'>
<summary>
Ensures that a module will never be unloaded.
Any future <see cref="Module.Close()"/> calls on the module will be ignored.
</summary>
</member>

<member name='Module.TrySymbol(GISharp.Runtime.UnownedUtf8,System.IntPtr)'>
<summary>
Gets a symbol pointer from a module, such as one exported
by #G_MODULE_EXPORT. Note that a valid symbol can be <c>null</c>.
</summary>
<param name="symbolName">
the name of the symbol to find
</param>
<param name="symbol">
returns the pointer to the symbol value
</param>
<returns>
<c>true</c> on success
</returns>
</member>

<member name='Module'>
<summary>
The <see cref="Module"/> struct is an opaque data structure to represent a
[dynamically-loaded module][glib-Dynamic-Loading-of-Modules].
It should only be accessed via the following functions.
</summary>
</member>

</declaration>
