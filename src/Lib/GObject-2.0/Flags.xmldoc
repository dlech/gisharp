<declaration>

<member name='Flags.CompleteTypeInfo(GISharp.Runtime.GType,GISharp.Lib.GObject.TypeInfo,GISharp.Runtime.UnownedZeroTerminatedCArray&lt;GISharp.Lib.GObject.FlagsValue&gt;)'>
<summary>
This function is meant to be called from the complete_type_info()
function of a <see cref="T:ITypePlugin"/> implementation, see the example for
<see cref="Enum.CompleteTypeInfo(GISharp.Runtime.GType,out GISharp.Lib.GObject.TypeInfo,GISharp.Runtime.UnownedZeroTerminatedCArray{GISharp.Lib.GObject.EnumValue})"/>.
</summary>
<param name="gFlagsType">
the type identifier of the type being completed
</param>
<param name="info">
the <see cref="TypeInfo"/> struct to be filled in
</param>
<param name="constValues">
An array of <see cref="FlagsValue"/> structs for the possible
 enumeration values. The array is terminated by a struct with all
 members being 0.
</param>
</member>

<member name='Flags.GetFirstValue(GISharp.Lib.GObject.FlagsClass,uint)'>
<summary>
Returns the first <see cref="FlagsValue"/> which is set in <paramref name="value"/>.
</summary>
<param name="flagsClass">
a <see cref="FlagsClass"/>
</param>
<param name="value">
the value
</param>
<returns>
the first <see cref="FlagsValue"/> which is set in
         <paramref name="value"/>, or <c>null</c> if none is set
</returns>
</member>

<member name='Flags.GetValueByName(GISharp.Lib.GObject.FlagsClass,GISharp.Runtime.UnownedUtf8)'>
<summary>
Looks up a <see cref="FlagsValue"/> by name.
</summary>
<param name="flagsClass">
a <see cref="FlagsClass"/>
</param>
<param name="name">
the name to look up
</param>
<returns>
the <see cref="FlagsValue"/> with name <paramref name="name"/>,
         or <c>null</c> if there is no flag with that name
</returns>
</member>

<member name='Flags.GetValueByNick(GISharp.Lib.GObject.FlagsClass,GISharp.Runtime.UnownedUtf8)'>
<summary>
Looks up a <see cref="FlagsValue"/> by nickname.
</summary>
<param name="flagsClass">
a <see cref="FlagsClass"/>
</param>
<param name="nick">
the nickname to look up
</param>
<returns>
the <see cref="FlagsValue"/> with nickname <paramref name="nick"/>,
         or <c>null</c> if there is no flag with that nickname
</returns>
</member>

<member name='Flags.RegisterStatic(GISharp.Runtime.UnownedUtf8,GISharp.Runtime.UnownedZeroTerminatedCArray&lt;GISharp.Lib.GObject.FlagsValue&gt;)'>
<summary>
Registers a new static flags type with the name <paramref name="name"/>.
</summary>
<remarks>
<para>
It is normally more convenient to let [glib-mkenums][glib-mkenums]
generate a my_flags_get_type() function from a usual C enumeration
definition than to write one yourself using <see cref="Flags.RegisterStatic(GISharp.Runtime.UnownedUtf8,GISharp.Runtime.UnownedZeroTerminatedCArray{GISharp.Lib.GObject.FlagsValue})"/>.
</para>
</remarks>
<param name="name">
A nul-terminated string used as the name of the new type.
</param>
<param name="constStaticValues">
An array of <see cref="FlagsValue"/> structs for the possible
 flags values. The array is terminated by a struct with all members being 0.
 GObject keeps a reference to the data, so it cannot be stack-allocated.
</param>
<returns>
The new type identifier.
</returns>
</member>

<member name='Flags.ToString(GISharp.Runtime.GType,uint)'>
<summary>
Pretty-prints <paramref name="value"/> in the form of the flag names separated by ` | ` and
sorted. Any extra bits will be shown at the end as a hexadecimal number.
</summary>
<remarks>
<para>
This is intended to be used for debugging purposes. The format of the output
may change in the future.
</para>
</remarks>
<param name="flagsType">
the type identifier of a <see cref="FlagsClass"/> type
</param>
<param name="value">
the value
</param>
<returns>
a newly-allocated text string
</returns>
</member>

<member name='Flags'>
</member>

</declaration>
