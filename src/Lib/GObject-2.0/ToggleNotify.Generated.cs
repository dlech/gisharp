// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// A callback function used for notification when the state
    /// of a toggle reference changes. See g_object_add_toggle_ref().
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedToggleNotify(
    /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr data,
    /* <type name="Object" type="GObject*" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Object.UnmanagedStruct* @object,
    /* <type name="gboolean" type="gboolean" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Runtime.Boolean isLastRef);

    /// <include file="ToggleNotify.xmldoc" path="declaration/member[@name='ToggleNotify']/*" />
    public delegate void ToggleNotify(System.IntPtr data, GISharp.Lib.GObject.Object @object, bool isLastRef);

    /// <summary>
    /// Class for marshalling <see cref="ToggleNotify"/> methods.
    /// </summary>
    public static unsafe class ToggleNotifyMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="ToggleNotify"/>.
        /// </summary>
        public static GISharp.Lib.GObject.ToggleNotify FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, GISharp.Lib.GObject.Object.UnmanagedStruct*, GISharp.Runtime.Boolean, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(System.IntPtr data, GISharp.Lib.GObject.Object @object, bool isLastRef)
            {
                var data_ = (System.IntPtr)data;
                var @object_ = (GISharp.Lib.GObject.Object.UnmanagedStruct*)@object.UnsafeHandle;
                var isLastRef_ = GISharp.Runtime.BooleanExtensions.ToBoolean(isLastRef);
                callback_(data_, @object_, isLastRef_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            return managedCallback;
        }
    }
}