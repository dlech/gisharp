// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='ObjectClass']/*" />
    public unsafe partial class ObjectClass : GISharp.Lib.GObject.TypeClass
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
#pragma warning disable CS0169, CS0414, CS0649
            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GTypeClass']/*" />
            public readonly GISharp.Lib.GObject.TypeClass.UnmanagedStruct GTypeClass;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.ConstructProperties']/*" />
            internal readonly GISharp.Lib.GLib.SList.UnmanagedStruct* ConstructProperties;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Constructor']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Runtime.GType, uint, GISharp.Lib.GObject.ObjectConstructParam*, GISharp.Lib.GObject.Object.UnmanagedStruct*> Constructor;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.SetProperty']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, uint, GISharp.Lib.GObject.Value*, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct*, void> SetProperty;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GetProperty']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, uint, GISharp.Lib.GObject.Value*, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct*, void> GetProperty;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Dispose']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, void> Dispose;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Finalize']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, void> Finalize;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.DispatchPropertiesChanged']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, uint, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct*, void> DispatchPropertiesChanged;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Notify']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct*, void> Notify;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Constructed']/*" />
            public readonly delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Object.UnmanagedStruct*, void> Constructed;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Flags']/*" />
            internal readonly nuint Flags;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Pdummy0']/*" />
            internal readonly System.IntPtr Pdummy0;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Pdummy1']/*" />
            internal readonly System.IntPtr Pdummy1;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Pdummy2']/*" />
            internal readonly System.IntPtr Pdummy2;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Pdummy3']/*" />
            internal readonly System.IntPtr Pdummy3;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Pdummy4']/*" />
            internal readonly System.IntPtr Pdummy4;

            /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Pdummy5']/*" />
            internal readonly System.IntPtr Pdummy5;
#pragma warning restore CS0169, CS0414, CS0649
        }

        static ObjectClass()
        {
            int constructorOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Constructor));
            RegisterVirtualMethod(constructorOffset, ConstructorMarshal.Create);
            int setPropertyOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.SetProperty));
            RegisterVirtualMethod(setPropertyOffset, SetPropertyMarshal.Create);
            int getPropertyOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.GetProperty));
            RegisterVirtualMethod(getPropertyOffset, GetPropertyMarshal.Create);
            int disposeOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Dispose));
            RegisterVirtualMethod(disposeOffset, DisposeMarshal.Create);
            int finalizeOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Finalize));
            RegisterVirtualMethod(finalizeOffset, FinalizeMarshal.Create);
            int dispatchPropertiesChangedOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.DispatchPropertiesChanged));
            RegisterVirtualMethod(dispatchPropertiesChangedOffset, DispatchPropertiesChangedMarshal.Create);
            int notifyOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Notify));
            RegisterVirtualMethod(notifyOffset, NotifyMarshal.Create);
            int constructedOffset = (int)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Constructed));
            RegisterVirtualMethod(constructedOffset, ConstructedMarshal.Create);
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_Constructor']/*" />
        public delegate GISharp.Lib.GObject.Object _Constructor(uint nConstructProperties, ref GISharp.Lib.GObject.ObjectConstructParam constructProperties);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Object" type="GObject*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        public unsafe delegate GISharp.Lib.GObject.Object.UnmanagedStruct* UnmanagedConstructor(
/* <type name="GType" type="GType" /> */
/* transfer-ownership:none direction:in */
GISharp.Runtime.GType type,
/* <type name="guint" type="guint" /> */
/* transfer-ownership:none direction:in */
uint nConstructProperties,
/* <type name="ObjectConstructParam" type="GObjectConstructParam*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.ObjectConstructParam* constructProperties);

        /// <summary>
        /// Class for marshalling <see cref="_Constructor"/> methods.
        /// </summary>
        public static unsafe class ConstructorMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedConstructor Create(System.Reflection.MethodInfo methodInfo)
            {
                GISharp.Lib.GObject.Object.UnmanagedStruct* unmanagedConstructor(GISharp.Runtime.GType type_, uint nConstructProperties_, GISharp.Lib.GObject.ObjectConstructParam* constructProperties_) { try { var type = (GISharp.Runtime.GType)type_; var nConstructProperties = (uint)nConstructProperties_; ref var constructProperties = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.ObjectConstructParam>(constructProperties_); var doConstructor = (_Constructor)methodInfo.CreateDelegate(typeof(_Constructor), type); var ret = doConstructor(nConstructProperties, ref constructProperties); var ret_ = (GISharp.Lib.GObject.Object.UnmanagedStruct*)ret.Take(); return ret_; } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } return default(GISharp.Lib.GObject.Object.UnmanagedStruct*); }

                return unmanagedConstructor;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_SetProperty']/*" />
        public delegate void _SetProperty(uint propertyId, in GISharp.Lib.GObject.Value value, GISharp.Lib.GObject.ParamSpec pspec);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedSetProperty(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object,
/* <type name="guint" type="guint" /> */
/* transfer-ownership:none direction:in */
uint propertyId,
/* <type name="Value" type="const GValue*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Value* value,
/* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec);

        /// <summary>
        /// Class for marshalling <see cref="_SetProperty"/> methods.
        /// </summary>
        public static unsafe class SetPropertyMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedSetProperty Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedSetProperty(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_, uint propertyId_, GISharp.Lib.GObject.Value* value_, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var propertyId = (uint)propertyId_; ref var value = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.Value>(value_); var pspec = GISharp.Lib.GObject.ParamSpec.GetInstance<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)pspec_, GISharp.Runtime.Transfer.None)!; var doSetProperty = (_SetProperty)methodInfo.CreateDelegate(typeof(_SetProperty), @object); doSetProperty(propertyId, value, pspec); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedSetProperty;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_GetProperty']/*" />
        public delegate void _GetProperty(uint propertyId, ref GISharp.Lib.GObject.Value value, GISharp.Lib.GObject.ParamSpec pspec);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedGetProperty(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object,
/* <type name="guint" type="guint" /> */
/* transfer-ownership:none direction:in */
uint propertyId,
/* <type name="Value" type="GValue*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Value* value,
/* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec);

        /// <summary>
        /// Class for marshalling <see cref="_GetProperty"/> methods.
        /// </summary>
        public static unsafe class GetPropertyMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedGetProperty Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedGetProperty(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_, uint propertyId_, GISharp.Lib.GObject.Value* value_, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var propertyId = (uint)propertyId_; ref var value = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.Value>(value_); var pspec = GISharp.Lib.GObject.ParamSpec.GetInstance<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)pspec_, GISharp.Runtime.Transfer.None)!; var doGetProperty = (_GetProperty)methodInfo.CreateDelegate(typeof(_GetProperty), @object); doGetProperty(propertyId, ref value, pspec); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedGetProperty;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_Dispose']/*" />
        public delegate void _Dispose();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedDispose(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object);

        /// <summary>
        /// Class for marshalling <see cref="_Dispose"/> methods.
        /// </summary>
        public static unsafe class DisposeMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedDispose Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedDispose(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var doDispose = (_Dispose)methodInfo.CreateDelegate(typeof(_Dispose), @object); doDispose(); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedDispose;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_Finalize']/*" />
        public delegate void _Finalize();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedFinalize(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object);

        /// <summary>
        /// Class for marshalling <see cref="_Finalize"/> methods.
        /// </summary>
        public static unsafe class FinalizeMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedFinalize Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedFinalize(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var doFinalize = (_Finalize)methodInfo.CreateDelegate(typeof(_Finalize), @object); doFinalize(); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedFinalize;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_DispatchPropertiesChanged']/*" />
        public delegate void _DispatchPropertiesChanged(uint nPspecs, GISharp.Lib.GObject.ParamSpec pspecs);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedDispatchPropertiesChanged(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object,
/* <type name="guint" type="guint" /> */
/* transfer-ownership:none direction:in */
uint nPspecs,
/* <type name="ParamSpec" type="GParamSpec**" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspecs);

        /// <summary>
        /// Class for marshalling <see cref="_DispatchPropertiesChanged"/> methods.
        /// </summary>
        public static unsafe class DispatchPropertiesChangedMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedDispatchPropertiesChanged Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedDispatchPropertiesChanged(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_, uint nPspecs_, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspecs_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var nPspecs = (uint)nPspecs_; var pspecs = GISharp.Lib.GObject.ParamSpec.GetInstance<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)pspecs_, GISharp.Runtime.Transfer.None)!; var doDispatchPropertiesChanged = (_DispatchPropertiesChanged)methodInfo.CreateDelegate(typeof(_DispatchPropertiesChanged), @object); doDispatchPropertiesChanged(nPspecs, pspecs); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedDispatchPropertiesChanged;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_Notify']/*" />
        public delegate void _Notify(GISharp.Lib.GObject.ParamSpec pspec);

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedNotify(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object,
/* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec);

        /// <summary>
        /// Class for marshalling <see cref="_Notify"/> methods.
        /// </summary>
        public static unsafe class NotifyMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedNotify Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedNotify(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_, GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var pspec = GISharp.Lib.GObject.ParamSpec.GetInstance<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)pspec_, GISharp.Runtime.Transfer.None)!; var doNotify = (_Notify)methodInfo.CreateDelegate(typeof(_Notify), @object); doNotify(pspec); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedNotify;
            }
        }

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='_Constructed']/*" />
        public delegate void _Constructed();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        public unsafe delegate void UnmanagedConstructed(
/* <type name="Object" type="GObject*" is-pointer="1" /> */
/* transfer-ownership:none direction:in */
GISharp.Lib.GObject.Object.UnmanagedStruct* @object);

        /// <summary>
        /// Class for marshalling <see cref="_Constructed"/> methods.
        /// </summary>
        public static unsafe class ConstructedMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static UnmanagedConstructed Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedConstructed(GISharp.Lib.GObject.Object.UnmanagedStruct* @object_) { try { var @object = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)@object_, GISharp.Runtime.Transfer.None)!; var doConstructed = (_Constructed)methodInfo.CreateDelegate(typeof(_Constructed), @object); doConstructed(); } catch (System.Exception ex) { GISharp.Runtime.GMarshal.PushUnhandledException(ex); } }

                return unmanagedConstructed;
            }
        }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public ObjectClass(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }

        /// <summary>
        /// Looks up the #GParamSpec for a property of a class.
        /// </summary>
        /// <param name="oclass">
        /// a #GObjectClass
        /// </param>
        /// <param name="propertyName">
        /// the name of the property to look up
        /// </param>
        /// <returns>
        /// the #GParamSpec for the property, or
        ///          %NULL if the class doesn't have a property of that name
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* g_object_class_find_property(
        /* <type name="ObjectClass" type="GObjectClass*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ObjectClass.UnmanagedStruct* oclass,
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* propertyName);
        partial void CheckFindPropertyArgs(GISharp.Lib.GLib.UnownedUtf8 propertyName);

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='ObjectClass.FindProperty(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.GObject.ParamSpec FindProperty(GISharp.Lib.GLib.UnownedUtf8 propertyName)
        {
            CheckFindPropertyArgs(propertyName);
            var oclass_ = (GISharp.Lib.GObject.ObjectClass.UnmanagedStruct*)UnsafeHandle;
            var propertyName_ = (byte*)propertyName.UnsafeHandle;
            var ret_ = g_object_class_find_property(oclass_,propertyName_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Lib.GObject.ParamSpec.GetInstance<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)ret_, GISharp.Runtime.Transfer.None)!;
            return ret;
        }

        /// <summary>
        /// Installs new properties from an array of #GParamSpecs.
        /// </summary>
        /// <remarks>
        /// <para>
        /// All properties should be installed during the class initializer.  It
        /// is possible to install properties after that, but doing so is not
        /// recommend, and specifically, is not guaranteed to be thread-safe vs.
        /// use of properties on the same type on other threads.
        /// </para>
        /// <para>
        /// The property id of each property is the index of each #GParamSpec in
        /// the @pspecs array.
        /// </para>
        /// <para>
        /// The property id of 0 is treated specially by #GObject and it should not
        /// be used to store a #GParamSpec.
        /// </para>
        /// <para>
        /// This function should be used if you plan to use a static array of
        /// #GParamSpecs and g_object_notify_by_pspec(). For instance, this
        /// class initialization:
        /// </para>
        /// <para>
        /// |[&lt;!-- language="C" --&gt;
        /// enum {
        ///   PROP_0, PROP_FOO, PROP_BAR, N_PROPERTIES
        /// };
        /// </para>
        /// <para>
        /// static GParamSpec *obj_properties[N_PROPERTIES] = { NULL, };
        /// </para>
        /// <para>
        /// static void
        /// my_object_class_init (MyObjectClass *klass)
        /// {
        ///   GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
        /// </para>
        /// <para>
        ///   obj_properties[PROP_FOO] =
        ///     g_param_spec_int ("foo", "Foo", "Foo",
        ///                       -1, G_MAXINT,
        ///                       0,
        ///                       G_PARAM_READWRITE);
        /// </para>
        /// <para>
        ///   obj_properties[PROP_BAR] =
        ///     g_param_spec_string ("bar", "Bar", "Bar",
        ///                          NULL,
        ///                          G_PARAM_READWRITE);
        /// </para>
        /// <para>
        ///   gobject_class-&gt;set_property = my_object_set_property;
        ///   gobject_class-&gt;get_property = my_object_get_property;
        ///   g_object_class_install_properties (gobject_class,
        ///                                      N_PROPERTIES,
        ///                                      obj_properties);
        /// }
        /// ]|
        /// </para>
        /// <para>
        /// allows calling g_object_notify_by_pspec() to notify of property changes:
        /// </para>
        /// <para>
        /// |[&lt;!-- language="C" --&gt;
        /// void
        /// my_object_set_foo (MyObject *self, gint foo)
        /// {
        ///   if (self-&gt;foo != foo)
        ///     {
        ///       self-&gt;foo = foo;
        ///       g_object_notify_by_pspec (G_OBJECT (self), obj_properties[PROP_FOO]);
        ///     }
        ///  }
        /// ]|
        /// </para>
        /// </remarks>
        /// <param name="oclass">
        /// a #GObjectClass
        /// </param>
        /// <param name="nPspecs">
        /// the length of the #GParamSpecs array
        /// </param>
        /// <param name="pspecs">
        /// the #GParamSpecs array
        ///   defining the new properties
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.26")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_object_class_install_properties(
        /* <type name="ObjectClass" type="GObjectClass*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ObjectClass.UnmanagedStruct* oclass,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint nPspecs,
        /* <array length="0" zero-terminated="0" type="GParamSpec**" is-pointer="1">
*   <type name="ParamSpec" type="GParamSpec*" is-pointer="1" />
* </array> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ParamSpec.UnmanagedStruct** pspecs);
        partial void CheckInstallPropertiesArgs(GISharp.Runtime.UnownedCPtrArray<GISharp.Lib.GObject.ParamSpec> pspecs);

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='ObjectClass.InstallProperties(GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GObject.ParamSpec&gt;)']/*" />
        [GISharp.Runtime.SinceAttribute("2.26")]
        public void InstallProperties(GISharp.Runtime.UnownedCPtrArray<GISharp.Lib.GObject.ParamSpec> pspecs)
        {
            fixed (System.IntPtr* pspecsData_ = pspecs)
            {
                CheckInstallPropertiesArgs(pspecs);
                var oclass_ = (GISharp.Lib.GObject.ObjectClass.UnmanagedStruct*)UnsafeHandle;
                var pspecs_ = (GISharp.Lib.GObject.ParamSpec.UnmanagedStruct**)pspecsData_;
                var nPspecs_ = (uint)pspecs.Length;
                g_object_class_install_properties(oclass_, nPspecs_, pspecs_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Installs a new property.
        /// </summary>
        /// <remarks>
        /// <para>
        /// All properties should be installed during the class initializer.  It
        /// is possible to install properties after that, but doing so is not
        /// recommend, and specifically, is not guaranteed to be thread-safe vs.
        /// use of properties on the same type on other threads.
        /// </para>
        /// <para>
        /// Note that it is possible to redefine a property in a derived class,
        /// by installing a property with the same name. This can be useful at times,
        /// e.g. to change the range of allowed values or the default value.
        /// </para>
        /// </remarks>
        /// <param name="oclass">
        /// a #GObjectClass
        /// </param>
        /// <param name="propertyId">
        /// the id for the new property
        /// </param>
        /// <param name="pspec">
        /// the #GParamSpec for the new property
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_object_class_install_property(
        /* <type name="ObjectClass" type="GObjectClass*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ObjectClass.UnmanagedStruct* oclass,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint propertyId,
        /* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* pspec);
        partial void CheckInstallPropertyArgs(uint propertyId, GISharp.Lib.GObject.ParamSpec pspec);

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='ObjectClass.InstallProperty(uint,GISharp.Lib.GObject.ParamSpec)']/*" />
        public void InstallProperty(uint propertyId, GISharp.Lib.GObject.ParamSpec pspec)
        {
            CheckInstallPropertyArgs(propertyId, pspec);
            var oclass_ = (GISharp.Lib.GObject.ObjectClass.UnmanagedStruct*)UnsafeHandle;
            var propertyId_ = (uint)propertyId;
            var pspec_ = (GISharp.Lib.GObject.ParamSpec.UnmanagedStruct*)pspec.UnsafeHandle;
            g_object_class_install_property(oclass_, propertyId_, pspec_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }

        /// <summary>
        /// Get an array of #GParamSpec* for all properties of a class.
        /// </summary>
        /// <param name="oclass">
        /// a #GObjectClass
        /// </param>
        /// <param name="nProperties">
        /// return location for the length of the returned array
        /// </param>
        /// <returns>
        /// an array of
        ///          #GParamSpec* which should be freed after use
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array length="0" zero-terminated="0" type="GParamSpec**" is-pointer="1">
*   <type name="ParamSpec" type="GParamSpec*" is-pointer="1" />
* </array> */
        /* transfer-ownership:container direction:in */
        private static extern GISharp.Lib.GObject.ParamSpec.UnmanagedStruct** g_object_class_list_properties(
        /* <type name="ObjectClass" type="GObjectClass*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ObjectClass.UnmanagedStruct* oclass,
        /* <type name="guint" type="guint*" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full */
        uint* nProperties);
        partial void CheckListPropertiesArgs();

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='ObjectClass.ListProperties()']/*" />
        public GISharp.Runtime.WeakCPtrArray<GISharp.Lib.GObject.ParamSpec> ListProperties()
        {
            CheckListPropertiesArgs();
            var oclass_ = (GISharp.Lib.GObject.ObjectClass.UnmanagedStruct*)UnsafeHandle;
            uint nProperties_;
            var ret_ = g_object_class_list_properties(oclass_,&nProperties_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = new GISharp.Runtime.WeakCPtrArray<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)ret_, (int)nProperties_, GISharp.Runtime.Transfer.Container);
            return ret;
        }

        /// <summary>
        /// Registers @property_id as referring to a property with the name
        /// @name in a parent class or in an interface implemented by @oclass.
        /// This allows this class to "override" a property implementation in
        /// a parent class or to provide the implementation of a property from
        /// an interface.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Internally, overriding is implemented by creating a property of type
        /// #GParamSpecOverride; generally operations that query the properties of
        /// the object class, such as g_object_class_find_property() or
        /// g_object_class_list_properties() will return the overridden
        /// property. However, in one case, the @construct_properties argument of
        /// the @constructor virtual function, the #GParamSpecOverride is passed
        /// instead, so that the @param_id field of the #GParamSpec will be
        /// correct.  For virtually all uses, this makes no difference. If you
        /// need to get the overridden property, you can call
        /// g_param_spec_get_redirect_target().
        /// </para>
        /// </remarks>
        /// <param name="oclass">
        /// a #GObjectClass
        /// </param>
        /// <param name="propertyId">
        /// the new property ID
        /// </param>
        /// <param name="name">
        /// the name of a property registered in a parent class or
        ///  in an interface of this class.
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_object_class_override_property(
        /* <type name="ObjectClass" type="GObjectClass*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.ObjectClass.UnmanagedStruct* oclass,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint propertyId,
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        byte* name);
        partial void CheckOverridePropertyArgs(uint propertyId, GISharp.Lib.GLib.UnownedUtf8 name);

        /// <include file="ObjectClass.xmldoc" path="declaration/member[@name='ObjectClass.OverrideProperty(uint,GISharp.Lib.GLib.UnownedUtf8)']/*" />
        [GISharp.Runtime.SinceAttribute("2.4")]
        public void OverrideProperty(uint propertyId, GISharp.Lib.GLib.UnownedUtf8 name)
        {
            CheckOverridePropertyArgs(propertyId, name);
            var oclass_ = (GISharp.Lib.GObject.ObjectClass.UnmanagedStruct*)UnsafeHandle;
            var propertyId_ = (uint)propertyId;
            var name_ = (byte*)name.UnsafeHandle;
            g_object_class_override_property(oclass_, propertyId_, name_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }
    }
}