// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// A function to be called to transform @from_value to @to_value. If
    /// this is the @transform_to function of a binding, then @from_value
    /// is the @source_property on the @source object, and @to_value is the
    /// @target_property on the @target object. If this is the
    /// @transform_from function of a %G_BINDING_BIDIRECTIONAL binding,
    /// then those roles are reversed.
    /// </summary>
    [GISharp.Runtime.SinceAttribute("2.26")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate GISharp.Runtime.Boolean UnmanagedBindingTransformFunc(
    /* <type name="Binding" type="GBinding*" managed-name="Binding" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Binding.UnmanagedStruct* binding,
    /* <type name="Value" type="const GValue*" managed-name="Value" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Value* fromValue,
    /* <type name="Value" type="GValue*" managed-name="Value" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Value* toValue,
    /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 closure:3 direction:in */
    System.IntPtr userData);

    /// <include file="BindingTransformFunc.xmldoc" path="declaration/member[@name='BindingTransformFunc']/*" />
    [GISharp.Runtime.SinceAttribute("2.26")]
    public delegate bool BindingTransformFunc(GISharp.Lib.GObject.Binding binding, in GISharp.Lib.GObject.Value fromValue, ref GISharp.Lib.GObject.Value toValue);

    /// <summary>
    /// Class for marshalling <see cref="BindingTransformFunc"/> methods.
    /// </summary>
    public static unsafe class BindingTransformFuncMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="BindingTransformFunc"/>.
        /// </summary>
        public static GISharp.Lib.GObject.BindingTransformFunc FromPointer(delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Binding.UnmanagedStruct*, GISharp.Lib.GObject.Value*, GISharp.Lib.GObject.Value*, System.IntPtr, GISharp.Runtime.Boolean> callback_, System.IntPtr userData_)
        {
            bool managedCallback(GISharp.Lib.GObject.Binding binding, in GISharp.Lib.GObject.Value fromValue, ref GISharp.Lib.GObject.Value toValue)
            {
                fixed (GISharp.Lib.GObject.Value* toValue_ = &toValue)
                {
                    fixed (GISharp.Lib.GObject.Value* fromValue_ = &fromValue)
                    {
                        var binding_ = (GISharp.Lib.GObject.Binding.UnmanagedStruct*)binding.UnsafeHandle;
                        var ret_ = callback_(binding_,fromValue_,toValue_,userData_);
                        GISharp.Runtime.GMarshal.PopUnhandledException();
                        var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
                        return ret;
                    }
                }
            }

            return managedCallback;
        }

        /// <summary>
        /// For runtime use only.
        /// </summary>
        [System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute(CallConvs = new[] { typeof(System.Runtime.CompilerServices.CallConvCdecl) })]
        public static GISharp.Runtime.Boolean Callback(GISharp.Lib.GObject.Binding.UnmanagedStruct* binding_, GISharp.Lib.GObject.Value* fromValue_, GISharp.Lib.GObject.Value* toValue_, System.IntPtr userData_)
        {
            try
            {
                var binding = GISharp.Lib.GObject.Binding.GetInstance<GISharp.Lib.GObject.Binding>((System.IntPtr)binding_, GISharp.Runtime.Transfer.None)!;
                ref var fromValue = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.Value>(fromValue_);
                ref var toValue = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.Value>(toValue_);
                var userDataHandle = (System.Runtime.InteropServices.GCHandle)userData_;
                var (userData, userDataScope) = ((BindingTransformFunc, GISharp.Runtime.CallbackScope))userDataHandle.Target!;
                var ret = userData.Invoke(binding, fromValue, ref toValue);
                if (userDataScope == GISharp.Runtime.CallbackScope.Async)
                {
                    userDataHandle.Free();
                }

                var ret_ = GISharp.Runtime.BooleanExtensions.ToBoolean(ret);
                return ret_;
            }
            catch (System.Exception ex)
            {
                GISharp.Runtime.GMarshal.PushUnhandledException(ex);
            }

            return default(GISharp.Runtime.Boolean);
        }
    }
}