// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// A callback function used by the type system to do base initialization
    /// of the class structures of derived types. It is called as part of the
    /// initialization process of all derived classes and should reallocate
    /// or reset all dynamic class members copied over from the parent class.
    /// For example, class members (such as strings) that are not sufficiently
    /// handled by a plain memory copy of the parent class into the derived class
    /// have to be altered. See GClassInitFunc() for a discussion of the class
    /// initialization process.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedBaseInitFunc(
    /* <type name="TypeClass" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.TypeClass.UnmanagedStruct* gClass);

    /// <include file="BaseInitFunc.xmldoc" path="declaration/member[@name='BaseInitFunc']/*" />
    public delegate void BaseInitFunc(GISharp.Lib.GObject.TypeClass gClass);

    /// <summary>
    /// Class for marshalling <see cref="BaseInitFunc"/> methods.
    /// </summary>
    public static unsafe class BaseInitFuncMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="BaseInitFunc"/>.
        /// </summary>
        public static GISharp.Lib.GObject.BaseInitFunc FromPointer(delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.TypeClass.UnmanagedStruct*, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(GISharp.Lib.GObject.TypeClass gClass)
            {
                var gClass_ = (GISharp.Lib.GObject.TypeClass.UnmanagedStruct*)gClass.UnsafeHandle;
                callback_(gClass_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            return managedCallback;
        }
    }
}