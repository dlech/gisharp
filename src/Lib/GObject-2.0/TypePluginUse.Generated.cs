// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// The type of the @use_plugin function of #GTypePluginClass, which gets called
    /// to increase the use count of @plugin.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" managed-name="System.Void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedTypePluginUse(
    /* <type name="TypePlugin" type="GTypePlugin*" managed-name="TypePlugin" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.TypePlugin.UnmanagedStruct* plugin);

    /// <include file="TypePluginUse.xmldoc" path="declaration/member[@name='TypePluginUse']/*" />
    public delegate void TypePluginUse(GISharp.Lib.GObject.ITypePlugin plugin);

    /// <summary>
    /// Class for marshalling <see cref="TypePluginUse"/> methods.
    /// </summary>
    public static unsafe class TypePluginUseMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="TypePluginUse"/>.
        /// </summary>
        public static GISharp.Lib.GObject.TypePluginUse FromPointer(delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.TypePlugin.UnmanagedStruct*, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(GISharp.Lib.GObject.ITypePlugin plugin)
            {
                var plugin_ = (GISharp.Lib.GObject.TypePlugin.UnmanagedStruct*)plugin.UnsafeHandle;
                callback_(plugin_);
            }

            return managedCallback;
        }
    }
}