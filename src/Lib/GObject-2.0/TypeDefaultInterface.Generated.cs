// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <include file="TypeDefaultInterface.xmldoc" path="declaration/member[@name='TypeDefaultInterface']/*" />
    public sealed unsafe partial class TypeDefaultInterface : GISharp.Lib.GObject.TypeInterface
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
        }

        /// <summary>
        /// Increments the reference count for the interface type @g_type,
        /// and returns the default interface vtable for the type.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If the type is not currently in use, then the default vtable
        /// for the type will be created and initialized by calling
        /// the base interface init and default vtable init functions for
        /// the type (the @base_init and @class_init members of #GTypeInfo).
        /// Calling g_type_default_interface_ref() is useful when you
        /// want to make sure that signals and properties for an interface
        /// have been installed.
        /// </para>
        /// </remarks>
        /// <param name="gType">
        /// an interface type
        /// </param>
        /// <returns>
        /// the default
        ///     vtable for the interface; call g_type_default_interface_unref()
        ///     when you are done using the interface.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="TypeInterface" type="gpointer" managed-name="TypeInterface" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GObject.TypeInterface.UnmanagedStruct* g_type_default_interface_ref(
        /* <type name="GType" type="GType" managed-name="GISharp.Runtime.GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType gType);
        static partial void CheckRefArgs(GISharp.Runtime.GType gType);

        [GISharp.Runtime.SinceAttribute("2.4")]
        static GISharp.Lib.GObject.TypeInterface.UnmanagedStruct* Ref(GISharp.Runtime.GType gType)
        {
            CheckRefArgs(gType);
            var gType_ = (GISharp.Runtime.GType)gType;
            var ret_ = g_type_default_interface_ref(gType_);
            return ret_;
        }

        /// <include file="TypeDefaultInterface.xmldoc" path="declaration/member[@name='TypeDefaultInterface.TypeDefaultInterface(GISharp.Runtime.GType)']/*" />
        [GISharp.Runtime.SinceAttribute("2.4")]
        public TypeDefaultInterface(GISharp.Runtime.GType gType) : this((System.IntPtr)Ref(gType), GISharp.Runtime.Transfer.Full)
        {
        }

        /// <summary>
        /// If the interface type @g_type is currently in use, returns its
        /// default interface vtable.
        /// </summary>
        /// <param name="gType">
        /// an interface type
        /// </param>
        /// <returns>
        /// the default
        ///     vtable for the interface, or %NULL if the type is not currently
        ///     in use
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="TypeInterface" type="gpointer" managed-name="TypeInterface" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.TypeInterface.UnmanagedStruct* g_type_default_interface_peek(
        /* <type name="GType" type="GType" managed-name="GISharp.Runtime.GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType gType);

        /// <summary>
        /// Decrements the reference count for the type corresponding to the
        /// interface default vtable @g_iface. If the type is dynamic, then
        /// when no one is using the interface and all references have
        /// been released, the finalize function for the interface's default
        /// vtable (the @class_finalize member of #GTypeInfo) will be called.
        /// </summary>
        /// <param name="gIface">
        /// the default vtable
        ///     structure for an interface, as returned by g_type_default_interface_ref()
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_type_default_interface_unref(
        /* <type name="TypeInterface" type="gpointer" managed-name="TypeInterface" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypeInterface.UnmanagedStruct* gIface);
    }
}