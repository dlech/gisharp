<declaration>

<member name='Value.GType'>
</member>

<member name='Value.Data'>
</member>

<member name='Value.Boolean'>
<summary>
Get the contents of a %G_TYPE_BOOLEAN <see cref="Value"/>.
</summary>
</member>

<member name='Value.Boxed'>
<summary>
Get the contents of a %G_TYPE_BOXED derived <see cref="Value"/>.
</summary>
</member>

<member name='Value.Char'>
<summary>
Do not use this function; it is broken on platforms where the %char
type is unsigned, such as ARM and PowerPC.  See <see cref="Value.GetSchar()"/>.
</summary>
<remarks>
<para>
Get the contents of a %G_TYPE_CHAR <see cref="Value"/>.
</para>
</remarks>
</member>

<member name='Value.Double'>
<summary>
Get the contents of a %G_TYPE_DOUBLE <see cref="Value"/>.
</summary>
</member>

<member name='Value.Enum'>
<summary>
Get the contents of a %G_TYPE_ENUM <see cref="Value"/>.
</summary>
</member>

<member name='Value.Flags'>
<summary>
Get the contents of a %G_TYPE_FLAGS <see cref="Value"/>.
</summary>
</member>

<member name='Value.Float'>
<summary>
Get the contents of a %G_TYPE_FLOAT <see cref="Value"/>.
</summary>
</member>

<member name='Value.Gtype'>
<summary>
Get the contents of a %G_TYPE_GTYPE <see cref="Value"/>.
</summary>
</member>

<member name='Value.Int'>
<summary>
Get the contents of a %G_TYPE_INT <see cref="Value"/>.
</summary>
</member>

<member name='Value.Int64'>
<summary>
Get the contents of a %G_TYPE_INT64 <see cref="Value"/>.
</summary>
</member>

<member name='Value.Long'>
<summary>
Get the contents of a %G_TYPE_LONG <see cref="Value"/>.
</summary>
</member>

<member name='Value.Object'>
</member>

<member name='Value.Param'>
</member>

<member name='Value.Pointer'>
<summary>
Get the contents of a pointer <see cref="Value"/>.
</summary>
</member>

<member name='Value.Schar'>
<summary>
Get the contents of a %G_TYPE_CHAR <see cref="Value"/>.
</summary>
</member>

<member name='Value.String'>
</member>

<member name='Value.Uchar'>
<summary>
Get the contents of a %G_TYPE_UCHAR <see cref="Value"/>.
</summary>
</member>

<member name='Value.Uint'>
<summary>
Get the contents of a %G_TYPE_UINT <see cref="Value"/>.
</summary>
</member>

<member name='Value.Uint64'>
<summary>
Get the contents of a %G_TYPE_UINT64 <see cref="Value"/>.
</summary>
</member>

<member name='Value.Ulong'>
<summary>
Get the contents of a %G_TYPE_ULONG <see cref="Value"/>.
</summary>
</member>

<member name='Value.Variant'>
<summary>
Get the contents of a variant <see cref="Value"/>.
</summary>
</member>

<member name='Value.TypeCompatible(GISharp.Runtime.GType,GISharp.Runtime.GType)'>
<summary>
Returns whether a <see cref="Value"/> of type <paramref name="srcType"/> can be copied into
a <see cref="Value"/> of type <paramref name="destType"/>.
</summary>
<param name="srcType">
source type to be copied.
</param>
<param name="destType">
destination type for copying.
</param>
<returns>
<c>true</c> if <see cref="Value.Copy(GISharp.Lib.GObject.Value)"/> is possible with <paramref name="srcType"/> and <paramref name="destType"/>.
</returns>
</member>

<member name='Value.TypeTransformable(GISharp.Runtime.GType,GISharp.Runtime.GType)'>
<summary>
Check whether <see cref="Value.Transform(GISharp.Lib.GObject.Value)"/> is able to transform values
of type <paramref name="srcType"/> into values of type <paramref name="destType"/>. Note that for
the types to be transformable, they must be compatible or a
transformation function must be registered.
</summary>
<param name="srcType">
Source type.
</param>
<param name="destType">
Target type.
</param>
<returns>
<c>true</c> if the transformation is possible, <c>false</c> otherwise.
</returns>
</member>

<member name='Value.Copy(GISharp.Lib.GObject.Value)'>
<summary>
Copies the value of this instance into <paramref name="destValue"/>.
</summary>
<param name="destValue">
An initialized <see cref="Value"/> structure of the same type as this instance.
</param>
</member>

<member name='Value.DupObject()'>
<summary>
Get the contents of a %G_TYPE_OBJECT derived <see cref="Value"/>, increasing
its reference count. If the contents of the <see cref="Value"/> are <c>null</c>, then
<c>null</c> will be returned.
</summary>
<returns>
object content of this instance,
         should be unreferenced when no longer needed.
</returns>
</member>

<member name='Value.DupString()'>
<summary>
Get a copy the contents of a %G_TYPE_STRING <see cref="Value"/>.
</summary>
<returns>
a newly allocated copy of the string content of this instance
</returns>
</member>

<member name='Value.DupVariant()'>
<summary>
Get the contents of a variant <see cref="Value"/>, increasing its refcount. The returned
#GVariant is never floating.
</summary>
<returns>
variant contents of this instance (may be <c>null</c>);
   should be unreffed using g_variant_unref() when no longer needed
</returns>
</member>

<member name='Value.FitsPointer()'>
<summary>
Determines if this instance will fit inside the size of a pointer value.
This is an internal function introduced mainly for C marshallers.
</summary>
<returns>
<c>true</c> if this instance will fit inside a pointer value.
</returns>
</member>

<member name='Value.Init(GISharp.Runtime.GType)'>
<summary>
Initializes this instance with the default value of <c>type</c>.
</summary>
<param name="gType">
Type the <see cref="Value"/> should hold values of.
</param>
<returns>
the <see cref="Value"/> structure that has been passed in
</returns>
</member>

<member name='Value.InitFromInstance(GISharp.Lib.GObject.TypeInstance)'>
<summary>
Initializes and sets this instance from an instantiatable type via the
value_table's collect_value() function.
</summary>
<remarks>
<para>
Note: The this instance will be initialised with the exact type of
<paramref name="instance"/>.  If you wish to set the this instance's type to a different GType
(such as a parent class GType), you need to manually call
<see cref="Value.Init(GISharp.Runtime.GType)"/> and <see cref="Value.SetInstance(System.IntPtr)"/>.
</para>
</remarks>
<param name="instance">
the instance
</param>
</member>

<member name='Value.PeekPointer()'>
<summary>
Returns the value contents as pointer. This function asserts that
<see cref="Value.FitsPointer()"/> returned <c>true</c> for the passed in value.
This is an internal function introduced mainly for C marshallers.
</summary>
<returns>
the value contents as pointer
</returns>
</member>

<member name='Value.Reset()'>
<summary>
Clears the current value in this instance and resets it to the default value
(as if the value had just been initialized).
</summary>
<returns>
the <see cref="Value"/> structure that has been passed in
</returns>
</member>

<member name='Value.SetBoxedTakeOwnership(System.IntPtr)'>
<summary>
This is an internal function introduced mainly for C marshallers.
</summary>
<param name="vBoxed">
duplicated unowned boxed value to be set
</param>
</member>

<member name='Value.SetInstance(System.IntPtr)'>
<summary>
Sets this instance from an instantiatable type via the
value_table's collect_value() function.
</summary>
<param name="instance">
the instance
</param>
</member>

<member name='Value.SetInternedString(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Set the contents of a %G_TYPE_STRING <see cref="Value"/> to <paramref name="vString"/>.  The string is
assumed to be static and interned (canonical, for example from
g_intern_string()), and is thus not duplicated when setting the <see cref="Value"/>.
</summary>
<param name="vString">
static string to be set
</param>
</member>

<member name='Value.SetStaticBoxed(System.IntPtr)'>
<summary>
Set the contents of a %G_TYPE_BOXED derived <see cref="Value"/> to <paramref name="vBoxed"/>.
The boxed value is assumed to be static, and is thus not duplicated
when setting the <see cref="Value"/>.
</summary>
<param name="vBoxed">
static boxed value to be set
</param>
</member>

<member name='Value.SetStaticString(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Set the contents of a %G_TYPE_STRING <see cref="Value"/> to <paramref name="vString"/>.
The string is assumed to be static, and is thus not duplicated
when setting the <see cref="Value"/>.
</summary>
<remarks>
<para>
If the the string is a canonical string, using <see cref="Value.SetInternedString(GISharp.Lib.GLib.NullableUnownedUtf8)"/>
is more appropriate.
</para>
</remarks>
<param name="vString">
static string to be set
</param>
</member>

<member name='Value.SetStringTakeOwnership(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
This is an internal function introduced mainly for C marshallers.
</summary>
<param name="vString">
duplicated unowned string to be set
</param>
</member>

<member name='Value.TakeBoxed(System.IntPtr)'>
<summary>
Sets the contents of a %G_TYPE_BOXED derived <see cref="Value"/> to <paramref name="vBoxed"/>
and takes over the ownership of the caller’s reference to <paramref name="vBoxed"/>;
the caller doesn’t have to unref it any more.
</summary>
<param name="vBoxed">
duplicated unowned boxed value to be set
</param>
</member>

<member name='Value.TakeString(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Sets the contents of a %G_TYPE_STRING <see cref="Value"/> to <paramref name="vString"/>.
</summary>
<param name="vString">
string to take ownership of
</param>
</member>

<member name='Value.TakeVariant(GISharp.Lib.GLib.Variant?)'>
<summary>
Set the contents of a variant <see cref="Value"/> to <paramref name="variant"/>, and takes over
the ownership of the caller's reference to <paramref name="variant"/>;
the caller doesn't have to unref it any more (i.e. the reference
count of the variant is not increased).
</summary>
<remarks>
<para>
If <paramref name="variant"/> was floating then its floating reference is converted to
a hard reference.
</para>
<para>
If you want the <see cref="Value"/> to hold its own reference to <paramref name="variant"/>, use
<see cref="Value.SetVariant(GISharp.Lib.GLib.Variant)"/> instead.
</para>
<para>
This is an internal function introduced mainly for C marshallers.
</para>
</remarks>
<param name="variant">
a #GVariant, or <c>null</c>
</param>
</member>

<member name='Value.Transform(GISharp.Lib.GObject.Value)'>
<summary>
Tries to cast the contents of this instance into a type appropriate
to store in <paramref name="destValue"/>, e.g. to transform a %G_TYPE_INT value
into a %G_TYPE_FLOAT value. Performing transformations between
value types might incur precision lossage. Especially
transformations into strings might reveal seemingly arbitrary
results and shouldn't be relied upon for production code (such
as rcfile value or object property serialization).
</summary>
<param name="destValue">
Target value.
</param>
<returns>
Whether a transformation rule was found and could be applied.
 Upon failing transformations, <paramref name="destValue"/> is left untouched.
</returns>
</member>

<member name='Value.Unset()'>
<summary>
Clears the current value in this instance (if any) and "unsets" the type,
this releases all resources associated with this GValue. An unset
value is the same as an uninitialized (zero-filled) <see cref="Value"/>
structure.
</summary>
</member>

<member name='Value'>
<summary>
An opaque structure used to hold different types of values.
The data within the structure has protected scope: it is accessible only
to functions within a <see cref="TypeValueTable"/> structure, or implementations of
the g_value_*() API. That is, code portions which implement new fundamental
types.
<see cref="Value"/> users cannot make any assumptions about how data is stored
within the 2 element <see cref="Data"/> union, and the <see cref="GType"/> member should
only be accessed through the G_VALUE_TYPE() macro.
</summary>
</member>

</declaration>
