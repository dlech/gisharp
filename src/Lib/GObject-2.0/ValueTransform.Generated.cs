// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// The type of value transformation functions which can be registered with
    /// g_value_register_transform_func().
    /// </summary>
    /// <remarks>
    /// <para>
    /// @dest_value will be initialized to the correct destination type.
    /// </para>
    /// </remarks>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" managed-name="System.Void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedValueTransform(
    /* <type name="Value" type="const GValue*" managed-name="Value" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Value* srcValue,
    /* <type name="Value" type="GValue*" managed-name="Value" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Value* destValue);

    /// <include file="ValueTransform.xmldoc" path="declaration/member[@name='ValueTransform']/*" />
    public delegate void ValueTransform(in GISharp.Lib.GObject.Value srcValue, ref GISharp.Lib.GObject.Value destValue);

    /// <summary>
    /// Class for marshalling <see cref="ValueTransform"/> methods.
    /// </summary>
    public static unsafe class ValueTransformMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="ValueTransform"/>.
        /// </summary>
        public static GISharp.Lib.GObject.ValueTransform FromPointer(delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Value*, GISharp.Lib.GObject.Value*, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(in GISharp.Lib.GObject.Value srcValue, ref GISharp.Lib.GObject.Value destValue)
            {
                fixed (GISharp.Lib.GObject.Value* destValue_ = &destValue)
                {
                    fixed (GISharp.Lib.GObject.Value* srcValue_ = &srcValue)
                    {
                        callback_(srcValue_, destValue_);
                    }
                }
            }

            return managedCallback;
        }
    }
}