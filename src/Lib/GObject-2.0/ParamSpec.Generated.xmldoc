<declaration>

<member name='UnmanagedStruct.GTypeInstance'>
<summary>
private <see cref="TypeInstance"/> portion
</summary>
</member>

<member name='UnmanagedStruct.Name'>
<summary>
name of this parameter: always an interned string
</summary>
</member>

<member name='UnmanagedStruct.Flags'>
<summary>
<see cref="ParamFlags"/> flags for this parameter
</summary>
</member>

<member name='UnmanagedStruct.ValueType'>
<summary>
the <see cref="Value"/> type for this parameter
</summary>
</member>

<member name='UnmanagedStruct.OwnerType'>
<summary>
<see cref="Type"/> type that uses (introduces) this parameter
</summary>
</member>

<member name='UnmanagedStruct.Nick'>
</member>

<member name='UnmanagedStruct.Blurb'>
</member>

<member name='UnmanagedStruct.Qdata'>
</member>

<member name='UnmanagedStruct.RefCount'>
</member>

<member name='UnmanagedStruct.ParamId'>
</member>

<member name='ParamSpec.Blurb'>
<summary>
Get the short description of a <see cref="ParamSpec"/>.
</summary>
</member>

<member name='ParamSpec.DefaultValue'>
<summary>
Gets the default value of this instance as a pointer to a <see cref="Value"/>.
</summary>
<remarks>
The <see cref="Value"/> will remain valid for the life of this instance.
</remarks>
</member>

<member name='ParamSpec.Name'>
<summary>
Get the name of a <see cref="ParamSpec"/>.
</summary>
<remarks>
The name is always an "interned" string (as per g_intern_string()).
This allows for pointer-value comparisons.
</remarks>
</member>

<member name='ParamSpec.NameQuark'>
<summary>
Gets the GQuark for the name.
</summary>
</member>

<member name='ParamSpec.Nick'>
<summary>
Get the nickname of a <see cref="ParamSpec"/>.
</summary>
</member>

<member name='ParamSpec.RedirectTarget'>
<summary>
If the paramspec redirects operations to another paramspec,
returns that paramspec. Redirect is used typically for
providing a new implementation of a property in a derived
type while preserving all the properties from the parent
type. Redirection is established by creating a property
of type #GParamSpecOverride. See <see cref="ObjectClass.OverrideProperty(uint,GISharp.Lib.GLib.UnownedUtf8)"/>
for an example of the use of this capability.
</summary>
</member>

<member name='ParamSpec.IsValidName(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Validate a property name for a <see cref="ParamSpec"/>. This can be useful for
dynamically-generated properties which need to be validated at run-time
before actually trying to create them.
</summary>
<remarks>
See [canonical parameter names][canonical-parameter-names] for details of
the rules for valid names.
</remarks>
<param name="name">
the canonical name of the property
</param>
<returns>
<c>true</c> if <paramref name="name"/> is a valid property name, <c>false</c> otherwise.
</returns>
</member>

<member name='ParamSpec.GetQdata(GISharp.Lib.GLib.Quark)'>
<summary>
Gets back user data pointers stored via <see cref="ParamSpec.SetQdata(GISharp.Lib.GLib.Quark,System.IntPtr)"/>.
</summary>
<param name="quark">
a #GQuark, naming the user data pointer
</param>
<returns>
the user data pointer set, or <c>null</c>
</returns>
</member>

<member name='ParamSpec.SetQdata(GISharp.Lib.GLib.Quark,System.IntPtr)'>
<summary>
Sets an opaque, named pointer on a <see cref="ParamSpec"/>. The name is
specified through a #GQuark (retrieved e.g. via
g_quark_from_static_string()), and the pointer can be gotten back
from the this instance with <see cref="ParamSpec.GetQdata(GISharp.Lib.GLib.Quark)"/>.  Setting a
previously set user data pointer, overrides (frees) the old pointer
set, using <c>null</c> as pointer essentially removes the data stored.
</summary>
<param name="quark">
a #GQuark, naming the user data pointer
</param>
<param name="data">
an opaque user data pointer
</param>
</member>

<member name='ParamSpec.Sink()'>
<summary>
The initial reference count of a newly created <see cref="ParamSpec"/> is 1,
even though no one has explicitly called g_param_spec_ref() on it
yet. So the initial reference count is flagged as "floating", until
someone calls `g_param_spec_ref (pspec); g_param_spec_sink
(pspec);` in sequence on it, taking over the initial
reference count (thus ending up with a this instance that has a reference
count of 1 still, but is not flagged "floating" anymore).
</summary>
</member>

<member name='ParamSpec.StealQdata(GISharp.Lib.GLib.Quark)'>
<summary>
Gets back user data pointers stored via <see cref="ParamSpec.SetQdata(GISharp.Lib.GLib.Quark,System.IntPtr)"/>
and removes the <c>data</c> from this instance without invoking its destroy()
function (if any was set).  Usually, calling this function is only
required to update user data pointers with a destroy notifier.
</summary>
<param name="quark">
a #GQuark, naming the user data pointer
</param>
<returns>
the user data pointer set, or <c>null</c>
</returns>
</member>

<member name='ParamSpec.DoFinalize()'>
</member>

<member name='ParamSpec.DoValueSetDefault(GISharp.Lib.GObject.Value)'>
</member>

<member name='ParamSpec.DoValueValidate(GISharp.Lib.GObject.Value)'>
</member>

<member name='ParamSpec.DoValuesCmp(GISharp.Lib.GObject.Value,GISharp.Lib.GObject.Value)'>
</member>

<member name='ParamSpec'>
<summary>
<see cref="ParamSpec"/> is an object structure that encapsulates the metadata
required to specify parameters, such as e.g. <see cref="Object"/> properties.
</summary>
<remarks>
## Parameter names # {#canonical-parameter-names}

A property name consists of one or more segments consisting of ASCII letters
and digits, separated by either the `-` or `_` character. The first
character of a property name must be a letter. These are the same rules as
for signal naming (see g_signal_new()).

When creating and looking up a <see cref="ParamSpec"/>, either separator can be
used, but they cannot be mixed. Using `-` is considerably more
efficient, and is the ‘canonical form’. Using `_` is discouraged.
</remarks>
</member>

</declaration>
