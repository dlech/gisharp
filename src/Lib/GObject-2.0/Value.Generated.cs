// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <include file="Value.xmldoc" path="declaration/member[@name='Value']/*" />
    [GISharp.Runtime.GTypeAttribute("GValue", IsProxyForUnmanagedType = true)]
    public unsafe partial struct Value
    {
        private static readonly GISharp.Runtime.GType _GType = g_value_get_type();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.internedString']/*" />
        [GISharp.Runtime.SinceAttribute("2.66")]
        private const int internedString = 268435456;

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.nocopyContents']/*" />
        private const int nocopyContents = 134217728;
#pragma warning disable CS0169, CS0414, CS0649
        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.gType']/*" />
        private readonly GISharp.Runtime.GType gType;

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.data0']/*" />
        private readonly GISharp.Lib.GObject._Value__data__union data0;

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.data1']/*" />
        private readonly GISharp.Lib.GObject._Value__data__union data1;
#pragma warning restore CS0169, CS0414, CS0649
        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Boolean']/*" />
        public bool Boolean { get => GetBoolean(); set => SetBoolean(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Double']/*" />
        public double Double { get => GetDouble(); set => SetDouble(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Enum']/*" />
        public int Enum { get => GetEnum(); set => SetEnum(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Flags']/*" />
        public uint Flags { get => GetFlags(); set => SetFlags(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Float']/*" />
        public float Float { get => GetFloat(); set => SetFloat(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.GType']/*" />
        [GISharp.Runtime.SinceAttribute("2.12")]
        public GISharp.Runtime.GType GType { get => GetGType(); set => SetGType(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Int']/*" />
        public int Int { get => GetInt(); set => SetInt(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Int64']/*" />
        public long Int64 { get => GetInt64(); set => SetInt64(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Long']/*" />
        public GISharp.Runtime.CLong Long { get => GetLong(); set => SetLong(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Object']/*" />
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute]
        public GISharp.Lib.GObject.Object Object { get => GetObject(); set => SetObject(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Param']/*" />
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute]
        public GISharp.Lib.GObject.ParamSpec Param { get => GetParam(); set => SetParam(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Pointer']/*" />
        public System.IntPtr Pointer { get => GetPointer(); set => SetPointer(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Char']/*" />
        [GISharp.Runtime.SinceAttribute("2.32")]
        public sbyte Char { get => GetChar(); set => SetChar(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.String']/*" />
        [System.Diagnostics.CodeAnalysis.AllowNullAttribute]
        public GISharp.Lib.GLib.UnownedUtf8 String { get => GetString(); set => SetString(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.UChar']/*" />
        public byte UChar { get => GetUChar(); set => SetUChar(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.UInt']/*" />
        public uint UInt { get => GetUInt(); set => SetUInt(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.UInt64']/*" />
        public ulong UInt64 { get => GetUInt64(); set => SetUInt64(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.ULong']/*" />
        public GISharp.Runtime.CULong ULong { get => GetULong(); set => SetULong(value); }

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Variant']/*" />
        [GISharp.Runtime.SinceAttribute("2.26")]
        public GISharp.Lib.GLib.Variant? Variant { get => GetVariant(); set => SetVariant(value); }

        /// <summary>
        /// Registers a value transformation function for use in g_value_transform().
        /// A previously registered transformation function for @src_type and @dest_type
        /// will be replaced.
        /// </summary>
        /// <param name="srcType">
        /// Source type.
        /// </param>
        /// <param name="destType">
        /// Target type.
        /// </param>
        /// <param name="transformFunc">
        /// a function which transforms values of type @src_type
        ///  into value of type @dest_type
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_register_transform_func(
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType srcType,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType destType,
        /* <type name="ValueTransform" type="GValueTransform" /> */
        /* transfer-ownership:none direction:in */
        delegate* unmanaged[Cdecl]<GISharp.Lib.GObject.Value*, GISharp.Lib.GObject.Value*, void> transformFunc);

        /// <summary>
        /// Returns whether a #GValue of type @src_type can be copied into
        /// a #GValue of type @dest_type.
        /// </summary>
        /// <param name="srcType">
        /// source type to be copied.
        /// </param>
        /// <param name="destType">
        /// destination type for copying.
        /// </param>
        /// <returns>
        /// %TRUE if g_value_copy() is possible with @src_type and @dest_type.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_value_type_compatible(
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType srcType,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType destType);
        static partial void CheckTypeCompatibleArgs(GISharp.Runtime.GType srcType, GISharp.Runtime.GType destType);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.TypeCompatible(GISharp.Runtime.GType,GISharp.Runtime.GType)']/*" />
        public static bool TypeCompatible(GISharp.Runtime.GType srcType, GISharp.Runtime.GType destType)
        {
            CheckTypeCompatibleArgs(srcType, destType);
            var srcType_ = (GISharp.Runtime.GType)srcType;
            var destType_ = (GISharp.Runtime.GType)destType;
            var ret_ = g_value_type_compatible(srcType_,destType_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Check whether g_value_transform() is able to transform values
        /// of type @src_type into values of type @dest_type. Note that for
        /// the types to be transformable, they must be compatible or a
        /// transformation function must be registered.
        /// </summary>
        /// <param name="srcType">
        /// Source type.
        /// </param>
        /// <param name="destType">
        /// Target type.
        /// </param>
        /// <returns>
        /// %TRUE if the transformation is possible, %FALSE otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_value_type_transformable(
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType srcType,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType destType);
        static partial void CheckTypeTransformableArgs(GISharp.Runtime.GType srcType, GISharp.Runtime.GType destType);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.TypeTransformable(GISharp.Runtime.GType,GISharp.Runtime.GType)']/*" />
        public static bool TypeTransformable(GISharp.Runtime.GType srcType, GISharp.Runtime.GType destType)
        {
            CheckTypeTransformableArgs(srcType, destType);
            var srcType_ = (GISharp.Runtime.GType)srcType;
            var destType_ = (GISharp.Runtime.GType)destType;
            var ret_ = g_value_type_transformable(srcType_,destType_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Return a newly allocated string, which describes the contents of a
        /// #GValue.  The main purpose of this function is to describe #GValue
        /// contents for debugging output, the way in which the contents are
        /// described may change between different GLib versions.
        /// </summary>
        /// <param name="value">
        /// #GValue which contents are to be described.
        /// </param>
        /// <returns>
        /// Newly allocated string.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern byte* g_strdup_value_contents(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Runtime.GType g_value_get_type();

        /// <summary>
        /// Copies the value of @src_value into @dest_value.
        /// </summary>
        /// <param name="srcValue">
        /// An initialized #GValue structure.
        /// </param>
        /// <param name="destValue">
        /// An initialized #GValue structure of the same type as @src_value.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_copy(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* srcValue,
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* destValue);
        partial void CheckCopyArgs(ref GISharp.Lib.GObject.Value destValue);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Copy(GISharp.Lib.GObject.Value)']/*" />
        public void Copy(ref GISharp.Lib.GObject.Value destValue)
        {
            fixed (GISharp.Lib.GObject.Value* destValue_ = &destValue)
            {
                fixed (GISharp.Lib.GObject.Value* this_ = &this)
                {
                    CheckCopyArgs(ref destValue);
                    var srcValue_ = this_;
                    g_value_copy(srcValue_, destValue_);
                    GISharp.Runtime.GMarshal.PopUnhandledException();
                }
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_OBJECT derived #GValue, increasing
        /// its reference count. If the contents of the #GValue are %NULL, then
        /// %NULL will be returned.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue whose type is derived from %G_TYPE_OBJECT
        /// </param>
        /// <returns>
        /// object content of @value,
        ///          should be unreferenced when no longer needed.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Object" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GObject.Object.UnmanagedStruct* g_value_dup_object(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckDupObjectArgs();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.DupObject()']/*" />
        public GISharp.Lib.GObject.Object DupObject()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckDupObjectArgs();
                var value_ = this_;
                var ret_ = g_value_dup_object(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
                return ret;
            }
        }

        /// <summary>
        /// Get a copy the contents of a %G_TYPE_STRING #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <returns>
        /// a newly allocated copy of the string content of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern byte* g_value_dup_string(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckDupStringArgs();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.DupString()']/*" />
        public GISharp.Lib.GLib.Utf8 DupString()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckDupStringArgs();
                var value_ = this_;
                var ret_ = g_value_dup_string(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Lib.GLib.Utf8.GetInstance<GISharp.Lib.GLib.Utf8>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a variant #GValue, increasing its refcount. The returned
        /// #GVariant is never floating.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_VARIANT
        /// </param>
        /// <returns>
        /// variant contents of @value (may be %NULL);
        ///    should be unreffed using g_variant_unref() when no longer needed
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.26")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.Variant" type="GVariant*" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 direction:in */
        private static extern GISharp.Lib.GLib.Variant.UnmanagedStruct* g_value_dup_variant(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckDupVariantArgs();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.DupVariant()']/*" />
        [GISharp.Runtime.SinceAttribute("2.26")]
        public GISharp.Lib.GLib.Variant? DupVariant()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckDupVariantArgs();
                var value_ = this_;
                var ret_ = g_value_dup_variant(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Lib.GLib.Variant.GetInstance<GISharp.Lib.GLib.Variant>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full);
                return ret;
            }
        }

        /// <summary>
        /// Determines if @value will fit inside the size of a pointer value.
        /// This is an internal function introduced mainly for C marshallers.
        /// </summary>
        /// <param name="value">
        /// An initialized #GValue structure.
        /// </param>
        /// <returns>
        /// %TRUE if @value will fit inside a pointer value.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_value_fits_pointer(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckFitsPointerArgs();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.FitsPointer()']/*" />
        public bool FitsPointer()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckFitsPointerArgs();
                var value_ = this_;
                var ret_ = g_value_fits_pointer(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_BOOLEAN #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_BOOLEAN
        /// </param>
        /// <returns>
        /// boolean contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_value_get_boolean(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetBooleanArgs();

        private bool GetBoolean()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetBooleanArgs();
                var value_ = this_;
                var ret_ = g_value_get_boolean(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_BOXED derived #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_BOXED derived type
        /// </param>
        /// <returns>
        /// boxed contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_value_get_boxed(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);

        /// <summary>
        /// Get the contents of a %G_TYPE_DOUBLE #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_DOUBLE
        /// </param>
        /// <returns>
        /// double contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gdouble" type="gdouble" /> */
        /* transfer-ownership:none direction:in */
        private static extern double g_value_get_double(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetDoubleArgs();

        private double GetDouble()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetDoubleArgs();
                var value_ = this_;
                var ret_ = g_value_get_double(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (double)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_ENUM #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue whose type is derived from %G_TYPE_ENUM
        /// </param>
        /// <returns>
        /// enum contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        private static extern int g_value_get_enum(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetEnumArgs();

        private int GetEnum()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetEnumArgs();
                var value_ = this_;
                var ret_ = g_value_get_enum(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (int)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_FLAGS #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue whose type is derived from %G_TYPE_FLAGS
        /// </param>
        /// <returns>
        /// flags contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_value_get_flags(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetFlagsArgs();

        private uint GetFlags()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetFlagsArgs();
                var value_ = this_;
                var ret_ = g_value_get_flags(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (uint)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_FLOAT #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_FLOAT
        /// </param>
        /// <returns>
        /// float contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gfloat" type="gfloat" /> */
        /* transfer-ownership:none direction:in */
        private static extern float g_value_get_float(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetFloatArgs();

        private float GetFloat()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetFloatArgs();
                var value_ = this_;
                var ret_ = g_value_get_float(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (float)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_GTYPE #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_GTYPE
        /// </param>
        /// <returns>
        /// the #GType stored in @value
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.12")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.GType g_value_get_gtype(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetGTypeArgs();

        [GISharp.Runtime.SinceAttribute("2.12")]
        private GISharp.Runtime.GType GetGType()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetGTypeArgs();
                var value_ = this_;
                var ret_ = g_value_get_gtype(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (GISharp.Runtime.GType)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_INT #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_INT
        /// </param>
        /// <returns>
        /// integer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        private static extern int g_value_get_int(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetIntArgs();

        private int GetInt()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetIntArgs();
                var value_ = this_;
                var ret_ = g_value_get_int(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (int)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_INT64 #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_INT64
        /// </param>
        /// <returns>
        /// 64bit integer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint64" type="gint64" /> */
        /* transfer-ownership:none direction:in */
        private static extern long g_value_get_int64(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetInt64Args();

        private long GetInt64()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetInt64Args();
                var value_ = this_;
                var ret_ = g_value_get_int64(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (long)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_LONG #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_LONG
        /// </param>
        /// <returns>
        /// long integer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="glong" type="glong" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.CLong g_value_get_long(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetLongArgs();

        private GISharp.Runtime.CLong GetLong()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetLongArgs();
                var value_ = this_;
                var ret_ = g_value_get_long(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (GISharp.Runtime.CLong)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_OBJECT derived #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_OBJECT derived type
        /// </param>
        /// <returns>
        /// object contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Object" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.Object.UnmanagedStruct* g_value_get_object(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetObjectArgs();

        private GISharp.Lib.GObject.Object GetObject()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetObjectArgs();
                var value_ = this_;
                var ret_ = g_value_get_object(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Lib.GObject.Object.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)ret_, GISharp.Runtime.Transfer.None)!;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_PARAM #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue whose type is derived from %G_TYPE_PARAM
        /// </param>
        /// <returns>
        /// #GParamSpec content of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* g_value_get_param(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetParamArgs();

        private GISharp.Lib.GObject.ParamSpec GetParam()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetParamArgs();
                var value_ = this_;
                var ret_ = g_value_get_param(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Lib.GObject.ParamSpec.GetInstance<GISharp.Lib.GObject.ParamSpec>((System.IntPtr)ret_, GISharp.Runtime.Transfer.None)!;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a pointer #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_POINTER
        /// </param>
        /// <returns>
        /// pointer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_value_get_pointer(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetPointerArgs();

        private System.IntPtr GetPointer()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetPointerArgs();
                var value_ = this_;
                var ret_ = g_value_get_pointer(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (System.IntPtr)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_CHAR #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_CHAR
        /// </param>
        /// <returns>
        /// signed 8 bit integer contents of @value
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.32")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint8" type="gint8" /> */
        /* transfer-ownership:none direction:in */
        private static extern sbyte g_value_get_schar(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetCharArgs();

        [GISharp.Runtime.SinceAttribute("2.32")]
        private sbyte GetChar()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetCharArgs();
                var value_ = this_;
                var ret_ = g_value_get_schar(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (sbyte)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_STRING #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <returns>
        /// string content of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern byte* g_value_get_string(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetStringArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetString()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetStringArgs();
                var value_ = this_;
                var ret_ = g_value_get_string(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_UCHAR #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_UCHAR
        /// </param>
        /// <returns>
        /// unsigned character contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint8" type="guchar" /> */
        /* transfer-ownership:none direction:in */
        private static extern byte g_value_get_uchar(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetUCharArgs();

        private byte GetUChar()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetUCharArgs();
                var value_ = this_;
                var ret_ = g_value_get_uchar(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (byte)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_UINT #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_UINT
        /// </param>
        /// <returns>
        /// unsigned integer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        private static extern uint g_value_get_uint(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetUIntArgs();

        private uint GetUInt()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetUIntArgs();
                var value_ = this_;
                var ret_ = g_value_get_uint(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (uint)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_UINT64 #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_UINT64
        /// </param>
        /// <returns>
        /// unsigned 64bit integer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint64" type="guint64" /> */
        /* transfer-ownership:none direction:in */
        private static extern ulong g_value_get_uint64(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetUInt64Args();

        private ulong GetUInt64()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetUInt64Args();
                var value_ = this_;
                var ret_ = g_value_get_uint64(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (ulong)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a %G_TYPE_ULONG #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_ULONG
        /// </param>
        /// <returns>
        /// unsigned long integer contents of @value
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gulong" type="gulong" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.CULong g_value_get_ulong(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetULongArgs();

        private GISharp.Runtime.CULong GetULong()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetULongArgs();
                var value_ = this_;
                var ret_ = g_value_get_ulong(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = (GISharp.Runtime.CULong)ret_;
                return ret;
            }
        }

        /// <summary>
        /// Get the contents of a variant #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_VARIANT
        /// </param>
        /// <returns>
        /// variant contents of @value (may be %NULL)
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.26")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.Variant" type="GVariant*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern GISharp.Lib.GLib.Variant.UnmanagedStruct* g_value_get_variant(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckGetVariantArgs();

        [GISharp.Runtime.SinceAttribute("2.26")]
        private GISharp.Lib.GLib.Variant? GetVariant()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckGetVariantArgs();
                var value_ = this_;
                var ret_ = g_value_get_variant(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                var ret = GISharp.Lib.GLib.Variant.GetInstance<GISharp.Lib.GLib.Variant>((System.IntPtr)ret_, GISharp.Runtime.Transfer.None);
                return ret;
            }
        }

        /// <summary>
        /// Initializes @value with the default value of @type.
        /// </summary>
        /// <param name="value">
        /// A zero-filled (uninitialized) #GValue structure.
        /// </param>
        /// <param name="gType">
        /// Type the #GValue should hold values of.
        /// </param>
        /// <returns>
        /// the #GValue structure that has been passed in
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.Value* g_value_init(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType gType);
        partial void CheckInitArgs(GISharp.Runtime.GType gType);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Init(GISharp.Runtime.GType)']/*" />
        public ref readonly GISharp.Lib.GObject.Value Init(GISharp.Runtime.GType gType)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckInitArgs(gType);
                var value_ = this_;
                var gType_ = (GISharp.Runtime.GType)gType;
                var ret_ = g_value_init(value_,gType_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                ref var ret = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.Value>(ret_);
                return ref ret;
            }
        }

        /// <summary>
        /// Initializes and sets @value from an instantiatable type via the
        /// value_table's collect_value() function.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Note: The @value will be initialised with the exact type of
        /// @instance.  If you wish to set the @value's type to a different GType
        /// (such as a parent class GType), you need to manually call
        /// g_value_init() and g_value_set_instance().
        /// </para>
        /// </remarks>
        /// <param name="value">
        /// An uninitialized #GValue structure.
        /// </param>
        /// <param name="instance">
        /// the instance
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.42")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_init_from_instance(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="TypeInstance" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypeInstance.UnmanagedStruct* instance);
        partial void CheckInitArgs(GISharp.Lib.GObject.TypeInstance instance);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Init(GISharp.Lib.GObject.TypeInstance)']/*" />
        [GISharp.Runtime.SinceAttribute("2.42")]
        public void Init(GISharp.Lib.GObject.TypeInstance instance)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckInitArgs(instance);
                var value_ = this_;
                var instance_ = (GISharp.Lib.GObject.TypeInstance.UnmanagedStruct*)instance.UnsafeHandle;
                g_value_init_from_instance(value_, instance_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Returns the value contents as pointer. This function asserts that
        /// g_value_fits_pointer() returned %TRUE for the passed in value.
        /// This is an internal function introduced mainly for C marshallers.
        /// </summary>
        /// <param name="value">
        /// An initialized #GValue structure
        /// </param>
        /// <returns>
        /// the value contents as pointer
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_value_peek_pointer(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);

        /// <summary>
        /// Clears the current value in @value and resets it to the default value
        /// (as if the value had just been initialized).
        /// </summary>
        /// <param name="value">
        /// An initialized #GValue structure.
        /// </param>
        /// <returns>
        /// the #GValue structure that has been passed in
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GObject.Value* g_value_reset(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckResetArgs();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Reset()']/*" />
        public ref readonly GISharp.Lib.GObject.Value Reset()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckResetArgs();
                var value_ = this_;
                var ret_ = g_value_reset(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
                ref var ret = ref System.Runtime.CompilerServices.Unsafe.AsRef<GISharp.Lib.GObject.Value>(ret_);
                return ref ret;
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_BOOLEAN #GValue to @v_boolean.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_BOOLEAN
        /// </param>
        /// <param name="vBoolean">
        /// boolean value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_boolean(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.Boolean vBoolean);
        partial void CheckSetBooleanArgs(bool vBoolean);

        private void SetBoolean(bool vBoolean)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetBooleanArgs(vBoolean);
                var value_ = this_;
                var vBoolean_ = GISharp.Runtime.BooleanExtensions.ToBoolean(vBoolean);
                g_value_set_boolean(value_, vBoolean_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_BOXED derived type
        /// </param>
        /// <param name="vBoxed">
        /// boxed value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_boxed(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr vBoxed);

        /// <summary>
        /// This is an internal function introduced mainly for C marshallers.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_BOXED derived type
        /// </param>
        /// <param name="vBoxed">
        /// duplicated unowned boxed value to be set
        /// </param>
        [System.ObsoleteAttribute("Use g_value_take_boxed() instead.")]
        [GISharp.Runtime.DeprecatedSinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_boxed_take_ownership(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr vBoxed);

        /// <summary>
        /// Set the contents of a %G_TYPE_DOUBLE #GValue to @v_double.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_DOUBLE
        /// </param>
        /// <param name="vDouble">
        /// double value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_double(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gdouble" type="gdouble" /> */
        /* transfer-ownership:none direction:in */
        double vDouble);
        partial void CheckSetDoubleArgs(double vDouble);

        private void SetDouble(double vDouble)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetDoubleArgs(vDouble);
                var value_ = this_;
                var vDouble_ = (double)vDouble;
                g_value_set_double(value_, vDouble_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_ENUM #GValue to @v_enum.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue whose type is derived from %G_TYPE_ENUM
        /// </param>
        /// <param name="vEnum">
        /// enum value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_enum(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        int vEnum);
        partial void CheckSetEnumArgs(int vEnum);

        private void SetEnum(int vEnum)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetEnumArgs(vEnum);
                var value_ = this_;
                var vEnum_ = (int)vEnum;
                g_value_set_enum(value_, vEnum_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_FLAGS #GValue to @v_flags.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue whose type is derived from %G_TYPE_FLAGS
        /// </param>
        /// <param name="vFlags">
        /// flags value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_flags(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint vFlags);
        partial void CheckSetFlagsArgs(uint vFlags);

        private void SetFlags(uint vFlags)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetFlagsArgs(vFlags);
                var value_ = this_;
                var vFlags_ = (uint)vFlags;
                g_value_set_flags(value_, vFlags_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_FLOAT #GValue to @v_float.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_FLOAT
        /// </param>
        /// <param name="vFloat">
        /// float value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_float(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gfloat" type="gfloat" /> */
        /* transfer-ownership:none direction:in */
        float vFloat);
        partial void CheckSetFloatArgs(float vFloat);

        private void SetFloat(float vFloat)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetFloatArgs(vFloat);
                var value_ = this_;
                var vFloat_ = (float)vFloat;
                g_value_set_float(value_, vFloat_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_GTYPE #GValue to @v_gtype.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_GTYPE
        /// </param>
        /// <param name="vGtype">
        /// #GType to be set
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.12")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_gtype(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType vGtype);
        partial void CheckSetGTypeArgs(GISharp.Runtime.GType vGtype);

        [GISharp.Runtime.SinceAttribute("2.12")]
        private void SetGType(GISharp.Runtime.GType vGtype)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetGTypeArgs(vGtype);
                var value_ = this_;
                var vGtype_ = (GISharp.Runtime.GType)vGtype;
                g_value_set_gtype(value_, vGtype_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Sets @value from an instantiatable type via the
        /// value_table's collect_value() function.
        /// </summary>
        /// <param name="value">
        /// An initialized #GValue structure.
        /// </param>
        /// <param name="instance">
        /// the instance
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_instance(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="TypeInstance" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        GISharp.Lib.GObject.TypeInstance.UnmanagedStruct* instance);
        partial void CheckSetArgs(GISharp.Lib.GObject.TypeInstance? instance);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Set(GISharp.Lib.GObject.TypeInstance?)']/*" />
        public void Set(GISharp.Lib.GObject.TypeInstance? instance)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetArgs(instance);
                var value_ = this_;
                var instance_ = (GISharp.Lib.GObject.TypeInstance.UnmanagedStruct*)(instance?.UnsafeHandle ?? System.IntPtr.Zero);
                g_value_set_instance(value_, instance_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_INT #GValue to @v_int.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_INT
        /// </param>
        /// <param name="vInt">
        /// integer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_int(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gint" type="gint" /> */
        /* transfer-ownership:none direction:in */
        int vInt);
        partial void CheckSetIntArgs(int vInt);

        private void SetInt(int vInt)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetIntArgs(vInt);
                var value_ = this_;
                var vInt_ = (int)vInt;
                g_value_set_int(value_, vInt_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_INT64 #GValue to @v_int64.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_INT64
        /// </param>
        /// <param name="vInt64">
        /// 64bit integer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_int64(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gint64" type="gint64" /> */
        /* transfer-ownership:none direction:in */
        long vInt64);
        partial void CheckSetInt64Args(long vInt64);

        private void SetInt64(long vInt64)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetInt64Args(vInt64);
                var value_ = this_;
                var vInt64_ = (long)vInt64;
                g_value_set_int64(value_, vInt64_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_STRING #GValue to @v_string.  The string is
        /// assumed to be static and interned (canonical, for example from
        /// g_intern_string()), and is thus not duplicated when setting the #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <param name="vString">
        /// static string to be set
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.66")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_interned_string(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        byte* vString);
        partial void CheckSetInternedStringArgs(GISharp.Lib.GLib.NullableUnownedUtf8 vString);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.SetInternedString(GISharp.Lib.GLib.NullableUnownedUtf8)']/*" />
        [GISharp.Runtime.SinceAttribute("2.66")]
        public void SetInternedString(GISharp.Lib.GLib.NullableUnownedUtf8 vString)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetInternedStringArgs(vString);
                var value_ = this_;
                var vString_ = (byte*)vString.UnsafeHandle;
                g_value_set_interned_string(value_, vString_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_LONG #GValue to @v_long.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_LONG
        /// </param>
        /// <param name="vLong">
        /// long integer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_long(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="glong" type="glong" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.CLong vLong);
        partial void CheckSetLongArgs(GISharp.Runtime.CLong vLong);

        private void SetLong(GISharp.Runtime.CLong vLong)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetLongArgs(vLong);
                var value_ = this_;
                var vLong_ = (GISharp.Runtime.CLong)vLong;
                g_value_set_long(value_, vLong_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_OBJECT derived #GValue to @v_object.
        /// </summary>
        /// <remarks>
        /// <para>
        /// g_value_set_object() increases the reference count of @v_object
        /// (the #GValue holds a reference to @v_object).  If you do not wish
        /// to increase the reference count of the object (i.e. you wish to
        /// pass your current reference to the #GValue because you no longer
        /// need it), use g_value_take_object() instead.
        /// </para>
        /// <para>
        /// It is important that your #GValue holds a reference to @v_object (either its
        /// own, or one it has taken) to ensure that the object won't be destroyed while
        /// the #GValue still exists).
        /// </para>
        /// </remarks>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_OBJECT derived type
        /// </param>
        /// <param name="vObject">
        /// object value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_object(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="Object" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        GISharp.Lib.GObject.Object.UnmanagedStruct* vObject);
        partial void CheckSetObjectArgs(GISharp.Lib.GObject.Object? vObject);

        private void SetObject(GISharp.Lib.GObject.Object? vObject)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetObjectArgs(vObject);
                var value_ = this_;
                var vObject_ = (GISharp.Lib.GObject.Object.UnmanagedStruct*)(vObject?.UnsafeHandle ?? System.IntPtr.Zero);
                g_value_set_object(value_, vObject_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_PARAM #GValue to @param.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_PARAM
        /// </param>
        /// <param name="param">
        /// the #GParamSpec to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_param(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="ParamSpec" type="GParamSpec*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        GISharp.Lib.GObject.ParamSpec.UnmanagedStruct* param);
        partial void CheckSetParamArgs(GISharp.Lib.GObject.ParamSpec? param);

        private void SetParam(GISharp.Lib.GObject.ParamSpec? param)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetParamArgs(param);
                var value_ = this_;
                var param_ = (GISharp.Lib.GObject.ParamSpec.UnmanagedStruct*)(param?.UnsafeHandle ?? System.IntPtr.Zero);
                g_value_set_param(value_, param_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a pointer #GValue to @v_pointer.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_POINTER
        /// </param>
        /// <param name="vPointer">
        /// pointer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_pointer(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr vPointer);
        partial void CheckSetPointerArgs(System.IntPtr vPointer);

        private void SetPointer(System.IntPtr vPointer)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetPointerArgs(vPointer);
                var value_ = this_;
                var vPointer_ = (System.IntPtr)vPointer;
                g_value_set_pointer(value_, vPointer_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_CHAR #GValue to @v_char.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_CHAR
        /// </param>
        /// <param name="vChar">
        /// signed 8 bit integer to be set
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.32")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_schar(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gint8" type="gint8" /> */
        /* transfer-ownership:none direction:in */
        sbyte vChar);
        partial void CheckSetCharArgs(sbyte vChar);

        [GISharp.Runtime.SinceAttribute("2.32")]
        private void SetChar(sbyte vChar)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetCharArgs(vChar);
                var value_ = this_;
                var vChar_ = (sbyte)vChar;
                g_value_set_schar(value_, vChar_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed.
        /// The boxed value is assumed to be static, and is thus not duplicated
        /// when setting the #GValue.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_BOXED derived type
        /// </param>
        /// <param name="vBoxed">
        /// static boxed value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_static_boxed(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr vBoxed);

        /// <summary>
        /// Set the contents of a %G_TYPE_STRING #GValue to @v_string.
        /// The string is assumed to be static, and is thus not duplicated
        /// when setting the #GValue.
        /// </summary>
        /// <remarks>
        /// <para>
        /// If the the string is a canonical string, using g_value_set_interned_string()
        /// is more appropriate.
        /// </para>
        /// </remarks>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <param name="vString">
        /// static string to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_static_string(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        byte* vString);
        partial void CheckSetStaticStringArgs(GISharp.Lib.GLib.NullableUnownedUtf8 vString);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.SetStaticString(GISharp.Lib.GLib.NullableUnownedUtf8)']/*" />
        public void SetStaticString(GISharp.Lib.GLib.NullableUnownedUtf8 vString)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetStaticStringArgs(vString);
                var value_ = this_;
                var vString_ = (byte*)vString.UnsafeHandle;
                g_value_set_static_string(value_, vString_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_STRING #GValue to @v_string.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <param name="vString">
        /// caller-owned string to be duplicated for the #GValue
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_string(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="utf8" type="const gchar*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        byte* vString);
        partial void CheckSetStringArgs(GISharp.Lib.GLib.NullableUnownedUtf8 vString);

        private void SetString(GISharp.Lib.GLib.NullableUnownedUtf8 vString)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetStringArgs(vString);
                var value_ = this_;
                var vString_ = (byte*)vString.UnsafeHandle;
                g_value_set_string(value_, vString_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// This is an internal function introduced mainly for C marshallers.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <param name="vString">
        /// duplicated unowned string to be set
        /// </param>
        [System.ObsoleteAttribute("Use g_value_take_string() instead.")]
        [GISharp.Runtime.DeprecatedSinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_string_take_ownership(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        byte* vString);

        /// <summary>
        /// Set the contents of a %G_TYPE_UCHAR #GValue to @v_uchar.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_UCHAR
        /// </param>
        /// <param name="vUchar">
        /// unsigned character value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_uchar(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="guint8" type="guchar" /> */
        /* transfer-ownership:none direction:in */
        byte vUchar);
        partial void CheckSetUCharArgs(byte vUchar);

        private void SetUChar(byte vUchar)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetUCharArgs(vUchar);
                var value_ = this_;
                var vUchar_ = (byte)vUchar;
                g_value_set_uchar(value_, vUchar_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_UINT #GValue to @v_uint.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_UINT
        /// </param>
        /// <param name="vUint">
        /// unsigned integer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_uint(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="guint" type="guint" /> */
        /* transfer-ownership:none direction:in */
        uint vUint);
        partial void CheckSetUIntArgs(uint vUint);

        private void SetUInt(uint vUint)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetUIntArgs(vUint);
                var value_ = this_;
                var vUint_ = (uint)vUint;
                g_value_set_uint(value_, vUint_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_UINT64 #GValue to @v_uint64.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_UINT64
        /// </param>
        /// <param name="vUint64">
        /// unsigned 64bit integer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_uint64(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="guint64" type="guint64" /> */
        /* transfer-ownership:none direction:in */
        ulong vUint64);
        partial void CheckSetUInt64Args(ulong vUint64);

        private void SetUInt64(ulong vUint64)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetUInt64Args(vUint64);
                var value_ = this_;
                var vUint64_ = (ulong)vUint64;
                g_value_set_uint64(value_, vUint64_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a %G_TYPE_ULONG #GValue to @v_ulong.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_ULONG
        /// </param>
        /// <param name="vUlong">
        /// unsigned long integer value to be set
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_ulong(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gulong" type="gulong" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.CULong vUlong);
        partial void CheckSetULongArgs(GISharp.Runtime.CULong vUlong);

        private void SetULong(GISharp.Runtime.CULong vUlong)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetULongArgs(vUlong);
                var value_ = this_;
                var vUlong_ = (GISharp.Runtime.CULong)vUlong;
                g_value_set_ulong(value_, vUlong_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Set the contents of a variant #GValue to @variant.
        /// If the variant is floating, it is consumed.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_VARIANT
        /// </param>
        /// <param name="variant">
        /// a #GVariant, or %NULL
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.26")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_set_variant(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="GLib.Variant" type="GVariant*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        GISharp.Lib.GLib.Variant.UnmanagedStruct* variant);
        partial void CheckSetVariantArgs(GISharp.Lib.GLib.Variant? variant);

        [GISharp.Runtime.SinceAttribute("2.26")]
        private void SetVariant(GISharp.Lib.GLib.Variant? variant)
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckSetVariantArgs(variant);
                var value_ = this_;
                var variant_ = (GISharp.Lib.GLib.Variant.UnmanagedStruct*)(variant?.UnsafeHandle ?? System.IntPtr.Zero);
                g_value_set_variant(value_, variant_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Sets the contents of a %G_TYPE_BOXED derived #GValue to @v_boxed
        /// and takes over the ownership of the caller’s reference to @v_boxed;
        /// the caller doesn’t have to unref it any more.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of %G_TYPE_BOXED derived type
        /// </param>
        /// <param name="vBoxed">
        /// duplicated unowned boxed value to be set
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_take_boxed(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="gpointer" type="gconstpointer" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.IntPtr vBoxed);

        /// <summary>
        /// Sets the contents of a %G_TYPE_STRING #GValue to @v_string.
        /// </summary>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_STRING
        /// </param>
        /// <param name="vString">
        /// string to take ownership of
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.4")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_take_string(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="utf8" type="gchar*" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        byte* vString);

        /// <summary>
        /// Set the contents of a variant #GValue to @variant, and takes over
        /// the ownership of the caller's reference to @variant;
        /// the caller doesn't have to unref it any more (i.e. the reference
        /// count of the variant is not increased).
        /// </summary>
        /// <remarks>
        /// <para>
        /// If @variant was floating then its floating reference is converted to
        /// a hard reference.
        /// </para>
        /// <para>
        /// If you want the #GValue to hold its own reference to @variant, use
        /// g_value_set_variant() instead.
        /// </para>
        /// <para>
        /// This is an internal function introduced mainly for C marshallers.
        /// </para>
        /// </remarks>
        /// <param name="value">
        /// a valid #GValue of type %G_TYPE_VARIANT
        /// </param>
        /// <param name="variant">
        /// a #GVariant, or %NULL
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.26")]
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_take_variant(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value,
        /* <type name="GLib.Variant" type="GVariant*" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 allow-none:1 direction:in */
        GISharp.Lib.GLib.Variant.UnmanagedStruct* variant);

        /// <summary>
        /// Tries to cast the contents of @src_value into a type appropriate
        /// to store in @dest_value, e.g. to transform a %G_TYPE_INT value
        /// into a %G_TYPE_FLOAT value. Performing transformations between
        /// value types might incur precision lossage. Especially
        /// transformations into strings might reveal seemingly arbitrary
        /// results and shouldn't be relied upon for production code (such
        /// as rcfile value or object property serialization).
        /// </summary>
        /// <param name="srcValue">
        /// Source value.
        /// </param>
        /// <param name="destValue">
        /// Target value.
        /// </param>
        /// <returns>
        /// Whether a transformation rule was found and could be applied.
        ///  Upon failing transformations, @dest_value is left untouched.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_value_transform(
        /* <type name="Value" type="const GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* srcValue,
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* destValue);
        partial void CheckTransformArgs(ref GISharp.Lib.GObject.Value destValue);

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Transform(GISharp.Lib.GObject.Value)']/*" />
        public bool Transform(ref GISharp.Lib.GObject.Value destValue)
        {
            fixed (GISharp.Lib.GObject.Value* destValue_ = &destValue)
            {
                fixed (GISharp.Lib.GObject.Value* this_ = &this)
                {
                    CheckTransformArgs(ref destValue);
                    var srcValue_ = this_;
                    var ret_ = g_value_transform(srcValue_,destValue_);
                    GISharp.Runtime.GMarshal.PopUnhandledException();
                    var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
                    return ret;
                }
            }
        }

        /// <summary>
        /// Clears the current value in @value (if any) and "unsets" the type,
        /// this releases all resources associated with this GValue. An unset
        /// value is the same as an uninitialized (zero-filled) #GValue
        /// structure.
        /// </summary>
        /// <param name="value">
        /// An initialized #GValue structure.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_value_unset(
        /* <type name="Value" type="GValue*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Value* value);
        partial void CheckUnsetArgs();

        /// <include file="Value.xmldoc" path="declaration/member[@name='Value.Unset()']/*" />
        public void Unset()
        {
            fixed (GISharp.Lib.GObject.Value* this_ = &this)
            {
                CheckUnsetArgs();
                var value_ = this_;
                g_value_unset(value_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }
    }
}