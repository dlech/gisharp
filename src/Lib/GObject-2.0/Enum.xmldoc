<declaration>

<member name='Enum.CompleteTypeInfo(GISharp.Runtime.GType,GISharp.Lib.GObject.TypeInfo,GISharp.Runtime.UnownedZeroTerminatedCArray&lt;GISharp.Lib.GObject.EnumValue&gt;)'>
<summary>
This function is meant to be called from the `complete_type_info`
function of a <see cref="T:ITypePlugin"/> implementation, as in the following
example:
</summary>
<remarks>
<para>
|[&lt;!-- language="C" --&gt;
static void
my_enum_complete_type_info (GTypePlugin     *plugin,
                            GType            g_type,
                            GTypeInfo       *info,
                            GTypeValueTable *value_table)
{
  static const GEnumValue values[] = {
    { MY_ENUM_FOO, "MY_ENUM_FOO", "foo" },
    { MY_ENUM_BAR, "MY_ENUM_BAR", "bar" },
    { 0, NULL, NULL }
  };
</para>
<para>
  g_enum_complete_type_info (type, info, values);
}
]|
</para>
</remarks>
<param name="gEnumType">
the type identifier of the type being completed
</param>
<param name="info">
the <see cref="TypeInfo"/> struct to be filled in
</param>
<param name="constValues">
An array of <see cref="EnumValue"/> structs for the possible
 enumeration values. The array is terminated by a struct with all
 members being 0.
</param>
</member>

<member name='Enum.GetValue(GISharp.Lib.GObject.EnumClass,int)'>
<summary>
Returns the <see cref="EnumValue"/> for a value.
</summary>
<param name="enumClass">
a <see cref="EnumClass"/>
</param>
<param name="value">
the value to look up
</param>
<returns>
the <see cref="EnumValue"/> for <paramref name="value"/>, or <c>null</c>
         if <paramref name="value"/> is not a member of the enumeration
</returns>
</member>

<member name='Enum.GetValueByName(GISharp.Lib.GObject.EnumClass,GISharp.Runtime.UnownedUtf8)'>
<summary>
Looks up a <see cref="EnumValue"/> by name.
</summary>
<param name="enumClass">
a <see cref="EnumClass"/>
</param>
<param name="name">
the name to look up
</param>
<returns>
the <see cref="EnumValue"/> with name <paramref name="name"/>,
         or <c>null</c> if the enumeration doesn't have a member
         with that name
</returns>
</member>

<member name='Enum.GetValueByNick(GISharp.Lib.GObject.EnumClass,GISharp.Runtime.UnownedUtf8)'>
<summary>
Looks up a <see cref="EnumValue"/> by nickname.
</summary>
<param name="enumClass">
a <see cref="EnumClass"/>
</param>
<param name="nick">
the nickname to look up
</param>
<returns>
the <see cref="EnumValue"/> with nickname <paramref name="nick"/>,
         or <c>null</c> if the enumeration doesn't have a member
         with that nickname
</returns>
</member>

<member name='Enum.RegisterStatic(GISharp.Runtime.UnownedUtf8,GISharp.Runtime.UnownedZeroTerminatedCArray&lt;GISharp.Lib.GObject.EnumValue&gt;)'>
<summary>
Registers a new static enumeration type with the name <paramref name="name"/>.
</summary>
<remarks>
<para>
It is normally more convenient to let [glib-mkenums][glib-mkenums],
generate a my_enum_get_type() function from a usual C enumeration
definition  than to write one yourself using <see cref="Enum.RegisterStatic(GISharp.Runtime.UnownedUtf8,GISharp.Runtime.UnownedZeroTerminatedCArray{GISharp.Lib.GObject.EnumValue})"/>.
</para>
</remarks>
<param name="name">
A nul-terminated string used as the name of the new type.
</param>
<param name="constStaticValues">
An array of <see cref="EnumValue"/> structs for the possible
 enumeration values. The array is terminated by a struct with all
 members being 0. GObject keeps a reference to the data, so it cannot
 be stack-allocated.
</param>
<returns>
The new type identifier.
</returns>
</member>

<member name='Enum.ToString(GISharp.Runtime.GType,int)'>
<summary>
Pretty-prints <paramref name="value"/> in the form of the enumâ€™s name.
</summary>
<remarks>
<para>
This is intended to be used for debugging purposes. The format of the output
may change in the future.
</para>
</remarks>
<param name="gEnumType">
the type identifier of a <see cref="EnumClass"/> type
</param>
<param name="value">
the value
</param>
<returns>
a newly-allocated text string
</returns>
</member>

<member name='Enum'>
</member>

</declaration>
