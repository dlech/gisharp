<declaration>

<member name='UnmanagedStruct.Bits0'>
</member>

<member name='UnmanagedStruct.Marshal'>
</member>

<member name='UnmanagedStruct.Data'>
</member>

<member name='UnmanagedStruct.Notifiers'>
</member>

<member name='Closure.Closure(uint,GISharp.Lib.GObject.Object)'>
<summary>
A variant of <see cref="Closure.Closure(uint,System.IntPtr)"/> which stores <paramref name="object"/> in the
<c>data</c> field of the closure and calls <see cref="Object.WatchClosure(GISharp.Lib.GObject.Closure)"/> on
<paramref name="object"/> and the created closure. This function is mainly useful
when implementing new types of closures.
</summary>
<param name="sizeofClosure">
the size of the structure to allocate, must be at least
 `sizeof (GClosure)`
</param>
<param name="object">
a <see cref="Object"/> pointer to store in the <c>data</c> field of the newly
 allocated <see cref="Closure"/>
</param>
</member>

<member name='Closure.Closure(uint,System.IntPtr)'>
<summary>
Allocates a struct of the given size and initializes the initial
part as a <see cref="Closure"/>. This function is mainly useful when
implementing new types of closures.
</summary>
<remarks>
<para>
|[&lt;!-- language="C" --&gt;
typedef struct _MyClosure MyClosure;
struct _MyClosure
{
  GClosure closure;
  // extra data goes here
};
</para>
<para>
static void
my_closure_finalize (gpointer  notify_data,
                     GClosure *closure)
{
  MyClosure *my_closure = (MyClosure *)closure;
</para>
<para>
  // free extra data here
}
</para>
<para>
MyClosure *my_closure_new (gpointer data)
{
  GClosure *closure;
  MyClosure *my_closure;
</para>
<para>
  closure = g_closure_new_simple (sizeof (MyClosure), data);
  my_closure = (MyClosure *) closure;
</para>
<para>
  // initialize extra data here
</para>
<para>
  g_closure_add_finalize_notifier (closure, notify_data,
                                   my_closure_finalize);
  return my_closure;
}
]|
</para>
</remarks>
<param name="sizeofClosure">
the size of the structure to allocate, must be at least
                 `sizeof (GClosure)`
</param>
<param name="data">
data to store in the <paramref name="data"/> field of the newly allocated <see cref="Closure"/>
</param>
</member>

<member name='Closure.Invalidate()'>
<summary>
Sets a flag on the closure to indicate that its calling
environment has become invalid, and thus causes any future
invocations of <see cref="Closure.Invoke(out GISharp.Lib.GObject.Value,System.ReadOnlySpan{GISharp.Lib.GObject.Value},System.IntPtr)"/> on this this instance to be
ignored.
</summary>
<remarks>
<para>
Also, invalidation notifiers installed on the closure will
be called at this point.
</para>
<para>
Note that <see cref="Closure.Invalidate()"/> will also be called when the
reference count of a closure drops to zero (unless it has already
been invalidated before).
</para>
</remarks>
</member>

<member name='Closure.Invoke(GISharp.Lib.GObject.Value,System.ReadOnlySpan&lt;GISharp.Lib.GObject.Value&gt;,System.IntPtr)'>
<summary>
Invokes the closure, i.e. executes the callback represented by the this instance.
</summary>
<param name="returnValue">
a <see cref="Value"/> to store the return
               value. May be <c>null</c> if the callback of this instance
               doesn't return a value.
</param>
<param name="paramValues">
an array of
               #GValues holding the arguments on which to
               invoke the callback of this instance
</param>
<param name="invocationHint">
a context-dependent invocation hint
</param>
</member>

<member name='Closure'>
<summary>
A <see cref="Closure"/> represents a callback supplied by the programmer.
</summary>
<remarks>
<para>
It will generally comprise a function of some kind and a marshaller
used to call it. It is the responsibility of the marshaller to
convert the arguments for the invocation from <see cref="Value"/>s into
a suitable form, perform the callback on the converted arguments,
and transform the return value back into a <see cref="Value"/>.
</para>
<para>
In the case of C programs, a closure usually just holds a pointer
to a function and maybe a data argument, and the marshaller
converts between <see cref="Value"/> and native C types. The GObject
library provides the <see cref="CClosure"/> type for this purpose. Bindings for
other languages need marshallers which convert between <see cref="Value"/>s
and suitable representations in the runtime of the language in
order to use functions written in that language as callbacks. Use
g_closure_set_marshal() to set the marshaller on such a custom
closure implementation.
</para>
<para>
Within GObject, closures play an important role in the
implementation of signals. When a signal is registered, the
<c>cMarshaller</c> argument to g_signal_new() specifies the default C
marshaller for any closure which is connected to this
signal. GObject provides a number of C marshallers for this
purpose, see the g_cclosure_marshal_*() functions. Additional C
marshallers can be generated with the [glib-genmarshal][glib-genmarshal]
utility.  Closures can be explicitly connected to signals with
<see cref="Signal.Connect(GISharp.Lib.GObject.Object,GISharp.Runtime.UnownedUtf8,GISharp.Lib.GObject.Closure,bool)"/>, but it usually more convenient to let
GObject create a closure automatically by using one of the
g_signal_connect_*() functions which take a callback function/user
data pair.
</para>
<para>
Using closures has a number of important advantages over a simple
callback function/data pointer combination:
</para>
<para>
- Closures allow the callee to get the types of the callback parameters,
  which means that language bindings don't have to write individual glue
  for each callback type.
</para>
<para>
- The reference counting of <see cref="Closure"/> makes it easy to handle reentrancy
  right; if a callback is removed while it is being invoked, the closure
  and its parameters won't be freed until the invocation finishes.
</para>
<para>
- <see cref="Closure.Invalidate()"/> and invalidation notifiers allow callbacks to be
  automatically removed when the objects they point to go away.
</para>
</remarks>
</member>

</declaration>
