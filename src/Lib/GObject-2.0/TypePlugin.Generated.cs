// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <include file="TypePlugin.xmldoc" path="declaration/member[@name='ITypePlugin']/*" />
    [GISharp.Runtime.GTypeAttribute("GTypePlugin", IsProxyForUnmanagedType = true)]
    public unsafe partial interface ITypePlugin : GISharp.Lib.GObject.GInterface<GISharp.Lib.GObject.Object>
    {
        private static readonly GISharp.Runtime.GType _GType = g_type_plugin_get_type();

        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Runtime.GType g_type_plugin_get_type();
    }

    /// <summary>
    /// Extension methods for <see cref="ITypePlugin"/>
    /// </summary>
    public static unsafe partial class TypePlugin
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public struct UnmanagedStruct
        {
        }

        /// <summary>
        /// Calls the @complete_interface_info function from the
        /// #GTypePluginClass of @plugin. There should be no need to use this
        /// function outside of the GObject type system itself.
        /// </summary>
        /// <param name="plugin">
        /// the #GTypePlugin
        /// </param>
        /// <param name="instanceType">
        /// the #GType of an instantiable type to which the interface
        ///  is added
        /// </param>
        /// <param name="interfaceType">
        /// the #GType of the interface whose info is completed
        /// </param>
        /// <param name="info">
        /// the #GInterfaceInfo to fill in
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_type_plugin_complete_interface_info(
        /* <type name="TypePlugin" type="GTypePlugin*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypePlugin.UnmanagedStruct* plugin,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType instanceType,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType interfaceType,
        /* <type name="InterfaceInfo" type="GInterfaceInfo*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.InterfaceInfo* info);
        static partial void CheckCompleteInterfaceInfoArgs(this GISharp.Lib.GObject.ITypePlugin plugin, GISharp.Runtime.GType instanceType, GISharp.Runtime.GType interfaceType, ref GISharp.Lib.GObject.InterfaceInfo info);

        /// <include file="TypePlugin.xmldoc" path="declaration/member[@name='TypePlugin.CompleteInterfaceInfo(GISharp.Lib.GObject.ITypePlugin,GISharp.Runtime.GType,GISharp.Runtime.GType,GISharp.Lib.GObject.InterfaceInfo)']/*" />
        public static void CompleteInterfaceInfo(this GISharp.Lib.GObject.ITypePlugin plugin, GISharp.Runtime.GType instanceType, GISharp.Runtime.GType interfaceType, ref GISharp.Lib.GObject.InterfaceInfo info)
        {
            fixed (GISharp.Lib.GObject.InterfaceInfo* info_ = &info)
            {
                CheckCompleteInterfaceInfoArgs(plugin, instanceType, interfaceType, ref info);
                var plugin_ = (GISharp.Lib.GObject.TypePlugin.UnmanagedStruct*)plugin.UnsafeHandle;
                var instanceType_ = (GISharp.Runtime.GType)instanceType;
                var interfaceType_ = (GISharp.Runtime.GType)interfaceType;
                g_type_plugin_complete_interface_info(plugin_, instanceType_, interfaceType_, info_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }
        }

        /// <summary>
        /// Calls the @complete_type_info function from the #GTypePluginClass of @plugin.
        /// There should be no need to use this function outside of the GObject
        /// type system itself.
        /// </summary>
        /// <param name="plugin">
        /// a #GTypePlugin
        /// </param>
        /// <param name="gType">
        /// the #GType whose info is completed
        /// </param>
        /// <param name="info">
        /// the #GTypeInfo struct to fill in
        /// </param>
        /// <param name="valueTable">
        /// the #GTypeValueTable to fill in
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_type_plugin_complete_type_info(
        /* <type name="TypePlugin" type="GTypePlugin*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypePlugin.UnmanagedStruct* plugin,
        /* <type name="GType" type="GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.GType gType,
        /* <type name="TypeInfo" type="GTypeInfo*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypeInfo* info,
        /* <type name="TypeValueTable" type="GTypeValueTable*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypeValueTable* valueTable);
        static partial void CheckCompleteTypeInfoArgs(this GISharp.Lib.GObject.ITypePlugin plugin, GISharp.Runtime.GType gType, ref GISharp.Lib.GObject.TypeInfo info, ref GISharp.Lib.GObject.TypeValueTable valueTable);

        /// <include file="TypePlugin.xmldoc" path="declaration/member[@name='TypePlugin.CompleteTypeInfo(GISharp.Lib.GObject.ITypePlugin,GISharp.Runtime.GType,GISharp.Lib.GObject.TypeInfo,GISharp.Lib.GObject.TypeValueTable)']/*" />
        public static void CompleteTypeInfo(this GISharp.Lib.GObject.ITypePlugin plugin, GISharp.Runtime.GType gType, ref GISharp.Lib.GObject.TypeInfo info, ref GISharp.Lib.GObject.TypeValueTable valueTable)
        {
            fixed (GISharp.Lib.GObject.TypeValueTable* valueTable_ = &valueTable)
            {
                fixed (GISharp.Lib.GObject.TypeInfo* info_ = &info)
                {
                    CheckCompleteTypeInfoArgs(plugin, gType, ref info, ref valueTable);
                    var plugin_ = (GISharp.Lib.GObject.TypePlugin.UnmanagedStruct*)plugin.UnsafeHandle;
                    var gType_ = (GISharp.Runtime.GType)gType;
                    g_type_plugin_complete_type_info(plugin_, gType_, info_, valueTable_);
                    GISharp.Runtime.GMarshal.PopUnhandledException();
                }
            }
        }

        /// <summary>
        /// Calls the @unuse_plugin function from the #GTypePluginClass of
        /// @plugin.  There should be no need to use this function outside of
        /// the GObject type system itself.
        /// </summary>
        /// <param name="plugin">
        /// a #GTypePlugin
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_type_plugin_unuse(
        /* <type name="TypePlugin" type="GTypePlugin*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypePlugin.UnmanagedStruct* plugin);
        static partial void CheckUnuseArgs(this GISharp.Lib.GObject.ITypePlugin plugin);

        /// <include file="TypePlugin.xmldoc" path="declaration/member[@name='TypePlugin.Unuse(GISharp.Lib.GObject.ITypePlugin)']/*" />
        public static void Unuse(this GISharp.Lib.GObject.ITypePlugin plugin)
        {
            CheckUnuseArgs(plugin);
            var plugin_ = (GISharp.Lib.GObject.TypePlugin.UnmanagedStruct*)plugin.UnsafeHandle;
            g_type_plugin_unuse(plugin_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }

        /// <summary>
        /// Calls the @use_plugin function from the #GTypePluginClass of
        /// @plugin.  There should be no need to use this function outside of
        /// the GObject type system itself.
        /// </summary>
        /// <param name="plugin">
        /// a #GTypePlugin
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_type_plugin_use(
        /* <type name="TypePlugin" type="GTypePlugin*" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypePlugin.UnmanagedStruct* plugin);
        static partial void CheckUseArgs(this GISharp.Lib.GObject.ITypePlugin plugin);

        /// <include file="TypePlugin.xmldoc" path="declaration/member[@name='TypePlugin.Use(GISharp.Lib.GObject.ITypePlugin)']/*" />
        public static void Use(this GISharp.Lib.GObject.ITypePlugin plugin)
        {
            CheckUseArgs(plugin);
            var plugin_ = (GISharp.Lib.GObject.TypePlugin.UnmanagedStruct*)plugin.UnsafeHandle;
            g_type_plugin_use(plugin_);
            GISharp.Runtime.GMarshal.PopUnhandledException();
        }
    }
}