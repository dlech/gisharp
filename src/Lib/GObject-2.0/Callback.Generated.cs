// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// The type used for callback functions in structure definitions and function
    /// signatures. This doesn't mean that all callback functions must take no
    /// parameters and return void. The required signature of a callback function
    /// is determined by the context in which is used (e.g. the signal to which it
    /// is connected). Use G_CALLBACK() to cast the callback function to a #GCallback.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" managed-name="System.Void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedCallback();

    /// <include file="Callback.xmldoc" path="declaration/member[@name='Callback']/*" />
    public delegate void Callback();

    /// <summary>
    /// Class for marshalling <see cref="Callback"/> methods.
    /// </summary>
    public static unsafe class CallbackMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="Callback"/>.
        /// </summary>
        public static GISharp.Lib.GObject.Callback FromPointer(delegate* unmanaged[Cdecl]<void> callback_, System.IntPtr userData_)
        {
            void managedCallback()
            {
                callback_();
            }

            return managedCallback;
        }
    }
}