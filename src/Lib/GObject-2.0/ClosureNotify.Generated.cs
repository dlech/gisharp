// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <summary>
    /// The type used for the various notification callbacks which can be registered
    /// on closures.
    /// </summary>
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
    [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
    /* <type name="none" type="void" /> */
    /* transfer-ownership:none direction:in */
    public unsafe delegate void UnmanagedClosureNotify(
    /* <type name="gpointer" type="gpointer" is-pointer="1" /> */
    /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
    System.IntPtr data,
    /* <type name="Closure" type="GClosure*" is-pointer="1" /> */
    /* transfer-ownership:none direction:in */
    GISharp.Lib.GObject.Closure.UnmanagedStruct* closure);

    /// <include file="ClosureNotify.xmldoc" path="declaration/member[@name='ClosureNotify']/*" />
    public delegate void ClosureNotify(System.IntPtr data, GISharp.Lib.GObject.Closure closure);

    /// <summary>
    /// Class for marshalling <see cref="ClosureNotify"/> methods.
    /// </summary>
    public static unsafe class ClosureNotifyMarshal
    {
        /// <summary>
        /// Marshals an unmanaged pointer to a <see cref="ClosureNotify"/>.
        /// </summary>
        public static GISharp.Lib.GObject.ClosureNotify FromPointer(delegate* unmanaged[Cdecl]<System.IntPtr, GISharp.Lib.GObject.Closure.UnmanagedStruct*, void> callback_, System.IntPtr userData_)
        {
            void managedCallback(System.IntPtr data, GISharp.Lib.GObject.Closure closure)
            {
                var data_ = (System.IntPtr)data;
                var closure_ = (GISharp.Lib.GObject.Closure.UnmanagedStruct*)closure.UnsafeHandle;
                callback_(data_, closure_);
                GISharp.Runtime.GMarshal.PopUnhandledException();
            }

            return managedCallback;
        }
    }
}