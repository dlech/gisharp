<declaration>

<member name='TypeValueTable.ValueInit'>
</member>

<member name='TypeValueTable.ValueFree'>
</member>

<member name='TypeValueTable.ValueCopy'>
</member>

<member name='TypeValueTable.ValuePeekPointer'>
</member>

<member name='TypeValueTable.CollectFormat'>
<summary>
A string format describing how to collect the contents of
 this value bit-by-bit. Each character in the format represents
 an argument to be collected, and the characters themselves indicate
 the type of the argument. Currently supported arguments are:
 - 'i' - Integers. passed as collect_values[].v_int.
 - 'l' - Longs. passed as collect_values[].v_long.
 - 'd' - Doubles. passed as collect_values[].v_double.
 - 'p' - Pointers. passed as collect_values[].v_pointer.
 It should be noted that for variable argument list construction,
 ANSI C promotes every type smaller than an integer to an int, and
 floats to doubles. So for collection of short int or char, 'i'
 needs to be used, and for collection of floats 'd'.
</summary>
</member>

<member name='TypeValueTable.CollectValue'>
</member>

<member name='TypeValueTable.LcopyFormat'>
<summary>
Format description of the arguments to collect for <c>lcopyValue</c>,
 analogous to <c>collectFormat</c>. Usually, <c>lcopyFormat</c> string consists
 only of 'p's to provide lcopy_value() with pointers to storage locations.
</summary>
</member>

<member name='TypeValueTable.LcopyValue'>
</member>

<member name='TypeValueTable'>
<summary>
The <see cref="TypeValueTable"/> provides the functions required by the <see cref="Value"/>
implementation, to serve as a container for values of a type.
</summary>
</member>

</declaration>
