// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GObject
{
    /// <include file="TypeInstance.xmldoc" path="declaration/member[@name='TypeInstance']/*" />
    public unsafe partial struct TypeInstance
    {
#pragma warning disable CS0169, CS0649
        /// <include file="TypeInstance.xmldoc" path="declaration/member[@name='TypeInstance.GClass']/*" />
        public readonly GISharp.Lib.GObject.TypeClass* GClass;
#pragma warning restore CS0169, CS0649
        [System.Runtime.InteropServices.DllImportAttribute("gobject-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.IntPtr g_type_instance_get_private(
        /* <type name="TypeInstance" type="GTypeInstance*" managed-name="TypeInstance" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.TypeInstance* instance,
        /* <type name="GType" type="GType" managed-name="GISharp.Lib.GObject.GType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.GType privateType);
        partial void CheckGetPrivateArgs(GISharp.Lib.GObject.GType privateType);

        /// <include file="TypeInstance.xmldoc" path="declaration/member[@name='TypeInstance.GetPrivate(GISharp.Lib.GObject.GType)']/*" />
        public System.IntPtr GetPrivate(GISharp.Lib.GObject.GType privateType)
        {
            fixed (GISharp.Lib.GObject.TypeInstance* this_ = &this)
            {
                CheckGetPrivateArgs(privateType);
                var instance_ = this_;
                var privateType_ = (GISharp.Lib.GObject.GType)privateType;
                var ret_ = g_type_instance_get_private(instance_,privateType_);
                var ret = (System.IntPtr)ret_;
                return ret;
            }
        }
    }
}