// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo']/*" />
    [GISharp.Runtime.GTypeAttribute("GFileInfo", IsProxyForUnmanagedType = true)]
    [GISharp.Runtime.GTypeStructAttribute(typeof(FileInfoClass))]
    public unsafe partial class FileInfo : GISharp.Lib.GObject.Object
    {
        private static readonly GISharp.Lib.GObject.GType _GType = g_file_info_get_type();

        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
        }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.ContentType']/*" />
        public GISharp.Lib.GLib.NullableUnownedUtf8 ContentType { get => GetContentType(); set => SetContentType(value.Value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.DeletionDate']/*" />
        [GISharp.Runtime.SinceAttribute("2.36")]
        public GISharp.Lib.GLib.DateTime? DeletionDate { get => GetDeletionDate(); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.DisplayName']/*" />
        public GISharp.Lib.GLib.UnownedUtf8 DisplayName { get => GetDisplayName(); set => SetDisplayName(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.EditName']/*" />
        public GISharp.Lib.GLib.UnownedUtf8 EditName { get => GetEditName(); set => SetEditName(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.Etag']/*" />
        public GISharp.Lib.GLib.UnownedUtf8 Etag { get => GetEtag(); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.FileType']/*" />
        public GISharp.Lib.Gio.FileType FileType { get => GetFileType(); set => SetFileType(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.Icon']/*" />
        public GISharp.Lib.Gio.IIcon Icon { get => GetIcon(); set => SetIcon(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.IsBackup']/*" />
        public System.Boolean IsBackup { get => GetIsBackup(); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.IsHidden']/*" />
        public System.Boolean IsHidden { get => GetIsHidden(); set => SetIsHidden(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.IsSymlink']/*" />
        public System.Boolean IsSymlink { get => GetIsSymlink(); set => SetIsSymlink(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.ModificationDateTime']/*" />
        [GISharp.Runtime.SinceAttribute("2.62")]
        [System.Diagnostics.CodeAnalysis.DisallowNullAttribute]
        public GISharp.Lib.GLib.DateTime? ModificationDateTime { get => GetModificationDateTime(); set => SetModificationDateTime(value!); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.Name']/*" />
        public GISharp.Lib.GLib.Filename Name { get => GetName(); set => SetName(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.Size']/*" />
        public System.Int64 Size { get => GetSize(); set => SetSize(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SortOrder']/*" />
        public System.Int32 SortOrder { get => GetSortOrder(); set => SetSortOrder(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SymbolicIcon']/*" />
        [GISharp.Runtime.SinceAttribute("2.34")]
        public GISharp.Lib.Gio.IIcon SymbolicIcon { get => GetSymbolicIcon(); set => SetSymbolicIcon(value); }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SymlinkTarget']/*" />
        public GISharp.Lib.GLib.UnownedUtf8 SymlinkTarget { get => GetSymlinkTarget(); set => SetSymlinkTarget(value); }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public FileInfo(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }

        static partial void CheckNewArgs();

        /// <summary>
        /// Creates a new file info structure.
        /// </summary>
        /// <returns>
        /// a #GFileInfo.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.Gio.FileInfo.UnmanagedStruct* g_file_info_new();

        static GISharp.Lib.Gio.FileInfo.UnmanagedStruct* New()
        {
            CheckNewArgs();
            var ret_ = g_file_info_new();
            return ret_;
        }

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.FileInfo()']/*" />
        public FileInfo() : this((System.IntPtr)New(), GISharp.Runtime.Transfer.Full)
        {
        }

        static partial void CheckGetGTypeArgs();
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GType" type="GType" managed-name="GISharp.Lib.GObject.GType" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GObject.GType g_file_info_get_type();

        /// <summary>
        /// Clears the status information from @info.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_clear_status(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckClearStatusArgs();

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.ClearStatus()']/*" />
        public void ClearStatus()
        {
            CheckClearStatusArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            g_file_info_clear_status(info_);
        }

        /// <summary>
        /// First clears all of the [GFileAttribute][gio-GFileAttribute] of @dest_info,
        /// and then copies all of the file attributes from @src_info to @dest_info.
        /// </summary>
        /// <param name="srcInfo">
        /// source to copy attributes from.
        /// </param>
        /// <param name="destInfo">
        /// destination to copy attributes to.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_copy_into(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* srcInfo,
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* destInfo);
        static partial void CheckCopyIntoArgs(GISharp.Lib.Gio.FileInfo destInfo);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.CopyInto(GISharp.Lib.Gio.FileInfo)']/*" />
        public void CopyInto(GISharp.Lib.Gio.FileInfo destInfo)
        {
            CheckCopyIntoArgs(destInfo);
            var srcInfo_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var destInfo_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)destInfo.UnsafeHandle;
            g_file_info_copy_into(srcInfo_, destInfo_);
        }

        /// <summary>
        /// Duplicates a file info structure.
        /// </summary>
        /// <param name="other">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a duplicate #GFileInfo of @other.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.Gio.FileInfo.UnmanagedStruct* g_file_info_dup(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* other);
        static partial void CheckDupArgs();

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.Dup()']/*" />
        public GISharp.Lib.Gio.FileInfo Dup()
        {
            CheckDupArgs();
            var other_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_dup(other_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.Gio.FileInfo>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
            return ret;
        }

        /// <summary>
        /// Gets the value of a attribute, formatted as a string.
        /// This escapes things as needed to make the string valid
        /// UTF-8.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// a UTF-8 string associated with the given @attribute, or
        ///    %NULL if the attribute wasn’t set.
        ///    When you're done with the string it must be freed with g_free().
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 direction:in */
        private static extern System.Byte* g_file_info_get_attribute_as_string(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeAsStringArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeAsString(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.GLib.Utf8? GetAttributeAsString(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeAsStringArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_as_string(info_,attribute_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.GLib.Utf8>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full);
            return ret;
        }

        /// <summary>
        /// Gets the value of a boolean attribute. If the attribute does not
        /// contain a boolean value, %FALSE will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// the boolean value contained within the attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_get_attribute_boolean(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeBooleanArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeBoolean(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public System.Boolean GetAttributeBoolean(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeBooleanArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_boolean(info_,attribute_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Gets the value of a byte string attribute. If the attribute does
        /// not contain a byte string, %NULL will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// the contents of the @attribute value as a byte string, or
        /// %NULL otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.Byte* g_file_info_get_attribute_byte_string(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeByteStringArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeByteString(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.GLib.NullableUnownedUtf8 GetAttributeByteString(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeByteStringArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_byte_string(info_,attribute_);
            var ret = new GISharp.Lib.GLib.NullableUnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Gets the attribute type, value and status for an attribute key.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo
        /// </param>
        /// <param name="attribute">
        /// a file attribute key
        /// </param>
        /// <param name="type">
        /// return location for the attribute type, or %NULL
        /// </param>
        /// <param name="valuePp">
        /// return location for the
        ///    attribute value, or %NULL; the attribute value will not be %NULL
        /// </param>
        /// <param name="status">
        /// return location for the attribute status, or %NULL
        /// </param>
        /// <returns>
        /// %TRUE if @info has an attribute named @attribute,
        ///      %FALSE otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_get_attribute_data(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="FileAttributeType" type="GFileAttributeType*" managed-name="FileAttributeType" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full optional:1 allow-none:1 */
        GISharp.Lib.Gio.FileAttributeType* type,
        /* <type name="gpointer" type="gpointer*" managed-name="System.IntPtr" is-pointer="1" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full optional:1 allow-none:1 */
        System.IntPtr* valuePp,
        /* <type name="FileAttributeStatus" type="GFileAttributeStatus*" managed-name="FileAttributeStatus" /> */
        /* direction:out caller-allocates:0 transfer-ownership:full optional:1 allow-none:1 */
        GISharp.Lib.Gio.FileAttributeStatus* status);
        static partial void CheckTryGetAttributeDataArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.TryGetAttributeData(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.FileAttributeType,System.IntPtr,GISharp.Lib.Gio.FileAttributeStatus)']/*" />
        public System.Boolean TryGetAttributeData(GISharp.Lib.GLib.UnownedUtf8 attribute, out GISharp.Lib.Gio.FileAttributeType type, out System.IntPtr valuePp, out GISharp.Lib.Gio.FileAttributeStatus status)
        {
            CheckTryGetAttributeDataArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            GISharp.Lib.Gio.FileAttributeType type_;
            System.IntPtr valuePp_;
            GISharp.Lib.Gio.FileAttributeStatus status_;
            var ret_ = g_file_info_get_attribute_data(info_,attribute_,&type_,&valuePp_,&status_);
            type = (GISharp.Lib.Gio.FileAttributeType)type_;
            valuePp = (System.IntPtr)valuePp_;
            status = (GISharp.Lib.Gio.FileAttributeStatus)status_;
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Gets a signed 32-bit integer contained within the attribute. If the
        /// attribute does not contain a signed 32-bit integer, or is invalid,
        /// 0 will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// a signed 32-bit integer from the attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint32" type="gint32" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Int32 g_file_info_get_attribute_int32(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeInt32Args(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeInt32(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public System.Int32 GetAttributeInt32(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeInt32Args(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_int32(info_,attribute_);
            var ret = (System.Int32)ret_;
            return ret;
        }

        /// <summary>
        /// Gets a signed 64-bit integer contained within the attribute. If the
        /// attribute does not contain a signed 64-bit integer, or is invalid,
        /// 0 will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// a signed 64-bit integer from the attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint64" type="gint64" managed-name="System.Int64" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Int64 g_file_info_get_attribute_int64(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeInt64Args(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeInt64(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public System.Int64 GetAttributeInt64(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeInt64Args(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_int64(info_,attribute_);
            var ret = (System.Int64)ret_;
            return ret;
        }

        /// <summary>
        /// Gets the value of a #GObject attribute. If the attribute does
        /// not contain a #GObject, %NULL will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// a #GObject associated with the given @attribute,
        /// or %NULL otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GObject.Object" type="GObject*" managed-name="GISharp.Lib.GObject.Object" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern GISharp.Lib.GObject.Object.UnmanagedStruct* g_file_info_get_attribute_object(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeObjectArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeObject(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.GObject.Object? GetAttributeObject(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeObjectArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_object(info_,attribute_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.GObject.Object>((System.IntPtr)ret_, GISharp.Runtime.Transfer.None);
            return ret;
        }

        /// <summary>
        /// Gets the attribute status for an attribute key.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo
        /// </param>
        /// <param name="attribute">
        /// a file attribute key
        /// </param>
        /// <returns>
        /// a #GFileAttributeStatus for the given @attribute, or
        ///    %G_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="FileAttributeStatus" type="GFileAttributeStatus" managed-name="FileAttributeStatus" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.Gio.FileAttributeStatus g_file_info_get_attribute_status(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeStatusArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeStatus(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.Gio.FileAttributeStatus GetAttributeStatus(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeStatusArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_status(info_,attribute_);
            var ret = (GISharp.Lib.Gio.FileAttributeStatus)ret_;
            return ret;
        }

        /// <summary>
        /// Gets the value of a string attribute. If the attribute does
        /// not contain a string, %NULL will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// the contents of the @attribute value as a UTF-8 string,
        /// or %NULL otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.Byte* g_file_info_get_attribute_string(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeStringArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeString(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.GLib.NullableUnownedUtf8 GetAttributeString(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeStringArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_string(info_,attribute_);
            var ret = new GISharp.Lib.GLib.NullableUnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Gets the value of a stringv attribute. If the attribute does
        /// not contain a stringv, %NULL will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// the contents of the @attribute value as a stringv,
        /// or %NULL otherwise. Do not free. These returned strings are UTF-8.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.22")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array type="char**" zero-terminated="1" name="GLib.Strv" managed-name="GISharp.Lib.GLib.Strv" is-pointer="1">
*   <type name="utf8" managed-name="GISharp.Lib.GLib.Utf8" />
* </array> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.Byte** g_file_info_get_attribute_stringv(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeStringvArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeStringv(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        [GISharp.Runtime.SinceAttribute("2.22")]
        public GISharp.Lib.GLib.Strv? GetAttributeStringv(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeStringvArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_stringv(info_,attribute_);
            var ret = new GISharp.Lib.GLib.Strv((System.IntPtr)ret_, -1, GISharp.Runtime.Transfer.None);
            return ret;
        }

        /// <summary>
        /// Gets the attribute type for an attribute key.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// a #GFileAttributeType for the given @attribute, or
        /// %G_FILE_ATTRIBUTE_TYPE_INVALID if the key is not set.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="FileAttributeType" type="GFileAttributeType" managed-name="FileAttributeType" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.Gio.FileAttributeType g_file_info_get_attribute_type(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeTypeArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeType(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public GISharp.Lib.Gio.FileAttributeType GetAttributeType(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeTypeArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_type(info_,attribute_);
            var ret = (GISharp.Lib.Gio.FileAttributeType)ret_;
            return ret;
        }

        /// <summary>
        /// Gets an unsigned 32-bit integer contained within the attribute. If the
        /// attribute does not contain an unsigned 32-bit integer, or is invalid,
        /// 0 will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// an unsigned 32-bit integer from the attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint32" type="guint32" managed-name="System.UInt32" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.UInt32 g_file_info_get_attribute_uint32(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeUint32Args(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeUint32(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public System.UInt32 GetAttributeUint32(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeUint32Args(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_uint32(info_,attribute_);
            var ret = (System.UInt32)ret_;
            return ret;
        }

        /// <summary>
        /// Gets a unsigned 64-bit integer contained within the attribute. If the
        /// attribute does not contain an unsigned 64-bit integer, or is invalid,
        /// 0 will be returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// a unsigned 64-bit integer from the attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="guint64" type="guint64" managed-name="System.UInt64" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.UInt64 g_file_info_get_attribute_uint64(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckGetAttributeUint64Args(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetAttributeUint64(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public System.UInt64 GetAttributeUint64(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckGetAttributeUint64Args(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_get_attribute_uint64(info_,attribute_);
            var ret = (System.UInt64)ret_;
            return ret;
        }

        /// <summary>
        /// Gets the file's content type.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a string containing the file's content type,
        /// or %NULL if unknown.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 direction:in */
        private static extern System.Byte* g_file_info_get_content_type(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetContentTypeArgs();

        private GISharp.Lib.GLib.NullableUnownedUtf8 GetContentType()
        {
            CheckGetContentTypeArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_content_type(info_);
            var ret = new GISharp.Lib.GLib.NullableUnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Returns the #GDateTime representing the deletion date of the file, as
        /// available in G_FILE_ATTRIBUTE_TRASH_DELETION_DATE. If the
        /// G_FILE_ATTRIBUTE_TRASH_DELETION_DATE attribute is unset, %NULL is returned.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a #GDateTime, or %NULL.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.36")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.DateTime" type="GDateTime*" managed-name="GISharp.Lib.GLib.DateTime" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 direction:in */
        private static extern GISharp.Lib.GLib.DateTime.UnmanagedStruct* g_file_info_get_deletion_date(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetDeletionDateArgs();

        [GISharp.Runtime.SinceAttribute("2.36")]
        private GISharp.Lib.GLib.DateTime? GetDeletionDate()
        {
            CheckGetDeletionDateArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_deletion_date(info_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.GLib.DateTime>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full);
            return ret;
        }

        /// <summary>
        /// Gets a display name for a file. This is guaranteed to always be set.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a string containing the display name.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Byte* g_file_info_get_display_name(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetDisplayNameArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetDisplayName()
        {
            CheckGetDisplayNameArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_display_name(info_);
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Gets the edit name for a file.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a string containing the edit name.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Byte* g_file_info_get_edit_name(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetEditNameArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetEditName()
        {
            CheckGetEditNameArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_edit_name(info_);
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Gets the [entity tag][gfile-etag] for a given
        /// #GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a string containing the value of the "etag:value" attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Byte* g_file_info_get_etag(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetEtagArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetEtag()
        {
            CheckGetEtagArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_etag(info_);
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Gets a file's type (whether it is a regular file, symlink, etc).
        /// This is different from the file's content type, see g_file_info_get_content_type().
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a #GFileType for the given file.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="FileType" type="GFileType" managed-name="FileType" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.Gio.FileType g_file_info_get_file_type(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetFileTypeArgs();

        private GISharp.Lib.Gio.FileType GetFileType()
        {
            CheckGetFileTypeArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_file_type(info_);
            var ret = (GISharp.Lib.Gio.FileType)ret_;
            return ret;
        }

        /// <summary>
        /// Gets the icon for a file.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// #GIcon for the given @info.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Icon" type="GIcon*" managed-name="Icon" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.Gio.Icon.UnmanagedStruct* g_file_info_get_icon(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetIconArgs();

        private GISharp.Lib.Gio.IIcon GetIcon()
        {
            CheckGetIconArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_icon(info_);
            var ret = (GISharp.Lib.Gio.IIcon)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)ret_, GISharp.Runtime.Transfer.None)!;
            return ret;
        }

        /// <summary>
        /// Checks if a file is a backup file.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// %TRUE if file is a backup file, %FALSE otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_get_is_backup(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetIsBackupArgs();

        private System.Boolean GetIsBackup()
        {
            CheckGetIsBackupArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_is_backup(info_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Checks if a file is hidden.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// %TRUE if the file is a hidden file, %FALSE otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_get_is_hidden(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetIsHiddenArgs();

        private System.Boolean GetIsHidden()
        {
            CheckGetIsHiddenArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_is_hidden(info_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Checks if a file is a symlink.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// %TRUE if the given @info is a symlink.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_get_is_symlink(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetIsSymlinkArgs();

        private System.Boolean GetIsSymlink()
        {
            CheckGetIsSymlinkArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_is_symlink(info_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Gets the modification time of the current @info and returns it as a
        /// #GDateTime.
        /// </summary>
        /// <remarks>
        /// This requires the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute. If
        /// %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC is provided, the resulting #GDateTime
        /// will have microsecond precision.
        /// </remarks>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// modification time, or %NULL if unknown
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.62")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="GLib.DateTime" type="GDateTime*" managed-name="GISharp.Lib.GLib.DateTime" is-pointer="1" /> */
        /* transfer-ownership:full nullable:1 direction:in */
        private static extern GISharp.Lib.GLib.DateTime.UnmanagedStruct* g_file_info_get_modification_date_time(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetModificationDateTimeArgs();

        [GISharp.Runtime.SinceAttribute("2.62")]
        private GISharp.Lib.GLib.DateTime? GetModificationDateTime()
        {
            CheckGetModificationDateTimeArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_modification_date_time(info_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.GLib.DateTime>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full);
            return ret;
        }

        /// <summary>
        /// Gets the modification time of the current @info and sets it
        /// in @result.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="result">
        /// a #GTimeVal.
        /// </param>
        [System.ObsoleteAttribute("Use g_file_info_get_modification_date_time() instead, as\n   #GTimeVal is deprecated due to the year 2038 problem.")]
        [GISharp.Runtime.DeprecatedSinceAttribute("2.62")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_get_modification_time(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="GLib.TimeVal" type="GTimeVal*" managed-name="GISharp.Lib.GLib.TimeVal" /> */
        /* direction:out caller-allocates:1 transfer-ownership:none */
        GISharp.Lib.GLib.TimeVal* result);
        static partial void CheckGetModificationTimeArgs();

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.GetModificationTime(GISharp.Lib.GLib.TimeVal)']/*" />
        [System.ObsoleteAttribute("Use g_file_info_get_modification_date_time() instead, as\n   #GTimeVal is deprecated due to the year 2038 problem.")]
        [GISharp.Runtime.DeprecatedSinceAttribute("2.62")]
        public void GetModificationTime(out GISharp.Lib.GLib.TimeVal result)
        {
            fixed (GISharp.Lib.GLib.TimeVal* result_ = &result)
            {
                CheckGetModificationTimeArgs();
                var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
                g_file_info_get_modification_time(info_, result_);
            }
        }

        /// <summary>
        /// Gets the name for a file. This is guaranteed to always be set.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a string containing the file name.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="filename" type="const char*" managed-name="GISharp.Lib.GLib.Filename" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Byte* g_file_info_get_name(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetNameArgs();

        private GISharp.Lib.GLib.Filename GetName()
        {
            CheckGetNameArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_name(info_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.GLib.Filename>((System.IntPtr)ret_, GISharp.Runtime.Transfer.None)!;
            return ret;
        }

        /// <summary>
        /// Gets the file's size.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a #goffset containing the file's size.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint64" type="goffset" managed-name="System.Int64" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Int64 g_file_info_get_size(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetSizeArgs();

        private System.Int64 GetSize()
        {
            CheckGetSizeArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_size(info_);
            var ret = (System.Int64)ret_;
            return ret;
        }

        /// <summary>
        /// Gets the value of the sort_order attribute from the #GFileInfo.
        /// See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a #gint32 containing the value of the "standard::sort_order" attribute.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint32" type="gint32" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Int32 g_file_info_get_sort_order(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetSortOrderArgs();

        private System.Int32 GetSortOrder()
        {
            CheckGetSortOrderArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_sort_order(info_);
            var ret = (System.Int32)ret_;
            return ret;
        }

        /// <summary>
        /// Gets the symbolic icon for a file.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// #GIcon for the given @info.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.34")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="Icon" type="GIcon*" managed-name="Icon" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.Gio.Icon.UnmanagedStruct* g_file_info_get_symbolic_icon(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetSymbolicIconArgs();

        [GISharp.Runtime.SinceAttribute("2.34")]
        private GISharp.Lib.Gio.IIcon GetSymbolicIcon()
        {
            CheckGetSymbolicIconArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_symbolic_icon(info_);
            var ret = (GISharp.Lib.Gio.IIcon)GISharp.Lib.GObject.Object.GetInstance((System.IntPtr)ret_, GISharp.Runtime.Transfer.None)!;
            return ret;
        }

        /// <summary>
        /// Gets the symlink target for a given #GFileInfo.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <returns>
        /// a string containing the symlink target.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Byte* g_file_info_get_symlink_target(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckGetSymlinkTargetArgs();

        private GISharp.Lib.GLib.UnownedUtf8 GetSymlinkTarget()
        {
            CheckGetSymlinkTargetArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_file_info_get_symlink_target(info_);
            var ret = new GISharp.Lib.GLib.UnownedUtf8(ret_);
            return ret;
        }

        /// <summary>
        /// Checks if a file info structure has an attribute named @attribute.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <returns>
        /// %TRUE if @info has an attribute named @attribute,
        ///     %FALSE otherwise.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_has_attribute(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckHasAttributeArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.HasAttribute(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public System.Boolean HasAttribute(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckHasAttributeArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var ret_ = g_file_info_has_attribute(info_,attribute_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Checks if a file info structure has an attribute in the
        /// specified @name_space.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="nameSpace">
        /// a file attribute namespace.
        /// </param>
        /// <returns>
        /// %TRUE if @info has an attribute in @name_space,
        ///     %FALSE otherwise.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.22")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_has_namespace(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* nameSpace);
        static partial void CheckHasNamespaceArgs(GISharp.Lib.GLib.UnownedUtf8 nameSpace);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.HasNamespace(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        [GISharp.Runtime.SinceAttribute("2.22")]
        public System.Boolean HasNamespace(GISharp.Lib.GLib.UnownedUtf8 nameSpace)
        {
            CheckHasNamespaceArgs(nameSpace);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var nameSpace_ = (System.Byte*)nameSpace.UnsafeHandle;
            var ret_ = g_file_info_has_namespace(info_,nameSpace_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Lists the file info structure's attributes.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="nameSpace">
        /// a file attribute key's namespace, or %NULL to list
        ///   all attributes.
        /// </param>
        /// <returns>
        /// a
        /// null-terminated array of strings of all of the possible attribute
        /// types for the given @name_space, or %NULL on error.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <array type="char**" zero-terminated="1" name="GLib.Strv" managed-name="GISharp.Lib.GLib.Strv" is-pointer="1">
*   <type name="utf8" managed-name="GISharp.Lib.GLib.Utf8" />
* </array> */
        /* transfer-ownership:full nullable:1 direction:in */
        private static extern System.Byte** g_file_info_list_attributes(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none nullable:1 allow-none:1 direction:in */
        System.Byte* nameSpace);
        static partial void CheckListAttributesArgs(GISharp.Lib.GLib.NullableUnownedUtf8 nameSpace);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.ListAttributes(GISharp.Lib.GLib.NullableUnownedUtf8)']/*" />
        public GISharp.Lib.GLib.Strv? ListAttributes(GISharp.Lib.GLib.NullableUnownedUtf8 nameSpace)
        {
            CheckListAttributesArgs(nameSpace);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var nameSpace_ = (System.Byte*)nameSpace.UnsafeHandle;
            var ret_ = g_file_info_list_attributes(info_,nameSpace_);
            var ret = new GISharp.Lib.GLib.Strv((System.IntPtr)ret_, -1, GISharp.Runtime.Transfer.Full);
            return ret;
        }

        /// <summary>
        /// Removes all cases of @attribute from @info if it exists.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_remove_attribute(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute);
        static partial void CheckRemoveAttributeArgs(GISharp.Lib.GLib.UnownedUtf8 attribute);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.RemoveAttribute(GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public void RemoveAttribute(GISharp.Lib.GLib.UnownedUtf8 attribute)
        {
            CheckRemoveAttributeArgs(attribute);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            g_file_info_remove_attribute(info_, attribute_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given value, if possible. To unset the
        /// attribute, use %G_FILE_ATTRIBUTE_TYPE_INVALID for @type.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="type">
        /// a #GFileAttributeType
        /// </param>
        /// <param name="valueP">
        /// pointer to the value
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="FileAttributeType" type="GFileAttributeType" managed-name="FileAttributeType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileAttributeType type,
        /* <type name="gpointer" type="gpointer" managed-name="System.IntPtr" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.IntPtr valueP);
        static partial void CheckSetAttributeArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.Gio.FileAttributeType type, System.IntPtr valueP);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttribute(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.FileAttributeType,System.IntPtr)']/*" />
        public void SetAttribute(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.Gio.FileAttributeType type, System.IntPtr valueP)
        {
            CheckSetAttributeArgs(attribute, type, valueP);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var type_ = (GISharp.Lib.Gio.FileAttributeType)type;
            var valueP_ = (System.IntPtr)valueP;
            g_file_info_set_attribute(info_, attribute_, type_, valueP_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// a boolean value.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_boolean(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.Boolean attrValue);
        static partial void CheckSetAttributeBooleanArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, System.Boolean attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeBoolean(GISharp.Lib.GLib.UnownedUtf8,System.Boolean)']/*" />
        public void SetAttributeBoolean(GISharp.Lib.GLib.UnownedUtf8 attribute, System.Boolean attrValue)
        {
            CheckSetAttributeBooleanArgs(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = GISharp.Runtime.BooleanExtensions.ToBoolean(attrValue);
            g_file_info_set_attribute_boolean(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// a byte string.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_byte_string(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attrValue);
        static partial void CheckSetAttributeByteStringArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GLib.UnownedUtf8 attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeByteString(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public void SetAttributeByteString(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GLib.UnownedUtf8 attrValue)
        {
            CheckSetAttributeByteStringArgs(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.Byte*)attrValue.UnsafeHandle;
            g_file_info_set_attribute_byte_string(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// a signed 32-bit integer
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_int32(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="gint32" type="gint32" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        System.Int32 attrValue);
        static partial void CheckSetAttributeInt32Args(GISharp.Lib.GLib.UnownedUtf8 attribute, System.Int32 attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeInt32(GISharp.Lib.GLib.UnownedUtf8,System.Int32)']/*" />
        public void SetAttributeInt32(GISharp.Lib.GLib.UnownedUtf8 attribute, System.Int32 attrValue)
        {
            CheckSetAttributeInt32Args(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.Int32)attrValue;
            g_file_info_set_attribute_int32(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// attribute name to set.
        /// </param>
        /// <param name="attrValue">
        /// int64 value to set attribute to.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_int64(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="gint64" type="gint64" managed-name="System.Int64" /> */
        /* transfer-ownership:none direction:in */
        System.Int64 attrValue);
        static partial void CheckSetAttributeInt64Args(GISharp.Lib.GLib.UnownedUtf8 attribute, System.Int64 attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeInt64(GISharp.Lib.GLib.UnownedUtf8,System.Int64)']/*" />
        public void SetAttributeInt64(GISharp.Lib.GLib.UnownedUtf8 attribute, System.Int64 attrValue)
        {
            CheckSetAttributeInt64Args(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.Int64)attrValue;
            g_file_info_set_attribute_int64(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets @mask on @info to match specific attribute types.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="mask">
        /// a #GFileAttributeMatcher.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_mask(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="FileAttributeMatcher" type="GFileAttributeMatcher*" managed-name="FileAttributeMatcher" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileAttributeMatcher.UnmanagedStruct* mask);
        static partial void CheckSetAttributeMaskArgs(GISharp.Lib.Gio.FileAttributeMatcher mask);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeMask(GISharp.Lib.Gio.FileAttributeMatcher)']/*" />
        public void SetAttributeMask(GISharp.Lib.Gio.FileAttributeMatcher mask)
        {
            CheckSetAttributeMaskArgs(mask);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var mask_ = (GISharp.Lib.Gio.FileAttributeMatcher.UnmanagedStruct*)mask.UnsafeHandle;
            g_file_info_set_attribute_mask(info_, mask_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// a #GObject.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_object(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="GObject.Object" type="GObject*" managed-name="GISharp.Lib.GObject.Object" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GObject.Object.UnmanagedStruct* attrValue);
        static partial void CheckSetAttributeObjectArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GObject.Object attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeObject(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GObject.Object)']/*" />
        public void SetAttributeObject(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GObject.Object attrValue)
        {
            CheckSetAttributeObjectArgs(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (GISharp.Lib.GObject.Object.UnmanagedStruct*)attrValue.UnsafeHandle;
            g_file_info_set_attribute_object(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the attribute status for an attribute key. This is only
        /// needed by external code that implement g_file_set_attributes_from_info()
        /// or similar functions.
        /// </summary>
        /// <remarks>
        /// The attribute must exist in @info for this to work. Otherwise %FALSE
        /// is returned and @info is unchanged.
        /// </remarks>
        /// <param name="info">
        /// a #GFileInfo
        /// </param>
        /// <param name="attribute">
        /// a file attribute key
        /// </param>
        /// <param name="status">
        /// a #GFileAttributeStatus
        /// </param>
        /// <returns>
        /// %TRUE if the status was changed, %FALSE if the key was not set.
        /// </returns>
        [GISharp.Runtime.SinceAttribute("2.22")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Runtime.Boolean g_file_info_set_attribute_status(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="FileAttributeStatus" type="GFileAttributeStatus" managed-name="FileAttributeStatus" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileAttributeStatus status);
        static partial void CheckSetAttributeStatusArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.Gio.FileAttributeStatus status);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeStatus(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.FileAttributeStatus)']/*" />
        [GISharp.Runtime.SinceAttribute("2.22")]
        public System.Boolean SetAttributeStatus(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.Gio.FileAttributeStatus status)
        {
            CheckSetAttributeStatusArgs(attribute, status);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var status_ = (GISharp.Lib.Gio.FileAttributeStatus)status;
            var ret_ = g_file_info_set_attribute_status(info_,attribute_,status_);
            var ret = GISharp.Runtime.BooleanExtensions.IsTrue(ret_);
            return ret;
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// a UTF-8 string.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_string(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attrValue);
        static partial void CheckSetAttributeStringArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GLib.UnownedUtf8 attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeString(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)']/*" />
        public void SetAttributeString(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GLib.UnownedUtf8 attrValue)
        {
            CheckSetAttributeStringArgs(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.Byte*)attrValue.UnsafeHandle;
            g_file_info_set_attribute_string(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <remarks>
        /// Sinze: 2.22
        /// </remarks>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key
        /// </param>
        /// <param name="attrValue">
        /// a %NULL
        ///   terminated array of UTF-8 strings.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_stringv(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <array type="char**" zero-terminated="1" name="GLib.Strv" managed-name="GISharp.Lib.GLib.Strv" is-pointer="1">
*   <type name="utf8" managed-name="GISharp.Lib.GLib.Utf8" />
* </array> */
        /* transfer-ownership:none direction:in */
        System.Byte** attrValue);
        static partial void CheckSetAttributeStringvArgs(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GLib.Strv attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeStringv(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.Strv)']/*" />
        public void SetAttributeStringv(GISharp.Lib.GLib.UnownedUtf8 attribute, GISharp.Lib.GLib.Strv attrValue)
        {
            CheckSetAttributeStringvArgs(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.Byte**)attrValue.UnsafeHandle;
            g_file_info_set_attribute_stringv(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// an unsigned 32-bit integer.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_uint32(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="guint32" type="guint32" managed-name="System.UInt32" /> */
        /* transfer-ownership:none direction:in */
        System.UInt32 attrValue);
        static partial void CheckSetAttributeUint32Args(GISharp.Lib.GLib.UnownedUtf8 attribute, System.UInt32 attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeUint32(GISharp.Lib.GLib.UnownedUtf8,System.UInt32)']/*" />
        public void SetAttributeUint32(GISharp.Lib.GLib.UnownedUtf8 attribute, System.UInt32 attrValue)
        {
            CheckSetAttributeUint32Args(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.UInt32)attrValue;
            g_file_info_set_attribute_uint32(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the @attribute to contain the given @attr_value,
        /// if possible.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="attribute">
        /// a file attribute key.
        /// </param>
        /// <param name="attrValue">
        /// an unsigned 64-bit integer.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_attribute_uint64(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* attribute,
        /* <type name="guint64" type="guint64" managed-name="System.UInt64" /> */
        /* transfer-ownership:none direction:in */
        System.UInt64 attrValue);
        static partial void CheckSetAttributeUint64Args(GISharp.Lib.GLib.UnownedUtf8 attribute, System.UInt64 attrValue);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetAttributeUint64(GISharp.Lib.GLib.UnownedUtf8,System.UInt64)']/*" />
        public void SetAttributeUint64(GISharp.Lib.GLib.UnownedUtf8 attribute, System.UInt64 attrValue)
        {
            CheckSetAttributeUint64Args(attribute, attrValue);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var attribute_ = (System.Byte*)attribute.UnsafeHandle;
            var attrValue_ = (System.UInt64)attrValue;
            g_file_info_set_attribute_uint64(info_, attribute_, attrValue_);
        }

        /// <summary>
        /// Sets the content type attribute for a given #GFileInfo.
        /// See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="contentType">
        /// a content type. See [GContentType][gio-GContentType]
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_content_type(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* contentType);
        static partial void CheckSetContentTypeArgs(GISharp.Lib.GLib.UnownedUtf8 contentType);

        private void SetContentType(GISharp.Lib.GLib.UnownedUtf8 contentType)
        {
            CheckSetContentTypeArgs(contentType);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var contentType_ = (System.Byte*)contentType.UnsafeHandle;
            g_file_info_set_content_type(info_, contentType_);
        }

        /// <summary>
        /// Sets the display name for the current #GFileInfo.
        /// See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="displayName">
        /// a string containing a display name.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_display_name(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* displayName);
        static partial void CheckSetDisplayNameArgs(GISharp.Lib.GLib.UnownedUtf8 displayName);

        private void SetDisplayName(GISharp.Lib.GLib.UnownedUtf8 displayName)
        {
            CheckSetDisplayNameArgs(displayName);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var displayName_ = (System.Byte*)displayName.UnsafeHandle;
            g_file_info_set_display_name(info_, displayName_);
        }

        /// <summary>
        /// Sets the edit name for the current file.
        /// See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="editName">
        /// a string containing an edit name.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_edit_name(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* editName);
        static partial void CheckSetEditNameArgs(GISharp.Lib.GLib.UnownedUtf8 editName);

        private void SetEditName(GISharp.Lib.GLib.UnownedUtf8 editName)
        {
            CheckSetEditNameArgs(editName);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var editName_ = (System.Byte*)editName.UnsafeHandle;
            g_file_info_set_edit_name(info_, editName_);
        }

        /// <summary>
        /// Sets the file type in a #GFileInfo to @type.
        /// See %G_FILE_ATTRIBUTE_STANDARD_TYPE.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="type">
        /// a #GFileType.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_file_type(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="FileType" type="GFileType" managed-name="FileType" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileType type);
        static partial void CheckSetFileTypeArgs(GISharp.Lib.Gio.FileType type);

        private void SetFileType(GISharp.Lib.Gio.FileType type)
        {
            CheckSetFileTypeArgs(type);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var type_ = (GISharp.Lib.Gio.FileType)type;
            g_file_info_set_file_type(info_, type_);
        }

        /// <summary>
        /// Sets the icon for a given #GFileInfo.
        /// See %G_FILE_ATTRIBUTE_STANDARD_ICON.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="icon">
        /// a #GIcon.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_icon(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="Icon" type="GIcon*" managed-name="Icon" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.Icon.UnmanagedStruct* icon);
        static partial void CheckSetIconArgs(GISharp.Lib.Gio.IIcon icon);

        private void SetIcon(GISharp.Lib.Gio.IIcon icon)
        {
            CheckSetIconArgs(icon);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var icon_ = (GISharp.Lib.Gio.Icon.UnmanagedStruct*)icon.UnsafeHandle;
            g_file_info_set_icon(info_, icon_);
        }

        /// <summary>
        /// Sets the "is_hidden" attribute in a #GFileInfo according to @is_hidden.
        /// See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="isHidden">
        /// a #gboolean.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_is_hidden(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.Boolean isHidden);
        static partial void CheckSetIsHiddenArgs(System.Boolean isHidden);

        private void SetIsHidden(System.Boolean isHidden)
        {
            CheckSetIsHiddenArgs(isHidden);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var isHidden_ = GISharp.Runtime.BooleanExtensions.ToBoolean(isHidden);
            g_file_info_set_is_hidden(info_, isHidden_);
        }

        /// <summary>
        /// Sets the "is_symlink" attribute in a #GFileInfo according to @is_symlink.
        /// See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="isSymlink">
        /// a #gboolean.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_is_symlink(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="gboolean" type="gboolean" managed-name="System.Boolean" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Runtime.Boolean isSymlink);
        static partial void CheckSetIsSymlinkArgs(System.Boolean isSymlink);

        private void SetIsSymlink(System.Boolean isSymlink)
        {
            CheckSetIsSymlinkArgs(isSymlink);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var isSymlink_ = GISharp.Runtime.BooleanExtensions.ToBoolean(isSymlink);
            g_file_info_set_is_symlink(info_, isSymlink_);
        }

        /// <summary>
        /// Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
        /// %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
        /// given date/time value.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="mtime">
        /// a #GDateTime.
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.62")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_modification_date_time(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="GLib.DateTime" type="GDateTime*" managed-name="GISharp.Lib.GLib.DateTime" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.DateTime.UnmanagedStruct* mtime);
        static partial void CheckSetModificationDateTimeArgs(GISharp.Lib.GLib.DateTime mtime);

        [GISharp.Runtime.SinceAttribute("2.62")]
        private void SetModificationDateTime(GISharp.Lib.GLib.DateTime mtime)
        {
            CheckSetModificationDateTimeArgs(mtime);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var mtime_ = (GISharp.Lib.GLib.DateTime.UnmanagedStruct*)mtime.UnsafeHandle;
            g_file_info_set_modification_date_time(info_, mtime_);
        }

        /// <summary>
        /// Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED and
        /// %G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC attributes in the file info to the
        /// given time value.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="mtime">
        /// a #GTimeVal.
        /// </param>
        [System.ObsoleteAttribute("Use g_file_info_set_modification_date_time() instead, as\n   #GTimeVal is deprecated due to the year 2038 problem.")]
        [GISharp.Runtime.DeprecatedSinceAttribute("2.62")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_modification_time(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="GLib.TimeVal" type="GTimeVal*" managed-name="GISharp.Lib.GLib.TimeVal" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GLib.TimeVal mtime);
        static partial void CheckSetModificationTimeArgs(GISharp.Lib.GLib.TimeVal mtime);

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.SetModificationTime(GISharp.Lib.GLib.TimeVal)']/*" />
        [System.ObsoleteAttribute("Use g_file_info_set_modification_date_time() instead, as\n   #GTimeVal is deprecated due to the year 2038 problem.")]
        [GISharp.Runtime.DeprecatedSinceAttribute("2.62")]
        public void SetModificationTime(GISharp.Lib.GLib.TimeVal mtime)
        {
            CheckSetModificationTimeArgs(mtime);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var mtime_ = (GISharp.Lib.GLib.TimeVal)mtime;
            g_file_info_set_modification_time(info_, mtime_);
        }

        /// <summary>
        /// Sets the name attribute for the current #GFileInfo.
        /// See %G_FILE_ATTRIBUTE_STANDARD_NAME.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="name">
        /// a string containing a name.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_name(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="filename" type="const char*" managed-name="GISharp.Lib.GLib.Filename" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* name);
        static partial void CheckSetNameArgs(GISharp.Lib.GLib.Filename name);

        private void SetName(GISharp.Lib.GLib.Filename name)
        {
            CheckSetNameArgs(name);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var name_ = (System.Byte*)name.UnsafeHandle;
            g_file_info_set_name(info_, name_);
        }

        /// <summary>
        /// Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info
        /// to the given size.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="size">
        /// a #goffset containing the file's size.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_size(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="gint64" type="goffset" managed-name="System.Int64" /> */
        /* transfer-ownership:none direction:in */
        System.Int64 size);
        static partial void CheckSetSizeArgs(System.Int64 size);

        private void SetSize(System.Int64 size)
        {
            CheckSetSizeArgs(size);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var size_ = (System.Int64)size;
            g_file_info_set_size(info_, size_);
        }

        /// <summary>
        /// Sets the sort order attribute in the file info structure. See
        /// %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="sortOrder">
        /// a sort order integer.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_sort_order(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="gint32" type="gint32" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        System.Int32 sortOrder);
        static partial void CheckSetSortOrderArgs(System.Int32 sortOrder);

        private void SetSortOrder(System.Int32 sortOrder)
        {
            CheckSetSortOrderArgs(sortOrder);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var sortOrder_ = (System.Int32)sortOrder;
            g_file_info_set_sort_order(info_, sortOrder_);
        }

        /// <summary>
        /// Sets the symbolic icon for a given #GFileInfo.
        /// See %G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="icon">
        /// a #GIcon.
        /// </param>
        [GISharp.Runtime.SinceAttribute("2.34")]
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_symbolic_icon(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="Icon" type="GIcon*" managed-name="Icon" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.Icon.UnmanagedStruct* icon);
        static partial void CheckSetSymbolicIconArgs(GISharp.Lib.Gio.IIcon icon);

        [GISharp.Runtime.SinceAttribute("2.34")]
        private void SetSymbolicIcon(GISharp.Lib.Gio.IIcon icon)
        {
            CheckSetSymbolicIconArgs(icon);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var icon_ = (GISharp.Lib.Gio.Icon.UnmanagedStruct*)icon.UnsafeHandle;
            g_file_info_set_symbolic_icon(info_, icon_);
        }

        /// <summary>
        /// Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info
        /// to the given symlink target.
        /// </summary>
        /// <param name="info">
        /// a #GFileInfo.
        /// </param>
        /// <param name="symlinkTarget">
        /// a static string containing a path to a symlink target.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_set_symlink_target(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info,
        /* <type name="utf8" type="const char*" managed-name="GISharp.Lib.GLib.Utf8" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        System.Byte* symlinkTarget);
        static partial void CheckSetSymlinkTargetArgs(GISharp.Lib.GLib.UnownedUtf8 symlinkTarget);

        private void SetSymlinkTarget(GISharp.Lib.GLib.UnownedUtf8 symlinkTarget)
        {
            CheckSetSymlinkTargetArgs(symlinkTarget);
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            var symlinkTarget_ = (System.Byte*)symlinkTarget.UnsafeHandle;
            g_file_info_set_symlink_target(info_, symlinkTarget_);
        }

        /// <summary>
        /// Unsets a mask set by g_file_info_set_attribute_mask(), if one
        /// is set.
        /// </summary>
        /// <param name="info">
        /// #GFileInfo.
        /// </param>
        [System.Runtime.InteropServices.DllImportAttribute("gio-2.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:in */
        private static extern void g_file_info_unset_attribute_mask(
        /* <type name="FileInfo" type="GFileInfo*" managed-name="FileInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.Gio.FileInfo.UnmanagedStruct* info);
        static partial void CheckUnsetAttributeMaskArgs();

        /// <include file="FileInfo.xmldoc" path="declaration/member[@name='FileInfo.UnsetAttributeMask()']/*" />
        public void UnsetAttributeMask()
        {
            CheckUnsetAttributeMaskArgs();
            var info_ = (GISharp.Lib.Gio.FileInfo.UnmanagedStruct*)UnsafeHandle;
            g_file_info_unset_attribute_mask(info_);
        }
    }
}