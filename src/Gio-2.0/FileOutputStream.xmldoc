<declaration>

<member name='Struct.ParentInstance'>
</member>

<member name='Struct.Priv'>
</member>

<member name='FileOutputStream.Etag'>
<summary>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
</summary>
</member>

<member name='FileOutputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file output stream for the given <paramref name="attributes"/>.
This function blocks while querying the stream. For the asynchronous
version of this function, see <see cref="FileOutputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
<see cref="IOErrorEnum.Pending"/>.
</summary>
<remarks>
Can fail if the stream was already closed (with <see cref="GISharp.Runtime.GErrorException"/> being set to
<see cref="IOErrorEnum.Closed"/>), the stream has pending operations (with <see cref="GISharp.Runtime.GErrorException"/> being
set to <see cref="IOErrorEnum.Pending"/>), or if querying info is not supported for
the stream's interface (with <see cref="GISharp.Runtime.GErrorException"/> being set to <see cref="IOErrorEnum.NotSupported"/>). In
all cases of failure, <c>null</c> will be returned.

If <paramref name="cancellable"/> is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set, and <c>null</c> will
be returned.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/> for the this instance, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileOutputStream.QueryInfo(System.String,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file output stream for the given <paramref name="attributes"/>.
This function blocks while querying the stream. For the asynchronous
version of this function, see <see cref="FileOutputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
<see cref="IOErrorEnum.Pending"/>.
</summary>
<remarks>
Can fail if the stream was already closed (with <see cref="GISharp.Runtime.GErrorException"/> being set to
<see cref="IOErrorEnum.Closed"/>), the stream has pending operations (with <see cref="GISharp.Runtime.GErrorException"/> being
set to <see cref="IOErrorEnum.Pending"/>), or if querying info is not supported for
the stream's interface (with <see cref="GISharp.Runtime.GErrorException"/> being set to <see cref="IOErrorEnum.NotSupported"/>). In
all cases of failure, <c>null</c> will be returned.

If <paramref name="cancellable"/> is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set, and <c>null</c> will
be returned.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/> for the this instance, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileOutputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously queries the this instance for a <see cref="FileInfo"/>.
</summary>
<remarks>
For the synchronous version of this function, see
<see cref="FileOutputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][gio-GIOScheduler] of the request
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='FileOutputStream.QueryInfoAsync(System.String,System.Int32,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously queries the this instance for a <see cref="FileInfo"/>.
</summary>
<remarks>
For the synchronous version of this function, see
<see cref="FileOutputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][gio-GIOScheduler] of the request
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='FileOutputStream.DoCanSeek()'>
</member>

<member name='FileOutputStream.DoCanTruncate()'>
</member>

<member name='FileOutputStream.DoGetEtag()'>
<summary>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.
</summary>
<returns>
the entity tag for the stream.
</returns>
</member>

<member name='FileOutputStream.DoQueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file output stream for the given <paramref name="attributes"/>.
This function blocks while querying the stream. For the asynchronous
version of this function, see <see cref="FileOutputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
<see cref="IOErrorEnum.Pending"/>.
</summary>
<remarks>
Can fail if the stream was already closed (with <see cref="GISharp.Runtime.GErrorException"/> being set to
<see cref="IOErrorEnum.Closed"/>), the stream has pending operations (with <see cref="GISharp.Runtime.GErrorException"/> being
set to <see cref="IOErrorEnum.Pending"/>), or if querying info is not supported for
the stream's interface (with <see cref="GISharp.Runtime.GErrorException"/> being set to <see cref="IOErrorEnum.NotSupported"/>). In
all cases of failure, <c>null</c> will be returned.

If <paramref name="cancellable"/> is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set, and <c>null</c> will
be returned.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/> for the this instance, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileOutputStream.DoQueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.AsyncReadyCallback?,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Asynchronously queries the this instance for a <see cref="FileInfo"/>. When completed,
<paramref name="callback"/> will be called with a <see cref="IAsyncResult"/> which can be used to
finish the operation with <see cref="FileOutputStream.DoQueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)"/>.
</summary>
<remarks>
For the synchronous version of this function, see
<see cref="FileOutputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][gio-GIOScheduler] of the request
</param>
<param name="callback">
callback to call when the request is satisfied
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='FileOutputStream.DoQueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Finalizes the asynchronous query started
by <see cref="FileOutputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.
</summary>
<param name="result">
a <see cref="IAsyncResult"/>.
</param>
<returns>
A <see cref="FileInfo"/> for the finished query.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileOutputStream.DoSeek(System.Int64,GISharp.Lib.GLib.SeekType,GISharp.Lib.Gio.Cancellable?)'>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileOutputStream.DoTell()'>
</member>

<member name='FileOutputStream.DoTruncateFn(System.Int64,GISharp.Lib.Gio.Cancellable?)'>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileOutputStream'>
<summary>
GFileOutputStream provides output streams that write their
content to a file.
</summary>
<remarks>
GFileOutputStream implements <see cref="ISeekable"/>, which allows the output
stream to jump to arbitrary positions in the file and to truncate
the file, provided the filesystem of the file supports these
operations.

To find the position of a file output stream, use <see cref="Seekable.Tell(GISharp.Lib.Gio.ISeekable)"/>.
To find out if a file output stream supports seeking, use
<see cref="Seekable.CanSeek(GISharp.Lib.Gio.ISeekable)"/>.To position a file output stream, use
<see cref="Seekable.Seek(GISharp.Lib.Gio.ISeekable,System.Int64,GISharp.Lib.GLib.SeekType,GISharp.Lib.Gio.Cancellable)"/>. To find out if a file output stream supports
truncating, use <see cref="Seekable.CanTruncate(GISharp.Lib.Gio.ISeekable)"/>. To truncate a file output
stream, use <see cref="Seekable.Truncate(GISharp.Lib.Gio.ISeekable,System.Int64,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
</member>

</declaration>
