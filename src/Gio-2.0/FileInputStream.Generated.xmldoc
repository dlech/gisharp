<declaration>

<member name='Struct.ParentInstance'>
</member>

<member name='Struct.Priv'>
</member>

<member name='FileInputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file input stream the given <paramref name="attributes"/>. This function blocks
while querying the stream. For the asynchronous (non-blocking) version
of this function, see <see cref="FileInputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>. While the
stream is blocked, the stream will set the pending flag internally, and
any other operations on the stream will fail with <see cref="IOErrorEnum.Pending"/>.
</summary>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/>, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileInputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries the stream information asynchronously.
When the operation is finished <paramref name="callback"/> will be called.
You can then call <see cref="FileInputStream.QueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)"/>
to get the result of the operation.
</summary>
<remarks>
For the synchronous version of this function,
see <see cref="FileInputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable)"/>.

If <paramref name="cancellable"/> is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][io-priority] of the request
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='FileInputStream.DoCanSeek()'>
</member>

<member name='FileInputStream.DoQueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries a file input stream the given <paramref name="attributes"/>. This function blocks
while querying the stream. For the asynchronous (non-blocking) version
of this function, see <see cref="FileInputStream.QueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.Cancellable)"/>. While the
stream is blocked, the stream will set the pending flag internally, and
any other operations on the stream will fail with <see cref="IOErrorEnum.Pending"/>.
</summary>
<param name="attributes">
a file attribute query string.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
a <see cref="FileInfo"/>, or <c>null</c> on error.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileInputStream.DoQueryInfoAsync(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.Gio.AsyncReadyCallback?,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Queries the stream information asynchronously.
When the operation is finished <paramref name="callback"/> will be called.
You can then call <see cref="FileInputStream.QueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)"/>
to get the result of the operation.
</summary>
<remarks>
For the synchronous version of this function,
see <see cref="FileInputStream.QueryInfo(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.Gio.Cancellable)"/>.

If <paramref name="cancellable"/> is not <c>null</c>, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error <see cref="IOErrorEnum.Cancelled"/> will be set
</remarks>
<param name="attributes">
a file attribute query string.
</param>
<param name="ioPriority">
the [I/O priority][io-priority] of the request
</param>
<param name="callback">
callback to call when the request is satisfied
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
</member>

<member name='FileInputStream.DoQueryInfoFinish(GISharp.Lib.Gio.IAsyncResult)'>
<summary>
Finishes an asynchronous info query operation.
</summary>
<param name="result">
a <see cref="IAsyncResult"/>.
</param>
<returns>
<see cref="FileInfo"/>.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileInputStream.DoSeek(System.Int64,GISharp.Lib.GLib.SeekType,GISharp.Lib.Gio.Cancellable?)'>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='FileInputStream.DoTell()'>
</member>

<member name='FileInputStream'>
<summary>
GFileInputStream provides input streams that take their
content from a file.
</summary>
<remarks>
GFileInputStream implements <see cref="ISeekable"/>, which allows the input
stream to jump to arbitrary positions in the file, provided the
filesystem of the file allows it. To find the position of a file
input stream, use <see cref="Seekable.Tell(GISharp.Lib.Gio.ISeekable)"/>. To find out if a file input
stream supports seeking, use <see cref="Seekable.CanSeek(GISharp.Lib.Gio.ISeekable)"/>.
To position a file input stream, use <see cref="Seekable.Seek(GISharp.Lib.Gio.ISeekable,System.Int64,GISharp.Lib.GLib.SeekType,GISharp.Lib.Gio.Cancellable)"/>.
</remarks>
</member>

</declaration>
