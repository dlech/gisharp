<declaration>

<member name='Struct.ParentInstance'>
</member>

<member name='Struct.Priv'>
</member>

<member name='Cancellable.Current'>
<summary>
Gets the top cancellable from the stack.
</summary>
</member>

<member name='Cancellable.Fd'>
<summary>
Gets the file descriptor for a cancellable job. This can be used to
implement cancellable operations on Unix systems. The returned fd will
turn readable when this instance is cancelled.
</summary>
<remarks>
You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with <see cref="M:Cancellable.Reset()"/>.

After a successful return from this function, you should use
<see cref="M:Cancellable.ReleaseFd()"/> to free up resources allocated for
the returned file descriptor.

See also <see cref="M:Cancellable.TryMakePollfd(GISharp.Lib.GLib.PollFD)"/>.
</remarks>
</member>

<member name='Cancellable.IsCancelled'>
<summary>
Checks if a cancellable job has been cancelled.
</summary>
</member>

<member name='Cancellable.Cancellable()'>
<summary>
Creates a new <see cref="Cancellable"/> object.
</summary>
<remarks>
Applications that want to start one or more operations
that should be cancellable should create a <see cref="Cancellable"/>
and pass it to the operations.

One <see cref="Cancellable"/> can be used in multiple consecutive
operations or in multiple concurrent operations.
</remarks>
</member>

<member name='CancelledEventArgs'>
<summary>
Emitted when the operation has been cancelled.
</summary>
<remarks>
Can be used by implementations of cancellable operations. If the
operation is cancelled from another thread, the signal will be
emitted in the thread that cancelled the operation, not the
thread that is running the operation.

Note that disconnecting from this signal (or any signal) in a
multi-threaded program is prone to race conditions. For instance
it is possible that a signal handler may be invoked even after
a call to g_signal_handler_disconnect() for that handler has
already returned.

There is also a problem when cancellation happens right before
connecting to the signal. If this happens the signal will
unexpectedly not be emitted, and checking before connecting to
the signal leaves a race condition where this is still happening.

In order to make it safe and easy to connect handlers there
are two helper functions: <see cref="M:Cancellable.Connect(GISharp.Lib.Gio.CancellableSourceFunc)"/> and
<see cref="M:Cancellable.Disconnect(System.UInt64)"/> which protect against problems
like this.

An example of how to us this:
|[&lt;!-- language="C" --&gt;
    // Make sure we don't do unnecessary work if already cancelled
    if (g_cancellable_set_error_if_cancelled (cancellable, error))
      return;

    // Set up all the data needed to be able to handle cancellation
    // of the operation
    my_data = my_data_new (...);

    id = 0;
    if (cancellable)
      id = g_cancellable_connect (cancellable,
    			      G_CALLBACK (cancelled_handler)
    			      data, NULL);

    // cancellable operation here...

    g_cancellable_disconnect (cancellable, id);

    // cancelled_handler is never called after this, it is now safe
    // to free the data
    my_data_free (my_data);
]|

Note that the cancelled signal is emitted in the thread that
the user cancelled from, which may be the main thread. So, the
cancellable signal should not do something that can block.
</remarks>
</member>

<member name='Cancellable.Cancelled'>
<summary>
Emitted when the operation has been cancelled.
</summary>
<remarks>
Can be used by implementations of cancellable operations. If the
operation is cancelled from another thread, the signal will be
emitted in the thread that cancelled the operation, not the
thread that is running the operation.

Note that disconnecting from this signal (or any signal) in a
multi-threaded program is prone to race conditions. For instance
it is possible that a signal handler may be invoked even after
a call to g_signal_handler_disconnect() for that handler has
already returned.

There is also a problem when cancellation happens right before
connecting to the signal. If this happens the signal will
unexpectedly not be emitted, and checking before connecting to
the signal leaves a race condition where this is still happening.

In order to make it safe and easy to connect handlers there
are two helper functions: <see cref="M:Cancellable.Connect(GISharp.Lib.Gio.CancellableSourceFunc)"/> and
<see cref="M:Cancellable.Disconnect(System.UInt64)"/> which protect against problems
like this.

An example of how to us this:
|[&lt;!-- language="C" --&gt;
    // Make sure we don't do unnecessary work if already cancelled
    if (g_cancellable_set_error_if_cancelled (cancellable, error))
      return;

    // Set up all the data needed to be able to handle cancellation
    // of the operation
    my_data = my_data_new (...);

    id = 0;
    if (cancellable)
      id = g_cancellable_connect (cancellable,
    			      G_CALLBACK (cancelled_handler)
    			      data, NULL);

    // cancellable operation here...

    g_cancellable_disconnect (cancellable, id);

    // cancelled_handler is never called after this, it is now safe
    // to free the data
    my_data_free (my_data);
]|

Note that the cancelled signal is emitted in the thread that
the user cancelled from, which may be the main thread. So, the
cancellable signal should not do something that can block.
</remarks>
</member>

<member name='Cancellable.Cancel()'>
<summary>
Will set this instance to cancelled, and will emit the
<see cref="Cancellable"/>::cancelled signal. (However, see the warning about
race conditions in the documentation for that signal if you are
planning to connect to it.)
</summary>
<remarks>
This function is thread-safe. In other words, you can safely call
it from a thread other than the one running the operation that was
passed the this instance.

If this instance is <c>null</c>, this function returns immediately for convenience.

The convention within GIO is that cancelling an asynchronous
operation causes it to complete asynchronously. That is, if you
cancel the operation from the same thread in which it is running,
then the operation's <see cref="AsyncReadyCallback"/> will not be invoked until
the application returns to the main loop.
</remarks>
</member>

<member name='Cancellable.Connect(GISharp.Lib.Gio.CancellableSourceFunc)'>
<summary>
Convenience function to connect to the <see cref="Cancellable"/>::cancelled
signal. Also handles the race condition that may happen
if the cancellable is cancelled right before connecting.
</summary>
<remarks>
this instance is called at most once, either directly at the
time of the connect if this instance is already cancelled,
or when this instance is cancelled in some thread.

this instance will be called when the handler is
disconnected, or immediately if the cancellable is already
cancelled.

See <see cref="Cancellable"/>::cancelled for details on how to use this.

Since GLib 2.40, the lock protecting this instance is not held when
this instance is invoked.  This lifts a restriction in place for
earlier GLib versions which now makes it easier to write cleanup
code that unconditionally invokes e.g. <see cref="M:Cancellable.Cancel()"/>.
</remarks>
<param name="callback">
The #GCallback to connect.
</param>
<returns>
The id of the signal handler or 0 if this instance has already
         been cancelled.
</returns>
</member>

<member name='Cancellable.Disconnect(System.UInt64)'>
<summary>
Disconnects a handler from a cancellable instance similar to
g_signal_handler_disconnect().  Additionally, in the event that a
signal handler is currently running, this call will block until the
handler has finished.  Calling this function from a
<see cref="Cancellable"/>::cancelled signal handler will therefore result in a
deadlock.
</summary>
<remarks>
This avoids a race condition where a thread cancels at the
same time as the cancellable operation is finished and the
signal handler is removed. See <see cref="Cancellable"/>::cancelled for
details on how to use this.

If this instance is <c>null</c> or this instance is `0` this function does
nothing.
</remarks>
<param name="handlerId">
Handler id of the handler to be disconnected, or `0`.
</param>
</member>

<member name='Cancellable.TryMakePollfd(GISharp.Lib.GLib.PollFD)'>
<summary>
Creates a #GPollFD corresponding to this instance; this can be passed
to g_poll() and used to poll for cancellation. This is useful both
for unix systems without a native poll and for portability to
windows.
</summary>
<remarks>
When this function returns <c>true</c>, you should use
<see cref="M:Cancellable.ReleaseFd()"/> to free up resources allocated for the
this instance. After a <c>false</c> return, do not call <see cref="M:Cancellable.ReleaseFd()"/>.

If this function returns <c>false</c>, either no this instance was given or
resource limits prevent this function from allocating the necessary
structures for polling. (On Linux, you will likely have reached
the maximum number of file descriptors.) The suggested way to handle
these cases is to ignore the this instance.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with <see cref="M:Cancellable.Reset()"/>.
</remarks>
<param name="pollfd">
a pointer to a #GPollFD
</param>
<returns>
<c>true</c> if this instance was successfully initialized, <c>false</c> on
         failure to prepare the cancellable.
</returns>
</member>

<member name='Cancellable.PopCurrent()'>
<summary>
Pops this instance off the cancellable stack (verifying that this instance
is on the top of the stack).
</summary>
</member>

<member name='Cancellable.PushCurrent()'>
<summary>
Pushes this instance onto the cancellable stack. The current
cancellable can then be received using <see cref="M:Cancellable.GetCurrent()"/>.
</summary>
<remarks>
This is useful when implementing cancellable operations in
code that does not allow you to pass down the cancellable object.

This is typically called automatically by e.g. <see cref="IFile"/> operations,
so you rarely have to call this yourself.
</remarks>
</member>

<member name='Cancellable.ReleaseFd()'>
<summary>
Releases a resources previously allocated by <see cref="M:Cancellable.GetFd()"/>
or <see cref="M:Cancellable.TryMakePollfd(GISharp.Lib.GLib.PollFD)"/>.
</summary>
<remarks>
For compatibility reasons with older releases, calling this function
is not strictly required, the resources will be automatically freed
when the this instance is finalized. However, the this instance will
block scarce file descriptors until it is finalized if this function
is not called. This can cause the application to run out of file
descriptors when many #GCancellables are used at the same time.
</remarks>
</member>

<member name='Cancellable.Reset()'>
<summary>
Resets this instance to its uncancelled state.
</summary>
<remarks>
If cancellable is currently in use by any cancellable operation
then the behavior of this function is undefined.

Note that it is generally not a good idea to reuse an existing
cancellable for more operations after it has been cancelled once,
as this function might tempt you to do. The recommended practice
is to drop the reference to a cancellable after cancelling it,
and let it die with the outstanding async operations. You should
create a fresh cancellable for further async operations.
</remarks>
</member>

<member name='Cancellable.ThrowIfCancelled()'>
<summary>
If the this instance is cancelled, sets the error to notify
that the operation was cancelled.
</summary>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='Cancellable.DoCancelled()'>
</member>

<member name='Cancellable'>
<summary>
GCancellable is a thread-safe operation cancellation stack used
throughout GIO to allow for cancellation of synchronous and
asynchronous operations.
</summary>
</member>

</declaration>
