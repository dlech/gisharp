// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.Gio
{
    /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='CancellableClass']/*" />
    public class CancellableClass : GISharp.Lib.GObject.ObjectClass
    {
        /// <summary>
        /// The unmanaged data structure for <see cref="CancellableClass"/>.
        /// </summary>
        public unsafe new struct UnmanagedStruct
        {
#pragma warning disable CS0649
            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.ParentClass']/*" />
            public GISharp.Lib.GObject.ObjectClass.UnmanagedStruct ParentClass;

            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.Cancelled']/*" />
            public System.IntPtr Cancelled;

            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GReserved1']/*" />
            public System.IntPtr GReserved1;

            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GReserved2']/*" />
            public System.IntPtr GReserved2;

            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GReserved3']/*" />
            public System.IntPtr GReserved3;

            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GReserved4']/*" />
            public System.IntPtr GReserved4;

            /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='UnmanagedStruct.GReserved5']/*" />
            public System.IntPtr GReserved5;
#pragma warning restore CS0649
        }

        static CancellableClass()
        {
            System.Int32 cancelledOffset = (System.Int32)System.Runtime.InteropServices.Marshal.OffsetOf<UnmanagedStruct>(nameof(UnmanagedStruct.Cancelled));
            RegisterVirtualMethod(cancelledOffset, CancelledMarshal.Create);
        }

        /// <include file="CancellableClass.xmldoc" path="declaration/member[@name='Cancelled']/*" />
        public delegate void Cancelled();

        /// <summary>
        /// Unmanaged callback
        /// </summary>
        [System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute(System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="none" type="void" managed-name="System.Void" /> */
        /* transfer-ownership:none direction:out */
        public unsafe delegate void UnmanagedCancelled(
/* <type name="Cancellable" type="GCancellable*" managed-name="Cancellable" is-pointer="1" /> */
/* transfer-ownership:none nullable:1 allow-none:1 direction:in */
System.IntPtr cancellable);

        /// <summary>
        /// Class for marshalling <see cref="Cancelled"/> methods.
        /// </summary>
        public static class CancelledMarshal
        {
            /// <summary>
            /// Creates an unmanaged delegate from a managed delegate.
            /// </summary>
            public static unsafe UnmanagedCancelled Create(System.Reflection.MethodInfo methodInfo)
            {
                void unmanagedCancelled(System.IntPtr cancellable_)
                {
                    try
                    {
                        var cancellable = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.Gio.Cancellable>(cancellable_, GISharp.Runtime.Transfer.None);
                        var doCancelled = (Cancelled)methodInfo.CreateDelegate(typeof(Cancelled), cancellable);
                        doCancelled();
                    }
                    catch (System.Exception ex)
                    {
                        GISharp.Lib.GLib.Log.LogUnhandledException(ex);
                    }
                }

                return unmanagedCancelled;
            }
        }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        public CancellableClass(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }
    }
}