<declaration>

<member name='IInitable.DoInit(GISharp.Lib.Gio.Cancellable?)'>
<summary>
Initializes the object implementing the interface.
</summary>
<remarks>
This method is intended for language bindings. If writing in C,
g_initable_new() should typically be used instead.

The object must be initialized before any real use after initial
construction, either with this function or <see cref="AsyncInitable.InitAsync(GISharp.Lib.Gio.IAsyncInitable,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.

Implementations may also support cancellation. If <paramref name="cancellable"/> is not <c>null</c>,
then initialization can be cancelled by triggering the cancellable object
from another thread. If the operation was cancelled, the error
<see cref="IOErrorEnum.Cancelled"/> will be returned. If <paramref name="cancellable"/> is not <c>null</c> and
the object doesn't support cancellable initialization the error
<see cref="IOErrorEnum.NotSupported"/> will be returned.

If the object is not initialized, or initialization returns with an
error, then all operations on the object except g_object_ref() and
g_object_unref() are considered to be invalid, and have undefined
behaviour. See the [introduction][ginitable] for more details.

Callers should not assume that a class which implements <see cref="IInitable"/> can be
initialized multiple times, unless the class explicitly documents itself as
supporting this. Generally, a class’ implementation of init() can assume
(and assert) that it will only be called once. Previously, this documentation
recommended all <see cref="IInitable"/> implementations should be idempotent; that
recommendation was relaxed in GLib 2.54.

If a class explicitly supports being initialized multiple times, it is
recommended that the method is idempotent: multiple calls with the same
arguments should return the same results. Only the first call initializes
the object; further calls return the result of the first call.

One reason why a class might need to support idempotent initialization is if
it is designed to be used via the singleton pattern, with a
#GObjectClass.constructor that sometimes returns an existing instance.
In this pattern, a caller would expect to be able to call <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/>
on the result of g_object_new(), regardless of whether it is in fact a new
instance.
</remarks>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<returns>
<c>true</c> if successful. If an error has occurred, this function will
    return <c>false</c> and set <see cref="GISharp.Runtime.GErrorException"/> appropriately if present.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='IInitable'>
<summary>
<see cref="IInitable"/> is implemented by objects that can fail during
initialization. If an object implements this interface then
it must be initialized as the first thing after construction,
either via <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/> or <see cref="AsyncInitable.InitAsync(GISharp.Lib.Gio.IAsyncInitable,System.Int32,GISharp.Lib.Gio.Cancellable)"/>
(the latter is only available if it also implements <see cref="IAsyncInitable"/>).
</summary>
<remarks>
If the object is not initialized, or initialization returns with an
error, then all operations on the object except g_object_ref() and
g_object_unref() are considered to be invalid, and have undefined
behaviour. They will often fail with g_critical() or g_warning(), but
this must not be relied on.

Users of objects implementing this are not intended to use
the interface method directly, instead it will be used automatically
in various ways. For C applications you generally just call
g_initable_new() directly, or indirectly via a foo_thing_new() wrapper.
This will call <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/> under the cover, returning <c>null</c> and
setting a #GError on failure (at which point the instance is
unreferenced).

For bindings in languages where the native constructor supports
exceptions the binding could check for objects implemention %GInitable
during normal construction and automatically initialize them, throwing
an exception on failure.
</remarks>
</member>

<member name='Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable?)'>
<summary>
Initializes the object implementing the interface.
</summary>
<remarks>
This method is intended for language bindings. If writing in C,
g_initable_new() should typically be used instead.

The object must be initialized before any real use after initial
construction, either with this function or <see cref="AsyncInitable.InitAsync(GISharp.Lib.Gio.IAsyncInitable,System.Int32,GISharp.Lib.Gio.Cancellable)"/>.

Implementations may also support cancellation. If <paramref name="cancellable"/> is not <c>null</c>,
then initialization can be cancelled by triggering the cancellable object
from another thread. If the operation was cancelled, the error
<see cref="IOErrorEnum.Cancelled"/> will be returned. If <paramref name="cancellable"/> is not <c>null</c> and
the object doesn't support cancellable initialization the error
<see cref="IOErrorEnum.NotSupported"/> will be returned.

If the object is not initialized, or initialization returns with an
error, then all operations on the object except g_object_ref() and
g_object_unref() are considered to be invalid, and have undefined
behaviour. See the [introduction][ginitable] for more details.

Callers should not assume that a class which implements <see cref="IInitable"/> can be
initialized multiple times, unless the class explicitly documents itself as
supporting this. Generally, a class’ implementation of init() can assume
(and assert) that it will only be called once. Previously, this documentation
recommended all <see cref="IInitable"/> implementations should be idempotent; that
recommendation was relaxed in GLib 2.54.

If a class explicitly supports being initialized multiple times, it is
recommended that the method is idempotent: multiple calls with the same
arguments should return the same results. Only the first call initializes
the object; further calls return the result of the first call.

One reason why a class might need to support idempotent initialization is if
it is designed to be used via the singleton pattern, with a
#GObjectClass.constructor that sometimes returns an existing instance.
In this pattern, a caller would expect to be able to call <see cref="Initable.Init(GISharp.Lib.Gio.IInitable,GISharp.Lib.Gio.Cancellable)"/>
on the result of g_object_new(), regardless of whether it is in fact a new
instance.
</remarks>
<param name="initable">
a <see cref="IInitable"/>.
</param>
<param name="cancellable">
optional <see cref="Cancellable"/> object, <c>null</c> to ignore.
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

</declaration>
