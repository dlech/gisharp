<declaration>

<member name='VariantDict.VariantDict(GISharp.Lib.GLib.Variant?)'>
<summary>
Allocates and initialises a new <see cref="VariantDict"/>.
</summary>
<remarks>
You should call <see cref="VariantDict.Unref()"/> on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In some cases it may be easier to place a <see cref="VariantDict"/> directly on
the stack of the calling function and initialise it with
g_variant_dict_init().  This is particularly useful when you are
using <see cref="VariantDict"/> to construct a #GVariant.
</remarks>
<param name="fromAsv">
the #GVariant with which to initialise the
  dictionary
</param>
</member>

<member name='VariantDict.Contains(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Checks if <paramref name="key"/> exists in this instance.
</summary>
<param name="key">
the key to look up in the dictionary
</param>
<returns>
<c>true</c> if <paramref name="key"/> is in this instance
</returns>
</member>

<member name='VariantDict.End()'>
<summary>
Returns the current value of this instance as a #GVariant of type
%G_VARIANT_TYPE_VARDICT, clearing it in the process.
</summary>
<remarks>
It is not permissible to use this instance in any way after this call except
for reference counting operations (in the case of a heap-allocated
<see cref="VariantDict"/>) or by reinitialising it with g_variant_dict_init() (in
the case of stack-allocated).
</remarks>
<returns>
a new, floating, #GVariant
</returns>
</member>

<member name='VariantDict.Insert(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.Variant)'>
<summary>
Inserts (or replaces) a key in a <see cref="VariantDict"/>.
</summary>
<remarks>
<paramref name="value"/> is consumed if it is floating.
</remarks>
<param name="key">
the key to insert a value for
</param>
<param name="value">
the value to insert
</param>
</member>

<member name='VariantDict.Lookup(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.VariantType?)'>
<summary>
Looks up a value in a <see cref="VariantDict"/>.
</summary>
<remarks>
If <paramref name="key"/> is not found in <paramref name="dictionary"/>, <c>null</c> is returned.

The <paramref name="expectedType"/> string specifies what type of value is expected.
If the value associated with <paramref name="key"/> has a different type then <c>null</c> is
returned.

If the key is found and the value has the correct type, it is
returned.  If <paramref name="expectedType"/> was specified then any non-<c>null</c> return
value will have this type.
</remarks>
<param name="key">
the key to look up in the dictionary
</param>
<param name="expectedType">
a #GVariantType, or <c>null</c>
</param>
<returns>
the value of the dictionary key, or <c>null</c>
</returns>
</member>

<member name='VariantDict.Remove(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Removes a key and its associated value from a <see cref="VariantDict"/>.
</summary>
<param name="key">
the key to remove
</param>
<returns>
<c>true</c> if the key was found and removed
</returns>
</member>

<member name='VariantDict'>
<summary>
<see cref="VariantDict"/> is a mutable interface to #GVariant dictionaries.
</summary>
<remarks>
It can be used for doing a sequence of dictionary lookups in an
efficient way on an existing #GVariant dictionary or it can be used
to construct new dictionaries with a hashtable-like interface.  It
can also be used for taking existing dictionaries and modifying them
in order to create new ones.

<see cref="VariantDict"/> can only be used with %G_VARIANT_TYPE_VARDICT
dictionaries.

It is possible to use <see cref="VariantDict"/> allocated on the stack or on the
heap.  When using a stack-allocated <see cref="VariantDict"/>, you begin with a
call to g_variant_dict_init() and free the resources with a call to
g_variant_dict_clear().

Heap-allocated <see cref="VariantDict"/> follows normal refcounting rules: you
allocate it with <see cref="VariantDict.VariantDict(GISharp.Lib.GLib.Variant)"/> and use <see cref="VariantDict.Ref()"/>
and <see cref="VariantDict.Unref()"/>.

<see cref="VariantDict.End()"/> is used to convert the <see cref="VariantDict"/> back into a
dictionary-type #GVariant.  When used with stack-allocated instances,
this also implicitly frees all associated memory, but for
heap-allocated instances, you must still call <see cref="VariantDict.Unref()"/>
afterwards.

You will typically want to use a heap-allocated <see cref="VariantDict"/> when
you expose it as part of an API.  For most other uses, the
stack-allocated form will be more convenient.

Consider the following two examples that do the same thing in each
style: take an existing dictionary and look up the "count" uint32
key, adding 1 to it if it is found, or returning an error if the
key is not found.  Each returns the new dictionary as a floating
#GVariant.

## Using a stack-allocated GVariantDict

|[&lt;!-- language="C" --&gt;
  GVariant *
  add_to_count (GVariant  *orig,
                GError   **error)
  {
    GVariantDict dict;
    guint32 count;

    g_variant_dict_init (&amp;dict, orig);
    if (!g_variant_dict_lookup (&amp;dict, "count", "u", &amp;count))
      {
        g_set_error (...);
        g_variant_dict_clear (&amp;dict);
        return NULL;
      }

    g_variant_dict_insert (&amp;dict, "count", "u", count + 1);

    return g_variant_dict_end (&amp;dict);
  }
]|

## Using heap-allocated GVariantDict

|[&lt;!-- language="C" --&gt;
  GVariant *
  add_to_count (GVariant  *orig,
                GError   **error)
  {
    GVariantDict *dict;
    GVariant *result;
    guint32 count;

    dict = g_variant_dict_new (orig);

    if (g_variant_dict_lookup (dict, "count", "u", &amp;count))
      {
        g_variant_dict_insert (dict, "count", "u", count + 1);
        result = g_variant_dict_end (dict);
      }
    else
      {
        g_set_error (...);
        result = NULL;
      }

    g_variant_dict_unref (dict);

    return result;
  }
]|
</remarks>
</member>

</declaration>
