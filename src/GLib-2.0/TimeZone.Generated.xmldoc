<declaration>

<member name='TimeZone.Local'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to local time.  The local time
zone may change between invocations to this function; for example,
if the system administrator changes it.
</summary>
<remarks>
This is equivalent to calling <see cref="TimeZone.TimeZone(GISharp.Lib.GLib.NullableUnownedUtf8)"/> with the value of
the `TZ` environment variable (including the possibility of <c>null</c>).

You should release the return value by calling <see cref="TimeZone.Unref()"/>
when you are done with it.
</remarks>
</member>

<member name='TimeZone.Utc'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to UTC.
</summary>
<remarks>
This is equivalent to calling <see cref="TimeZone.TimeZone(GISharp.Lib.GLib.NullableUnownedUtf8)"/> with a value like
"Z", "UTC", "+00", etc.

You should release the return value by calling <see cref="TimeZone.Unref()"/>
when you are done with it.
</remarks>
</member>

<member name='TimeZone.Identifier'>
<summary>
Get the identifier of this <see cref="TimeZone"/>, as passed to <see cref="TimeZone.TimeZone(GISharp.Lib.GLib.NullableUnownedUtf8)"/>.
If the identifier passed at construction time was not recognised, `UTC` will
be returned. If it was <c>null</c>, the identifier of the local timezone at
construction time will be returned.
</summary>
<remarks>
The identifier will be returned in the same format as provided at
construction time: if provided as a time offset, that will be returned by
this function.
</remarks>
</member>

<member name='TimeZone.TimeZone(GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to <paramref name="identifier"/>.
</summary>
<remarks>
<paramref name="identifier"/> can either be an RFC3339/ISO 8601 time offset or
something that would pass as a valid value for the `TZ` environment
variable (including <c>null</c>).

In Windows, <paramref name="identifier"/> can also be the unlocalized name of a time
zone for standard time, for example "Pacific Standard Time".

Valid RFC3339 time offsets are `"Z"` (for UTC) or
`"±hh:mm"`.  ISO 8601 additionally specifies
`"±hhmm"` and `"±hh"`.  Offsets are
time values to be added to Coordinated Universal Time (UTC) to get
the local time.

In UNIX, the `TZ` environment variable typically corresponds
to the name of a file in the zoneinfo database, an absolute path to a file
somewhere else, or a string in
"std offset [dst [offset],start[/time],end[/time]]" (POSIX) format.
There  are  no spaces in the specification. The name of standard
and daylight savings time zone must be three or more alphabetic
characters. Offsets are time values to be added to local time to
get Coordinated Universal Time (UTC) and should be
`"[±]hh[[:]mm[:ss]]"`.  Dates are either
`"Jn"` (Julian day with n between 1 and 365, leap
years not counted), `"n"` (zero-based Julian day
with n between 0 and 365) or `"Mm.w.d"` (day d
(0 &lt;= d &lt;= 6) of week w (1 &lt;= w &lt;= 5) of month m (1 &lt;= m &lt;= 12), day
0 is a Sunday).  Times are in local wall clock time, the default is
02:00:00.

In Windows, the "tzn[+|–]hh[:mm[:ss]][dzn]" format is used, but also
accepts POSIX format.  The Windows format uses US rules for all time
zones; daylight savings time is 60 minutes behind the standard time
with date and time of change taken from Pacific Standard Time.
Offsets are time values to be added to the local time to get
Coordinated Universal Time (UTC).

<see cref="TimeZone.GetLocal()"/> calls this function with the value of the
`TZ` environment variable. This function itself is independent of
the value of `TZ`, but if <paramref name="identifier"/> is <c>null</c> then `/etc/localtime`
will be consulted to discover the correct time zone on UNIX and the
registry will be consulted or GetTimeZoneInformation() will be used
to get the local time zone on Windows.

If intervals are not available, only time zone rules from `TZ`
environment variable or other means, then they will be computed
from year 1900 to 2037.  If the maximum year for the rules is
available and it is greater than 2037, then it will followed
instead.

See
[RFC3339 §5.6](http://tools.ietf.org/html/rfc3339#section-5.6)
for a precise definition of valid RFC3339 time offsets
(the `time-offset` expansion) and ISO 8601 for the
full list of valid time offsets.  See
[The GNU C Library manual](http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html)
for an explanation of the possible
values of the `TZ` environment variable. See
[Microsoft Time Zone Index Values](http://msdn.microsoft.com/en-us/library/ms912391%28v=winembedded.11%29.aspx)
for the list of time zones on Windows.

You should release the return value by calling <see cref="TimeZone.Unref()"/>
when you are done with it.
</remarks>
<param name="identifier">
a timezone identifier
</param>
</member>

<member name='TimeZone.TimeZone(System.String?)'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to <paramref name="identifier"/>.
</summary>
<remarks>
<paramref name="identifier"/> can either be an RFC3339/ISO 8601 time offset or
something that would pass as a valid value for the `TZ` environment
variable (including <c>null</c>).

In Windows, <paramref name="identifier"/> can also be the unlocalized name of a time
zone for standard time, for example "Pacific Standard Time".

Valid RFC3339 time offsets are `"Z"` (for UTC) or
`"±hh:mm"`.  ISO 8601 additionally specifies
`"±hhmm"` and `"±hh"`.  Offsets are
time values to be added to Coordinated Universal Time (UTC) to get
the local time.

In UNIX, the `TZ` environment variable typically corresponds
to the name of a file in the zoneinfo database, an absolute path to a file
somewhere else, or a string in
"std offset [dst [offset],start[/time],end[/time]]" (POSIX) format.
There  are  no spaces in the specification. The name of standard
and daylight savings time zone must be three or more alphabetic
characters. Offsets are time values to be added to local time to
get Coordinated Universal Time (UTC) and should be
`"[±]hh[[:]mm[:ss]]"`.  Dates are either
`"Jn"` (Julian day with n between 1 and 365, leap
years not counted), `"n"` (zero-based Julian day
with n between 0 and 365) or `"Mm.w.d"` (day d
(0 &lt;= d &lt;= 6) of week w (1 &lt;= w &lt;= 5) of month m (1 &lt;= m &lt;= 12), day
0 is a Sunday).  Times are in local wall clock time, the default is
02:00:00.

In Windows, the "tzn[+|–]hh[:mm[:ss]][dzn]" format is used, but also
accepts POSIX format.  The Windows format uses US rules for all time
zones; daylight savings time is 60 minutes behind the standard time
with date and time of change taken from Pacific Standard Time.
Offsets are time values to be added to the local time to get
Coordinated Universal Time (UTC).

<see cref="TimeZone.GetLocal()"/> calls this function with the value of the
`TZ` environment variable. This function itself is independent of
the value of `TZ`, but if <paramref name="identifier"/> is <c>null</c> then `/etc/localtime`
will be consulted to discover the correct time zone on UNIX and the
registry will be consulted or GetTimeZoneInformation() will be used
to get the local time zone on Windows.

If intervals are not available, only time zone rules from `TZ`
environment variable or other means, then they will be computed
from year 1900 to 2037.  If the maximum year for the rules is
available and it is greater than 2037, then it will followed
instead.

See
[RFC3339 §5.6](http://tools.ietf.org/html/rfc3339#section-5.6)
for a precise definition of valid RFC3339 time offsets
(the `time-offset` expansion) and ISO 8601 for the
full list of valid time offsets.  See
[The GNU C Library manual](http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html)
for an explanation of the possible
values of the `TZ` environment variable. See
[Microsoft Time Zone Index Values](http://msdn.microsoft.com/en-us/library/ms912391%28v=winembedded.11%29.aspx)
for the list of time zones on Windows.

You should release the return value by calling <see cref="TimeZone.Unref()"/>
when you are done with it.
</remarks>
<param name="identifier">
a timezone identifier
</param>
</member>

<member name='TimeZone.TimeZone(System.Int32)'>
<summary>
Creates a <see cref="TimeZone"/> corresponding to the given constant offset from UTC,
in seconds.
</summary>
<remarks>
This is equivalent to calling <see cref="TimeZone.TimeZone(GISharp.Lib.GLib.NullableUnownedUtf8)"/> with a string in the form
`[+|-]hh[:mm[:ss]]`.
</remarks>
<param name="seconds">
offset to UTC, in seconds
</param>
</member>

<member name='TimeZone.AdjustTime(GISharp.Lib.GLib.TimeType,System.Int64)'>
<summary>
Finds an interval within this instance that corresponds to the given <paramref name="time"/>,
possibly adjusting <paramref name="time"/> if required to fit into an interval.
The meaning of <paramref name="time"/> depends on <paramref name="type"/>.
</summary>
<remarks>
This function is similar to <see cref="TimeZone.FindInterval(GISharp.Lib.GLib.TimeType,System.Int64)"/>, with the
difference that it always succeeds (by making the adjustments
described below).

In any of the cases where <see cref="TimeZone.FindInterval(GISharp.Lib.GLib.TimeType,System.Int64)"/> succeeds then
this function returns the same value, without modifying <paramref name="time"/>.

This function may, however, modify <paramref name="time"/> in order to deal with
non-existent times.  If the non-existent local <paramref name="time"/> of 02:30 were
requested on March 14th 2010 in Toronto then this function would
adjust <paramref name="time"/> to be 03:00 and return the interval containing the
adjusted time.
</remarks>
<param name="type">
the <see cref="TimeType"/> of <paramref name="time"/>
</param>
<param name="time">
a pointer to a number of seconds since January 1, 1970
</param>
<returns>
the interval containing <paramref name="time"/>, never -1
</returns>
</member>

<member name='TimeZone.FindInterval(GISharp.Lib.GLib.TimeType,System.Int64)'>
<summary>
Finds an interval within this instance that corresponds to the given <paramref name="time"/>.
The meaning of <paramref name="time"/> depends on <paramref name="type"/>.
</summary>
<remarks>
If <paramref name="type"/> is <see cref="TimeType.Universal"/> then this function will always
succeed (since universal time is monotonic and continuous).

Otherwise <paramref name="time"/> is treated as local time.  The distinction between
<see cref="TimeType.Standard"/> and <see cref="TimeType.Daylight"/> is ignored except in
the case that the given <paramref name="time"/> is ambiguous.  In Toronto, for example,
01:30 on November 7th 2010 occurred twice (once inside of daylight
savings time and the next, an hour later, outside of daylight savings
time).  In this case, the different value of <paramref name="type"/> would result in a
different interval being returned.

It is still possible for this function to fail.  In Toronto, for
example, 02:00 on March 14th 2010 does not exist (due to the leap
forward to begin daylight savings time).  -1 is returned in that
case.
</remarks>
<param name="type">
the <see cref="TimeType"/> of <paramref name="time"/>
</param>
<param name="time">
a number of seconds since January 1, 1970
</param>
<returns>
the interval containing <paramref name="time"/>, or -1 in case of failure
</returns>
</member>

<member name='TimeZone.GetAbbreviation(System.Int32)'>
<summary>
Determines the time zone abbreviation to be used during a particular
<paramref name="interval"/> of time in the time zone this instance.
</summary>
<remarks>
For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings time
is in effect.
</remarks>
<param name="interval">
an interval within the timezone
</param>
<returns>
the time zone abbreviation, which belongs to this instance
</returns>
</member>

<member name='TimeZone.GetOffset(System.Int32)'>
<summary>
Determines the offset to UTC in effect during a particular <paramref name="interval"/>
of time in the time zone this instance.
</summary>
<remarks>
The offset is the number of seconds that you add to UTC time to
arrive at local time for this instance (ie: negative numbers for time zones
west of GMT, positive numbers for east).
</remarks>
<param name="interval">
an interval within the timezone
</param>
<returns>
the number of seconds that should be added to UTC to get the
         local time in this instance
</returns>
</member>

<member name='TimeZone.IsDst(System.Int32)'>
<summary>
Determines if daylight savings time is in effect during a particular
<paramref name="interval"/> of time in the time zone this instance.
</summary>
<param name="interval">
an interval within the timezone
</param>
<returns>
<c>true</c> if daylight savings time is in effect
</returns>
</member>

<member name='TimeZone'>
<summary>
<see cref="TimeZone"/> is an opaque structure whose members cannot be accessed
directly.
</summary>
</member>

</declaration>
