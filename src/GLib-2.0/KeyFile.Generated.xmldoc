<declaration>

<member name='KeyFile.DesktopGroup'>
<summary>
The name of the main group of a desktop entry file, as defined in the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec).
Consult the specification for more
details about the meanings of the keys below.
</summary>
</member>

<member name='KeyFile.DesktopKeyActions'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string list
giving the available application actions.
</summary>
</member>

<member name='KeyFile.DesktopKeyCategories'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the categories in which the desktop entry
should be shown in a menu.
</summary>
</member>

<member name='KeyFile.DesktopKeyComment'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the tooltip for the desktop entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyDbusActivatable'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean set to true
if the application is D-Bus activatable.
</summary>
</member>

<member name='KeyFile.DesktopKeyExec'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the command line to execute. It is only valid for desktop
entries with the `Application` type.
</summary>
</member>

<member name='KeyFile.DesktopKeyGenericName'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the generic name of the desktop entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyHidden'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry has been deleted by the user.
</summary>
</member>

<member name='KeyFile.DesktopKeyIcon'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the name of the icon to be displayed for the desktop
entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyMimeType'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the MIME types supported by this desktop entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyName'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the specific name of the desktop entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyNotShowIn'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should not display the
desktop entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyNoDisplay'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry should be shown in menus.
</summary>
</member>

<member name='KeyFile.DesktopKeyOnlyShowIn'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should display the
desktop entry.
</summary>
</member>

<member name='KeyFile.DesktopKeyPath'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
containing the working directory to run the program in. It is only
valid for desktop entries with the `Application` type.
</summary>
</member>

<member name='KeyFile.DesktopKeyStartupNotify'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the application supports the
[Startup Notification Protocol Specification](http://www.freedesktop.org/Standards/startup-notification-spec).
</summary>
</member>

<member name='KeyFile.DesktopKeyStartupWmClass'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is string
identifying the WM class or name hint of a window that the application
will create, which can be used to emulate Startup Notification with
older applications.
</summary>
</member>

<member name='KeyFile.DesktopKeyTerminal'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the program should be run in a terminal window.
It is only valid for desktop entries with the
`Application` type.
</summary>
</member>

<member name='KeyFile.DesktopKeyTryExec'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the file name of a binary on disk used to determine if the
program is actually installed. It is only valid for desktop entries
with the `Application` type.
</summary>
</member>

<member name='KeyFile.DesktopKeyType'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the type of the desktop entry. Usually
#G_KEY_FILE_DESKTOP_TYPE_APPLICATION,
#G_KEY_FILE_DESKTOP_TYPE_LINK, or
#G_KEY_FILE_DESKTOP_TYPE_DIRECTORY.
</summary>
</member>

<member name='KeyFile.DesktopKeyUrl'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the URL to access. It is only valid for desktop entries
with the `Link` type.
</summary>
</member>

<member name='KeyFile.DesktopKeyVersion'>
<summary>
A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the version of the Desktop Entry Specification used for
the desktop entry file.
</summary>
</member>

<member name='KeyFile.DesktopTypeApplication'>
<summary>
The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing applications.
</summary>
</member>

<member name='KeyFile.DesktopTypeDirectory'>
<summary>
The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing directories.
</summary>
</member>

<member name='KeyFile.DesktopTypeLink'>
<summary>
The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing links to documents.
</summary>
</member>

<member name='KeyFile.Groups'>
<summary>
Returns all groups in the key file loaded with this instance.
The array of returned groups will be <c>null</c>-terminated, so
this instance may optionally be <c>null</c>.
</summary>
</member>

<member name='KeyFile.StartGroup'>
<summary>
Returns the name of the start group of the file.
</summary>
</member>

<member name='KeyFile.KeyFile()'>
<summary>
Creates a new empty <see cref="KeyFile"/> object. Use
<see cref="M:KeyFile.LoadFromFile(GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.KeyFileFlags)"/>, <see cref="M:KeyFile.LoadFromData(GISharp.Lib.GLib.Utf8,System.Int32,GISharp.Lib.GLib.KeyFileFlags)"/>,
<see cref="M:KeyFile.LoadFromDirs(GISharp.Lib.GLib.Filename,GISharp.Runtime.FilenameArray,GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.KeyFileFlags)"/> or <see cref="M:KeyFile.LoadFromDataDirs(GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.KeyFileFlags)"/> to
read an existing key file.
</summary>
</member>

<member name='KeyFile.GetBoolean(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the value associated with this instance under this instance as a
boolean.
</summary>
<remarks>
If this instance cannot be found then <c>false</c> is returned and this instance is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value
associated with this instance cannot be interpreted as a boolean then <c>false</c>
is returned and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
the value associated with the key as a boolean,
   or <c>false</c> if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetBoolean(System.String,System.String)'>
<summary>
Returns the value associated with this instance under this instance as a
boolean.
</summary>
<remarks>
If this instance cannot be found then <c>false</c> is returned and this instance is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value
associated with this instance cannot be interpreted as a boolean then <c>false</c>
is returned and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
the value associated with the key as a boolean,
   or <c>false</c> if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetBooleanList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the values associated with this instance under this instance as
booleans.
</summary>
<remarks>
If this instance cannot be found then <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with this instance cannot be interpreted as booleans then <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

   the values associated with the key as a list of booleans, or <c>null</c> if the
   key was not found or could not be parsed. The returned list of booleans
   should be freed with g_free() when no longer needed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetBooleanList(System.String,System.String)'>
<summary>
Returns the values associated with this instance under this instance as
booleans.
</summary>
<remarks>
If this instance cannot be found then <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with this instance cannot be interpreted as booleans then <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

   the values associated with the key as a list of booleans, or <c>null</c> if the
   key was not found or could not be parsed. The returned list of booleans
   should be freed with g_free() when no longer needed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetComment(GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Retrieves a comment above this instance from this instance.
If this instance is <c>null</c> then this instance will be read from above
this instance. If both this instance and this instance are <c>null</c>, then
this instance will be read from above the first group in the file.
</summary>
<remarks>
Note that the returned string does not include the '#' comment markers,
but does include any whitespace after them (on each line). It includes
the line breaks between lines, but does not include the final line break.
</remarks>
<param name="groupName">
a group name, or <c>null</c>
</param>
<param name="key">
a key
</param>
<returns>
a comment that should be freed with g_free()
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetComment(System.String?,System.String)'>
<summary>
Retrieves a comment above this instance from this instance.
If this instance is <c>null</c> then this instance will be read from above
this instance. If both this instance and this instance are <c>null</c>, then
this instance will be read from above the first group in the file.
</summary>
<remarks>
Note that the returned string does not include the '#' comment markers,
but does include any whitespace after them (on each line). It includes
the line breaks between lines, but does not include the final line break.
</remarks>
<param name="groupName">
a group name, or <c>null</c>
</param>
<param name="key">
a key
</param>
<returns>
a comment that should be freed with g_free()
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetDouble(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the value associated with this instance under this instance as a
double. If this instance is <c>null</c>, the start_group is used.
</summary>
<remarks>
If this instance cannot be found then 0.0 is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with this instance cannot be interpreted as a double then 0.0 is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
the value associated with the key as a double, or
    0.0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetDouble(System.String,System.String)'>
<summary>
Returns the value associated with this instance under this instance as a
double. If this instance is <c>null</c>, the start_group is used.
</summary>
<remarks>
If this instance cannot be found then 0.0 is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with this instance cannot be interpreted as a double then 0.0 is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
the value associated with the key as a double, or
    0.0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetDoubleList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the values associated with this instance under this instance as
doubles.
</summary>
<remarks>
If this instance cannot be found then <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with this instance cannot be interpreted as doubles then <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

    the values associated with the key as a list of doubles, or <c>null</c> if the
    key was not found or could not be parsed. The returned list of doubles
    should be freed with g_free() when no longer needed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetDoubleList(System.String,System.String)'>
<summary>
Returns the values associated with this instance under this instance as
doubles.
</summary>
<remarks>
If this instance cannot be found then <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with this instance cannot be interpreted as doubles then <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

    the values associated with the key as a list of doubles, or <c>null</c> if the
    key was not found or could not be parsed. The returned list of doubles
    should be freed with g_free() when no longer needed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetInt64(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the value associated with this instance under this instance as a signed
64-bit integer. This is similar to <see cref="M:KeyFile.GetInteger(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> but can return
64-bit results without truncation.
</summary>
<param name="groupName">
a non-<c>null</c> group name
</param>
<param name="key">
a non-<c>null</c> key
</param>
<returns>
the value associated with the key as a signed 64-bit integer, or
0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetInt64(System.String,System.String)'>
<summary>
Returns the value associated with this instance under this instance as a signed
64-bit integer. This is similar to <see cref="M:KeyFile.GetInteger(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> but can return
64-bit results without truncation.
</summary>
<param name="groupName">
a non-<c>null</c> group name
</param>
<param name="key">
a non-<c>null</c> key
</param>
<returns>
the value associated with the key as a signed 64-bit integer, or
0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetInteger(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the value associated with this instance under this instance as an
integer.
</summary>
<remarks>
If this instance cannot be found then 0 is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with this instance cannot be interpreted as an integer, or is out of range
for a #gint, then 0 is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
the value associated with the key as an integer, or
    0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetInteger(System.String,System.String)'>
<summary>
Returns the value associated with this instance under this instance as an
integer.
</summary>
<remarks>
If this instance cannot be found then 0 is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with this instance cannot be interpreted as an integer, or is out of range
for a #gint, then 0 is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
the value associated with the key as an integer, or
    0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetIntegerList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the values associated with this instance under this instance as
integers.
</summary>
<remarks>
If this instance cannot be found then <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with this instance cannot be interpreted as integers, or are out of range for
#gint, then <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

    the values associated with the key as a list of integers, or <c>null</c> if
    the key was not found or could not be parsed. The returned list of
    integers should be freed with g_free() when no longer needed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetIntegerList(System.String,System.String)'>
<summary>
Returns the values associated with this instance under this instance as
integers.
</summary>
<remarks>
If this instance cannot be found then <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with this instance cannot be interpreted as integers, or are out of range for
#gint, then <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_INVALID_VALUE.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

    the values associated with the key as a list of integers, or <c>null</c> if
    the key was not found or could not be parsed. The returned list of
    integers should be freed with g_free() when no longer needed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetKeys(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns all keys for the group name this instance.  The array of
returned keys will be <c>null</c>-terminated, so this instance may
optionally be <c>null</c>. In the event that the this instance cannot
be found, <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</summary>
<param name="groupName">
a group name
</param>
<returns>
a newly-allocated <c>null</c>-terminated array of strings.
    Use g_strfreev() to free it.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetKeys(System.String)'>
<summary>
Returns all keys for the group name this instance.  The array of
returned keys will be <c>null</c>-terminated, so this instance may
optionally be <c>null</c>. In the event that the this instance cannot
be found, <c>null</c> is returned and this instance is set to
#G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</summary>
<param name="groupName">
a group name
</param>
<returns>
a newly-allocated <c>null</c>-terminated array of strings.
    Use g_strfreev() to free it.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetLocaleForKey(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Returns the actual locale which the result of
<see cref="M:KeyFile.GetLocaleString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> or <see cref="M:KeyFile.GetLocaleStringList(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>
came from.
</summary>
<remarks>
If calling <see cref="M:KeyFile.GetLocaleString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> or
<see cref="M:KeyFile.GetLocaleStringList(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> with exactly the same this instance,
this instance, this instance and this instance, the result of those functions will
have originally been tagged with the locale that is the result of
this function.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier or <c>null</c>
</param>
<returns>
the locale from the file, or <c>null</c> if the key was not
  found or the entry in the file was was untranslated
</returns>
</member>

<member name='KeyFile.GetLocaleForKey(System.String,System.String,System.String?)'>
<summary>
Returns the actual locale which the result of
<see cref="M:KeyFile.GetLocaleString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> or <see cref="M:KeyFile.GetLocaleStringList(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>
came from.
</summary>
<remarks>
If calling <see cref="M:KeyFile.GetLocaleString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> or
<see cref="M:KeyFile.GetLocaleStringList(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> with exactly the same this instance,
this instance, this instance and this instance, the result of those functions will
have originally been tagged with the locale that is the result of
this function.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier or <c>null</c>
</param>
<returns>
the locale from the file, or <c>null</c> if the key was not
  found or the entry in the file was was untranslated
</returns>
</member>

<member name='KeyFile.GetLocaleString(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Returns the value associated with this instance under this instance
translated in the given this instance if available.  If this instance is
<c>null</c> then the current locale is assumed.
</summary>
<remarks>
If this instance is to be non-<c>null</c>, or if the current locale will change over
the lifetime of the <see cref="KeyFile"/>, it must be loaded with
<see cref="KeyFileFlags.KeepTranslations"/> in order to load strings for all locales.

If this instance cannot be found then <c>null</c> is returned and this instance is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated
with this instance cannot be interpreted or no suitable translation can
be found then the untranslated value is returned.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier or <c>null</c>
</param>
<returns>
a newly allocated string or <c>null</c> if the specified
  key cannot be found.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetLocaleString(System.String,System.String,System.String?)'>
<summary>
Returns the value associated with this instance under this instance
translated in the given this instance if available.  If this instance is
<c>null</c> then the current locale is assumed.
</summary>
<remarks>
If this instance is to be non-<c>null</c>, or if the current locale will change over
the lifetime of the <see cref="KeyFile"/>, it must be loaded with
<see cref="KeyFileFlags.KeepTranslations"/> in order to load strings for all locales.

If this instance cannot be found then <c>null</c> is returned and this instance is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated
with this instance cannot be interpreted or no suitable translation can
be found then the untranslated value is returned.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier or <c>null</c>
</param>
<returns>
a newly allocated string or <c>null</c> if the specified
  key cannot be found.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetLocaleStringList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Returns the values associated with this instance under this instance
translated in the given this instance if available.  If this instance is
<c>null</c> then the current locale is assumed.
</summary>
<remarks>
If this instance is to be non-<c>null</c>, or if the current locale will change over
the lifetime of the <see cref="KeyFile"/>, it must be loaded with
<see cref="KeyFileFlags.KeepTranslations"/> in order to load strings for all locales.

If this instance cannot be found then <c>null</c> is returned and this instance is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated
with this instance cannot be interpreted or no suitable translations
can be found then the untranslated values are returned. The
returned array is <c>null</c>-terminated, so this instance may optionally
be <c>null</c>.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier or <c>null</c>
</param>
<returns>
a newly allocated <c>null</c>-terminated string array
  or <c>null</c> if the key isn't found. The string array should be freed
  with g_strfreev().
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetLocaleStringList(System.String,System.String,System.String?)'>
<summary>
Returns the values associated with this instance under this instance
translated in the given this instance if available.  If this instance is
<c>null</c> then the current locale is assumed.
</summary>
<remarks>
If this instance is to be non-<c>null</c>, or if the current locale will change over
the lifetime of the <see cref="KeyFile"/>, it must be loaded with
<see cref="KeyFileFlags.KeepTranslations"/> in order to load strings for all locales.

If this instance cannot be found then <c>null</c> is returned and this instance is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated
with this instance cannot be interpreted or no suitable translations
can be found then the untranslated values are returned. The
returned array is <c>null</c>-terminated, so this instance may optionally
be <c>null</c>.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier or <c>null</c>
</param>
<returns>
a newly allocated <c>null</c>-terminated string array
  or <c>null</c> if the key isn't found. The string array should be freed
  with g_strfreev().
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetString(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the string value associated with this instance under this instance.
Unlike <see cref="M:KeyFile.GetValue(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>, this function handles escape sequences
like \s.
</summary>
<remarks>
In the event the key cannot be found, <c>null</c> is returned and
this instance is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the this instance cannot be found, <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
a newly allocated string or <c>null</c> if the specified
  key cannot be found.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetString(System.String,System.String)'>
<summary>
Returns the string value associated with this instance under this instance.
Unlike <see cref="M:KeyFile.GetValue(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>, this function handles escape sequences
like \s.
</summary>
<remarks>
In the event the key cannot be found, <c>null</c> is returned and
this instance is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the this instance cannot be found, <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
a newly allocated string or <c>null</c> if the specified
  key cannot be found.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetStringList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the values associated with this instance under this instance.
</summary>
<remarks>
In the event the key cannot be found, <c>null</c> is returned and
this instance is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the this instance cannot be found, <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

 a <c>null</c>-terminated string array or <c>null</c> if the specified
 key cannot be found. The array should be freed with g_strfreev().
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetStringList(System.String,System.String)'>
<summary>
Returns the values associated with this instance under this instance.
</summary>
<remarks>
In the event the key cannot be found, <c>null</c> is returned and
this instance is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the this instance cannot be found, <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>

 a <c>null</c>-terminated string array or <c>null</c> if the specified
 key cannot be found. The array should be freed with g_strfreev().
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetUint64(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the value associated with this instance under this instance as an unsigned
64-bit integer. This is similar to <see cref="M:KeyFile.GetInteger(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> but can return
large positive results without truncation.
</summary>
<param name="groupName">
a non-<c>null</c> group name
</param>
<param name="key">
a non-<c>null</c> key
</param>
<returns>
the value associated with the key as an unsigned 64-bit integer,
or 0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetUint64(System.String,System.String)'>
<summary>
Returns the value associated with this instance under this instance as an unsigned
64-bit integer. This is similar to <see cref="M:KeyFile.GetInteger(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> but can return
large positive results without truncation.
</summary>
<param name="groupName">
a non-<c>null</c> group name
</param>
<param name="key">
a non-<c>null</c> key
</param>
<returns>
the value associated with the key as an unsigned 64-bit integer,
or 0 if the key was not found or could not be parsed.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetValue(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Returns the raw value associated with this instance under this instance.
Use <see cref="M:KeyFile.GetString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> to retrieve an unescaped UTF-8 string.
</summary>
<remarks>
In the event the key cannot be found, <c>null</c> is returned and
this instance is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the this instance cannot be found, <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
a newly allocated string or <c>null</c> if the specified
 key cannot be found.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.GetValue(System.String,System.String)'>
<summary>
Returns the raw value associated with this instance under this instance.
Use <see cref="M:KeyFile.GetString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/> to retrieve an unescaped UTF-8 string.
</summary>
<remarks>
In the event the key cannot be found, <c>null</c> is returned and
this instance is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the this instance cannot be found, <c>null</c> is returned
and this instance is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<returns>
a newly allocated string or <c>null</c> if the specified
 key cannot be found.
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.HasGroup(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Looks whether the key file has the group this instance.
</summary>
<param name="groupName">
a group name
</param>
<returns>
<c>true</c> if this instance is a part of this instance, <c>false</c>
otherwise.
</returns>
</member>

<member name='KeyFile.HasGroup(System.String)'>
<summary>
Looks whether the key file has the group this instance.
</summary>
<param name="groupName">
a group name
</param>
<returns>
<c>true</c> if this instance is a part of this instance, <c>false</c>
otherwise.
</returns>
</member>

<member name='KeyFile.LoadFromBytes(GISharp.Lib.GLib.Bytes,GISharp.Lib.GLib.KeyFileFlags)'>
<summary>
Loads a key file from the data in this instance into an empty <see cref="KeyFile"/> structure.
If the object cannot be created then %error is set to a <see cref="KeyFileError"/>.
</summary>
<param name="bytes">
a #GBytes
</param>
<param name="flags">
flags from <see cref="KeyFileFlags"/>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.LoadFromData(GISharp.Lib.GLib.UnownedUtf8,System.Int32,GISharp.Lib.GLib.KeyFileFlags)'>
<summary>
Loads a key file from memory into an empty <see cref="KeyFile"/> structure.
If the object cannot be created then %error is set to a <see cref="KeyFileError"/>.
</summary>
<param name="data">
key file loaded in memory
</param>
<param name="length">
the length of this instance in bytes (or (gsize)-1 if data is nul-terminated)
</param>
<param name="flags">
flags from <see cref="KeyFileFlags"/>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.LoadFromData(System.String,System.Int32,GISharp.Lib.GLib.KeyFileFlags)'>
<summary>
Loads a key file from memory into an empty <see cref="KeyFile"/> structure.
If the object cannot be created then %error is set to a <see cref="KeyFileError"/>.
</summary>
<param name="data">
key file loaded in memory
</param>
<param name="length">
the length of this instance in bytes (or (gsize)-1 if data is nul-terminated)
</param>
<param name="flags">
flags from <see cref="KeyFileFlags"/>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.LoadFromDataDirs(GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.KeyFileFlags)'>
<summary>
This function looks for a key file named this instance in the paths
returned from g_get_user_data_dir() and g_get_system_data_dirs(),
loads the file into this instance and returns the file's full path in
this instance.  If the file could not be loaded then an %error is
set to either a #GFileError or <see cref="KeyFileError"/>.
</summary>
<param name="file">
a relative path to a filename to open and parse
</param>
<param name="fullPath">
return location for a string containing the full path
  of the file, or <c>null</c>
</param>
<param name="flags">
flags from <see cref="KeyFileFlags"/>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.LoadFromDirs(GISharp.Lib.GLib.Filename,GISharp.Runtime.FilenameArray,GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.KeyFileFlags)'>
<summary>
This function looks for a key file named this instance in the paths
specified in this instance, loads the file into this instance and
returns the file's full path in this instance.
</summary>
<remarks>
If the file could not be found in any of the this instance,
<see cref="KeyFileError.NotFound"/> is returned. If
the file is found but the OS returns an error when opening or reading the
file, a %G_FILE_ERROR is returned. If there is a problem parsing the file, a
%G_KEY_FILE_ERROR is returned.
</remarks>
<param name="file">
a relative path to a filename to open and parse
</param>
<param name="searchDirs">
<c>null</c>-terminated array of directories to search
</param>
<param name="fullPath">
return location for a string containing the full path
  of the file, or <c>null</c>
</param>
<param name="flags">
flags from <see cref="KeyFileFlags"/>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.LoadFromFile(GISharp.Lib.GLib.Filename,GISharp.Lib.GLib.KeyFileFlags)'>
<summary>
Loads a key file into an empty <see cref="KeyFile"/> structure.
</summary>
<remarks>
If the OS returns an error when opening or reading the file, a
%G_FILE_ERROR is returned. If there is a problem parsing the file, a
%G_KEY_FILE_ERROR is returned.

This function will never return a <see cref="KeyFileError.NotFound"/> error. If the
this instance is not found, %G_FILE_ERROR_NOENT is returned.
</remarks>
<param name="file">
the path of a filename to load, in the GLib filename encoding
</param>
<param name="flags">
flags from <see cref="KeyFileFlags"/>
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.RemoveComment(GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8)'>
<summary>
Removes a comment above this instance from this instance.
If this instance is <c>null</c> then this instance will be removed above this instance.
If both this instance and this instance are <c>null</c>, then this instance will
be removed above the first group in the file.
</summary>
<param name="groupName">
a group name, or <c>null</c>
</param>
<param name="key">
a key
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.RemoveComment(System.String?,System.String?)'>
<summary>
Removes a comment above this instance from this instance.
If this instance is <c>null</c> then this instance will be removed above this instance.
If both this instance and this instance are <c>null</c>, then this instance will
be removed above the first group in the file.
</summary>
<param name="groupName">
a group name, or <c>null</c>
</param>
<param name="key">
a key
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.RemoveGroup(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Removes the specified group, this instance,
from the key file.
</summary>
<param name="groupName">
a group name
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.RemoveGroup(System.String)'>
<summary>
Removes the specified group, this instance,
from the key file.
</summary>
<param name="groupName">
a group name
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.RemoveKey(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Removes this instance in this instance from the key file.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key name to remove
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.RemoveKey(System.String,System.String)'>
<summary>
Removes this instance in this instance from the key file.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key name to remove
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.SaveToFile(GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Writes the contents of this instance to this instance using
g_file_set_contents().
</summary>
<remarks>
This function can fail for any of the reasons that
g_file_set_contents() may fail.
</remarks>
<param name="filename">
the name of the file to write to
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.SaveToFile(System.String)'>
<summary>
Writes the contents of this instance to this instance using
g_file_set_contents().
</summary>
<remarks>
This function can fail for any of the reasons that
g_file_set_contents() may fail.
</remarks>
<param name="filename">
the name of the file to write to
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.SetBoolean(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.Boolean)'>
<summary>
Associates a new boolean value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
<c>true</c> or <c>false</c>
</param>
</member>

<member name='KeyFile.SetBoolean(System.String,System.String,System.Boolean)'>
<summary>
Associates a new boolean value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
<c>true</c> or <c>false</c>
</param>
</member>

<member name='KeyFile.SetBooleanList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.ReadOnlySpan&lt;GISharp.Runtime.Boolean&gt;)'>
<summary>
Associates a list of boolean values with this instance under this instance.
If this instance cannot be found then it is created.
If this instance is <c>null</c>, the start_group is used.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of boolean values
</param>
</member>

<member name='KeyFile.SetBooleanList(System.String,System.String,System.ReadOnlySpan&lt;GISharp.Runtime.Boolean&gt;)'>
<summary>
Associates a list of boolean values with this instance under this instance.
If this instance cannot be found then it is created.
If this instance is <c>null</c>, the start_group is used.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of boolean values
</param>
</member>

<member name='KeyFile.SetComment(GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.GLib.NullableUnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Places a comment above this instance from this instance.
</summary>
<remarks>
If this instance is <c>null</c> then this instance will be written above this instance.
If both this instance and this instance  are <c>null</c>, then this instance will be
written above the first group in the file.

Note that this function prepends a '#' comment marker to
each line of this instance.
</remarks>
<param name="groupName">
a group name, or <c>null</c>
</param>
<param name="key">
a key
</param>
<param name="comment">
a comment
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.SetComment(System.String?,System.String?,System.String)'>
<summary>
Places a comment above this instance from this instance.
</summary>
<remarks>
If this instance is <c>null</c> then this instance will be written above this instance.
If both this instance and this instance  are <c>null</c>, then this instance will be
written above the first group in the file.

Note that this function prepends a '#' comment marker to
each line of this instance.
</remarks>
<param name="groupName">
a group name, or <c>null</c>
</param>
<param name="key">
a key
</param>
<param name="comment">
a comment
</param>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile.SetDouble(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.Double)'>
<summary>
Associates a new double value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an double value
</param>
</member>

<member name='KeyFile.SetDouble(System.String,System.String,System.Double)'>
<summary>
Associates a new double value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an double value
</param>
</member>

<member name='KeyFile.SetDoubleList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.ReadOnlySpan&lt;System.Double&gt;)'>
<summary>
Associates a list of double values with this instance under
this instance.  If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of double values
</param>
</member>

<member name='KeyFile.SetDoubleList(System.String,System.String,System.ReadOnlySpan&lt;System.Double&gt;)'>
<summary>
Associates a list of double values with this instance under
this instance.  If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of double values
</param>
</member>

<member name='KeyFile.SetInt64(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.Int64)'>
<summary>
Associates a new integer value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an integer value
</param>
</member>

<member name='KeyFile.SetInt64(System.String,System.String,System.Int64)'>
<summary>
Associates a new integer value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an integer value
</param>
</member>

<member name='KeyFile.SetInteger(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.Int32)'>
<summary>
Associates a new integer value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an integer value
</param>
</member>

<member name='KeyFile.SetInteger(System.String,System.String,System.Int32)'>
<summary>
Associates a new integer value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an integer value
</param>
</member>

<member name='KeyFile.SetIntegerList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.ReadOnlySpan&lt;System.Int32&gt;)'>
<summary>
Associates a list of integer values with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of integer values
</param>
</member>

<member name='KeyFile.SetIntegerList(System.String,System.String,System.ReadOnlySpan&lt;System.Int32&gt;)'>
<summary>
Associates a list of integer values with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of integer values
</param>
</member>

<member name='KeyFile.SetListSeparator(System.SByte)'>
<summary>
Sets the character which is used to separate
values in lists. Typically ';' or ',' are used
as separators. The default list separator is ';'.
</summary>
<param name="separator">
the separator
</param>
</member>

<member name='KeyFile.SetLocaleString(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Associates a string value for this instance and this instance under this instance.
If the translation for this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier
</param>
<param name="string">
a string
</param>
</member>

<member name='KeyFile.SetLocaleString(System.String,System.String,System.String,System.String)'>
<summary>
Associates a string value for this instance and this instance under this instance.
If the translation for this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier
</param>
<param name="string">
a string
</param>
</member>

<member name='KeyFile.SetLocaleStringList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GLib.Utf8&gt;)'>
<summary>
Associates a list of string values for this instance and this instance under
this instance.  If the translation for this instance cannot be found then
it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier
</param>
<param name="list">
a <c>null</c>-terminated array of locale string values
</param>
</member>

<member name='KeyFile.SetLocaleStringList(System.String,System.String,System.String,GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GLib.Utf8&gt;)'>
<summary>
Associates a list of string values for this instance and this instance under
this instance.  If the translation for this instance cannot be found then
it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="locale">
a locale identifier
</param>
<param name="list">
a <c>null</c>-terminated array of locale string values
</param>
</member>

<member name='KeyFile.SetString(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Associates a new string value with this instance under this instance.
If this instance cannot be found then it is created.
If this instance cannot be found then it is created.
Unlike <see cref="M:KeyFile.SetValue(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>, this function handles characters
that need escaping, such as newlines.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="string">
a string
</param>
</member>

<member name='KeyFile.SetString(System.String,System.String,System.String)'>
<summary>
Associates a new string value with this instance under this instance.
If this instance cannot be found then it is created.
If this instance cannot be found then it is created.
Unlike <see cref="M:KeyFile.SetValue(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>, this function handles characters
that need escaping, such as newlines.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="string">
a string
</param>
</member>

<member name='KeyFile.SetStringList(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GLib.Utf8&gt;)'>
<summary>
Associates a list of string values for this instance under this instance.
If this instance cannot be found then it is created.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of string values
</param>
</member>

<member name='KeyFile.SetStringList(System.String,System.String,GISharp.Runtime.UnownedCPtrArray&lt;GISharp.Lib.GLib.Utf8&gt;)'>
<summary>
Associates a list of string values for this instance under this instance.
If this instance cannot be found then it is created.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="list">
an array of string values
</param>
</member>

<member name='KeyFile.SetUint64(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,System.UInt64)'>
<summary>
Associates a new integer value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an integer value
</param>
</member>

<member name='KeyFile.SetUint64(System.String,System.String,System.UInt64)'>
<summary>
Associates a new integer value with this instance under this instance.
If this instance cannot be found then it is created.
</summary>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
an integer value
</param>
</member>

<member name='KeyFile.SetValue(GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8,GISharp.Lib.GLib.UnownedUtf8)'>
<summary>
Associates a new value with this instance under this instance.
</summary>
<remarks>
If this instance cannot be found then it is created. If this instance cannot
be found then it is created. To set an UTF-8 string which may contain
characters that need escaping (such as newlines or spaces), use
<see cref="M:KeyFile.SetString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
a string
</param>
</member>

<member name='KeyFile.SetValue(System.String,System.String,System.String)'>
<summary>
Associates a new value with this instance under this instance.
</summary>
<remarks>
If this instance cannot be found then it is created. If this instance cannot
be found then it is created. To set an UTF-8 string which may contain
characters that need escaping (such as newlines or spaces), use
<see cref="M:KeyFile.SetString(GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8,GISharp.Lib.GLib.Utf8)"/>.
</remarks>
<param name="groupName">
a group name
</param>
<param name="key">
a key
</param>
<param name="value">
a string
</param>
</member>

<member name='KeyFile.ToData(System.Int32)'>
<summary>
This function outputs this instance as a string.
</summary>
<remarks>
Note that this function never reports an error,
so it is safe to pass <c>null</c> as this instance.
</remarks>
<param name="length">
return location for the length of the
  returned string, or <c>null</c>
</param>
<returns>
a newly allocated string holding
  the contents of the <see cref="KeyFile"/>
</returns>
<exception name="GISharp.Runtime.GErrorException">
On error
</exception>
</member>

<member name='KeyFile'>
<summary>
The GKeyFile struct contains only private data
and should not be accessed directly.
</summary>
</member>

</declaration>
