<?xml version="1.0" encoding="utf-8"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0" xmlns:gs="http://gisharp.org/introspection/gisharp/1.0">
  <package name="glib-2.0" gs:managed-name="Glib2.0" />
  <c:include name="glib.h" gs:managed-name="Glib.h" />
  <namespace name="GLib" version="2.0" shared-library="/usr/local/opt/glib/lib/libgobject-2.0.0.dylib,/usr/local/opt/glib/lib/libglib-2.0.0.dylib" c:identifier-prefixes="G" c:symbol-prefixes="g,glib" gs:managed-name="GLib">
    <alias name="TimeSpan" c:type="GTimeSpan" gs:managed-name="TimeSpan">
      <doc xml:space="preserve" filename="gdatetime.h" line="80">A value representing an interval of time, in microseconds.</doc>
      <source-position filename="gdatetime.h" line="87" />
      <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
      <constant name="DAY" value="86400000000" c:type="G_TIME_SPAN_DAY" version="2.26" gs:managed-name="Day">
        <doc xml:space="preserve" filename="gdatetime.h" line="35">Evaluates to a time span of one day.</doc>
        <source-position filename="gdatetime.h" line="42" />
        <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
      </constant>
      <constant name="HOUR" value="3600000000" c:type="G_TIME_SPAN_HOUR" version="2.26" gs:managed-name="Hour">
        <doc xml:space="preserve" filename="gdatetime.h" line="44">Evaluates to a time span of one hour.</doc>
        <source-position filename="gdatetime.h" line="51" />
        <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
      </constant>
      <constant name="MILLISECOND" value="1000" c:type="G_TIME_SPAN_MILLISECOND" version="2.26" gs:managed-name="Millisecond">
        <doc xml:space="preserve" filename="gdatetime.h" line="71">Evaluates to a time span of one millisecond.</doc>
        <source-position filename="gdatetime.h" line="78" />
        <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
      </constant>
      <constant name="MINUTE" value="60000000" c:type="G_TIME_SPAN_MINUTE" version="2.26" gs:managed-name="Minute">
        <doc xml:space="preserve" filename="gdatetime.h" line="53">Evaluates to a time span of one minute.</doc>
        <source-position filename="gdatetime.h" line="60" />
        <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
      </constant>
      <constant name="SECOND" value="1000000" c:type="G_TIME_SPAN_SECOND" version="2.26" gs:managed-name="Second">
        <doc xml:space="preserve" filename="gdatetime.h" line="62">Evaluates to a time span of one second.</doc>
        <source-position filename="gdatetime.h" line="69" />
        <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
      </constant>
    </alias>
    <record name="DateTime" c:type="GDateTime" version="2.26" glib:type-name="GDateTime" glib:get-type="g_date_time_get_type" c:symbol-prefix="date_time" gs:managed-name="DateTime">
      <doc xml:space="preserve" filename="gdatetime.h" line="89">`GDateTime` is an opaque structure whose members
cannot be accessed directly.</doc>
      <source-position filename="gdatetime.h" line="97" />
      <constructor name="new" c:identifier="g_date_time_new" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="New">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15605">Creates a new #GDateTime corresponding to the given date and time in
the time zone @tz.

The @year must be between 1 and 9999, @month between 1 and 12 and @day
between 1 and 28, 29, 30 or 31 depending on the month and the year.

@hour must be between 0 and 23 and @minute must be between 0 and 59.

@seconds must be at least 0.0 and must be strictly less than 60.0.
It will be rounded down to the nearest microsecond.

If the given time is not representable in the given time zone (for
example, 02:30 on March 14th 2010 in Toronto, due to daylight savings
time) then the time will be rounded up to the nearest existing time
(in this case, 03:00).  If this matters to you then you should verify
the return value for containing the same as the numbers you gave.

In the case that the given time is ambiguous in the given time zone
(for example, 01:30 on November 7th 2010 in Toronto, due to daylight
savings time) then the time falling within standard (ie:
non-daylight) time is taken.

It not considered a programmer error for the values to this function
to be out of range, but in the case that they are, the function will
return %NULL.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="gdatetime.h" line="128" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15644">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15607">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
          <parameter name="year" transfer-ownership="none" gs:managed-name="year" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15608">the year component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" transfer-ownership="none" gs:managed-name="month" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15609">the month component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" transfer-ownership="none" gs:managed-name="day" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15610">the day component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hour" transfer-ownership="none" gs:managed-name="hour" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15611">the hour component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minute" transfer-ownership="none" gs:managed-name="minute" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15612">the minute component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15613">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15607">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
          <parameter name="year" transfer-ownership="none" gs:managed-name="year" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15608">the year component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" transfer-ownership="none" gs:managed-name="month" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15609">the month component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" transfer-ownership="none" gs:managed-name="day" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15610">the day component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hour" transfer-ownership="none" gs:managed-name="hour" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15611">the hour component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minute" transfer-ownership="none" gs:managed-name="minute" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15612">the minute component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15613">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
      <function name="from_iso8601" c:identifier="g_date_time_new_from_iso8601" version="2.56" gs:dll-name="glib-2.0" gs:managed-name="FromIso8601">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15649">Creates a #GDateTime corresponding to the given
[ISO 8601 formatted string](https://en.wikipedia.org/wiki/ISO_8601)
@text. ISO 8601 strings of the form &lt;date&gt;&lt;sep&gt;&lt;time&gt;&lt;tz&gt; are supported, with
some extensions from [RFC 3339](https://tools.ietf.org/html/rfc3339) as
mentioned below.

Note that as #GDateTime "is oblivious to leap seconds", leap seconds information
in an ISO-8601 string will be ignored, so a `23:59:60` time would be parsed as
`23:59:59`.

&lt;sep&gt; is the separator and can be either 'T', 't' or ' '. The latter two
separators are an extension from
[RFC 3339](https://tools.ietf.org/html/rfc3339#section-5.6).

&lt;date&gt; is in the form:

- `YYYY-MM-DD` - Year/month/day, e.g. 2016-08-24.
- `YYYYMMDD` - Same as above without dividers.
- `YYYY-DDD` - Ordinal day where DDD is from 001 to 366, e.g. 2016-237.
- `YYYYDDD` - Same as above without dividers.
- `YYYY-Www-D` - Week day where ww is from 01 to 52 and D from 1-7,
  e.g. 2016-W34-3.
- `YYYYWwwD` - Same as above without dividers.

&lt;time&gt; is in the form:

- `hh:mm:ss(.sss)` - Hours, minutes, seconds (subseconds), e.g. 22:10:42.123.
- `hhmmss(.sss)` - Same as above without dividers.

&lt;tz&gt; is an optional timezone suffix of the form:

- `Z` - UTC.
- `+hh:mm` or `-hh:mm` - Offset from UTC in hours and minutes, e.g. +12:00.
- `+hh` or `-hh` - Offset from UTC in hours, e.g. +12.

If the timezone is not provided in @text it must be provided in @default_tz
(this field is otherwise ignored).

This call can fail (returning %NULL) if @text is not a valid ISO 8601
formatted string.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="gdatetime.h" line="124" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15699">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none" gs:managed-name="text" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15651">an ISO 8601 formatted time string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="default_tz" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="defaultTz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15652">a #GTimeZone to use if the text doesn't contain a
                         timezone, or %NULL.</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="text" transfer-ownership="none" gs:managed-name="text" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15651">an ISO 8601 formatted time string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="default_tz" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="defaultTz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15652">a #GTimeZone to use if the text doesn't contain a
                         timezone, or %NULL.</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <function name="from_timeval_local" c:identifier="g_date_time_new_from_timeval_local" version="2.26" deprecated="1" deprecated-version="2.62" gs:dll-name="glib-2.0" gs:managed-name="FromTimevalLocal">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15704">Creates a #GDateTime corresponding to the given #GTimeVal @tv in the
local time zone.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the
local time offset.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_new_from_unix_local() instead.</doc-deprecated>
        <source-position filename="gdatetime.h" line="118" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15721">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="tv" transfer-ownership="none" gs:managed-name="tv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15706">a #GTimeVal</doc>
            <type name="TimeVal" c:type="const GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="tv" transfer-ownership="none" gs:managed-name="tv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15706">a #GTimeVal</doc>
            <type name="TimeVal" c:type="const GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <function name="from_timeval_utc" c:identifier="g_date_time_new_from_timeval_utc" version="2.26" deprecated="1" deprecated-version="2.62" gs:dll-name="glib-2.0" gs:managed-name="FromTimevalUtc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15728">Creates a #GDateTime corresponding to the given #GTimeVal @tv in UTC.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC.

This call can fail (returning %NULL) if @tv represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_new_from_unix_utc() instead.</doc-deprecated>
        <source-position filename="gdatetime.h" line="120" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15743">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="tv" transfer-ownership="none" gs:managed-name="tv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15730">a #GTimeVal</doc>
            <type name="TimeVal" c:type="const GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="tv" transfer-ownership="none" gs:managed-name="tv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15730">a #GTimeVal</doc>
            <type name="TimeVal" c:type="const GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <function name="from_unix_local" c:identifier="g_date_time_new_from_unix_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="FromUnixLocal">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15750">Creates a #GDateTime corresponding to the given Unix time @t in the
local time zone.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the local time offset.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="gdatetime.h" line="112" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15766">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none" gs:managed-name="t" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15752">the Unix time</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="t" transfer-ownership="none" gs:managed-name="t" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15752">the Unix time</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <function name="from_unix_utc" c:identifier="g_date_time_new_from_unix_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="FromUnixUtc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15771">Creates a #GDateTime corresponding to the given Unix time @t in UTC.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC.

This call can fail (returning %NULL) if @t represents a time outside
of the supported range of #GDateTime.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="gdatetime.h" line="114" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15786">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="t" transfer-ownership="none" gs:managed-name="t" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15773">the Unix time</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="t" transfer-ownership="none" gs:managed-name="t" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15773">the Unix time</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <function name="get_local" c:identifier="g_date_time_new_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetLocal">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15791">Creates a new #GDateTime corresponding to the given date and time in
the local time zone.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_local().</doc>
        <source-position filename="gdatetime.h" line="136" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15806">a #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none" gs:managed-name="year" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15793">the year component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" transfer-ownership="none" gs:managed-name="month" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15794">the month component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" transfer-ownership="none" gs:managed-name="day" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15795">the day component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hour" transfer-ownership="none" gs:managed-name="hour" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15796">the hour component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minute" transfer-ownership="none" gs:managed-name="minute" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15797">the minute component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15798">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="year" transfer-ownership="none" gs:managed-name="year" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15793">the year component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" transfer-ownership="none" gs:managed-name="month" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15794">the month component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" transfer-ownership="none" gs:managed-name="day" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15795">the day component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hour" transfer-ownership="none" gs:managed-name="hour" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15796">the hour component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minute" transfer-ownership="none" gs:managed-name="minute" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15797">the minute component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15798">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <function name="get_now" c:identifier="g_date_time_new_now" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetNow">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15811">Creates a #GDateTime corresponding to this exact instant in the given
time zone @tz.  The time is as accurate as the system allows, to a
maximum accuracy of 1 microsecond.

This function will always succeed unless GLib is still being used after the
year 9999.

You should release the return value by calling g_date_time_unref()
when you are done with it.</doc>
        <source-position filename="gdatetime.h" line="105" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15825">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15813">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15813">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <gs:managed-property name="get_now_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="NowLocal">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15830">Creates a #GDateTime corresponding to this exact instant in the local
time zone.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_local().</doc>
        <source-position filename="gdatetime.h" line="107" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15839">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_now_local" c:identifier="g_date_time_new_now_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetNowLocal" gs:property-getter-for="NowLocal" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15830">Creates a #GDateTime corresponding to this exact instant in the local
time zone.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_local().</doc>
        <source-position filename="gdatetime.h" line="107" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15839">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
      <gs:managed-property name="get_now_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="NowUtc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15844">Creates a #GDateTime corresponding to this exact instant in UTC.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="gdatetime.h" line="109" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15852">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_now_utc" c:identifier="g_date_time_new_now_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetNowUtc" gs:property-getter-for="NowUtc" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15844">Creates a #GDateTime corresponding to this exact instant in UTC.

This is equivalent to calling g_date_time_new_now() with the time
zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="gdatetime.h" line="109" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15852">a new #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
      <function name="get_utc" c:identifier="g_date_time_new_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetUtc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15857">Creates a new #GDateTime corresponding to the given date and time in
UTC.

This call is equivalent to calling g_date_time_new() with the time
zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="gdatetime.h" line="143" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15872">a #GDateTime, or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="year" transfer-ownership="none" gs:managed-name="year" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15859">the year component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" transfer-ownership="none" gs:managed-name="month" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15860">the month component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" transfer-ownership="none" gs:managed-name="day" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15861">the day component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hour" transfer-ownership="none" gs:managed-name="hour" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15862">the hour component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minute" transfer-ownership="none" gs:managed-name="minute" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15863">the minute component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15864">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="year" transfer-ownership="none" gs:managed-name="year" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15859">the year component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" transfer-ownership="none" gs:managed-name="month" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15860">the month component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" transfer-ownership="none" gs:managed-name="day" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15861">the day component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hour" transfer-ownership="none" gs:managed-name="hour" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15862">the hour component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minute" transfer-ownership="none" gs:managed-name="minute" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15863">the minute component of the date</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15864">the number of seconds past the minute</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <method name="add" c:identifier="g_date_time_add" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Add">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15027">Creates a copy of @datetime and adds the specified timespan to the copy.</doc>
        <source-position filename="gdatetime.h" line="152" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15034">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15029">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="timespan" transfer-ownership="none" gs:managed-name="timespan" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15030">a #GTimeSpan</doc>
            <type name="TimeSpan" c:type="GTimeSpan" gs:managed-name="TimeSpan" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="timespan" transfer-ownership="none" gs:managed-name="timespan" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15030">a #GTimeSpan</doc>
            <type name="TimeSpan" c:type="GTimeSpan" gs:managed-name="TimeSpan" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_days" c:identifier="g_date_time_add_days" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddDays">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15040">Creates a copy of @datetime and adds the specified number of days to the
copy. Add negative values to subtract days.</doc>
        <source-position filename="gdatetime.h" line="169" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15048">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15042">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="days" transfer-ownership="none" gs:managed-name="days" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15043">the number of days</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="days" transfer-ownership="none" gs:managed-name="days" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15043">the number of days</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_full" c:identifier="g_date_time_add_full" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddFull">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15054">Creates a new #GDateTime adding the specified values to the current date and
time in @datetime. Add negative values to subtract.</doc>
        <source-position filename="gdatetime.h" line="187" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15067">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15056">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="years" transfer-ownership="none" gs:managed-name="years" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15057">the number of years to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="months" transfer-ownership="none" gs:managed-name="months" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15058">the number of months to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="days" transfer-ownership="none" gs:managed-name="days" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15059">the number of days to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hours" transfer-ownership="none" gs:managed-name="hours" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15060">the number of hours to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minutes" transfer-ownership="none" gs:managed-name="minutes" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15061">the number of minutes to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15062">the number of seconds to add</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="years" transfer-ownership="none" gs:managed-name="years" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15057">the number of years to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="months" transfer-ownership="none" gs:managed-name="months" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15058">the number of months to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="days" transfer-ownership="none" gs:managed-name="days" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15059">the number of days to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="hours" transfer-ownership="none" gs:managed-name="hours" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15060">the number of hours to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="minutes" transfer-ownership="none" gs:managed-name="minutes" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15061">the number of minutes to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15062">the number of seconds to add</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_hours" c:identifier="g_date_time_add_hours" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddHours">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15073">Creates a copy of @datetime and adds the specified number of hours.
Add negative values to subtract hours.</doc>
        <source-position filename="gdatetime.h" line="174" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15081">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15075">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="hours" transfer-ownership="none" gs:managed-name="hours" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15076">the number of hours to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="hours" transfer-ownership="none" gs:managed-name="hours" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15076">the number of hours to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_minutes" c:identifier="g_date_time_add_minutes" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddMinutes">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15087">Creates a copy of @datetime adding the specified number of minutes.
Add negative values to subtract minutes.</doc>
        <source-position filename="gdatetime.h" line="178" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15095">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15089">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="minutes" transfer-ownership="none" gs:managed-name="minutes" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15090">the number of minutes to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="minutes" transfer-ownership="none" gs:managed-name="minutes" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15090">the number of minutes to add</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_months" c:identifier="g_date_time_add_months" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddMonths">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15101">Creates a copy of @datetime and adds the specified number of months to the
copy. Add negative values to subtract months.

The day of the month of the resulting #GDateTime is clamped to the number
of days in the updated calendar month. For example, if adding 1 month to
31st January 2018, the result would be 28th February 2018. In 2020 (a leap
year), the result would be 29th February.</doc>
        <source-position filename="gdatetime.h" line="161" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15114">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15103">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="months" transfer-ownership="none" gs:managed-name="months" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15104">the number of months</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="months" transfer-ownership="none" gs:managed-name="months" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15104">the number of months</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_seconds" c:identifier="g_date_time_add_seconds" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddSeconds">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15120">Creates a copy of @datetime and adds the specified number of seconds.
Add negative values to subtract seconds.</doc>
        <source-position filename="gdatetime.h" line="182" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15128">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15122">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15123">the number of seconds to add</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15123">the number of seconds to add</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_weeks" c:identifier="g_date_time_add_weeks" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddWeeks">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15134">Creates a copy of @datetime and adds the specified number of weeks to the
copy. Add negative values to subtract weeks.</doc>
        <source-position filename="gdatetime.h" line="165" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15142">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15136">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="weeks" transfer-ownership="none" gs:managed-name="weeks" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15137">the number of weeks</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="weeks" transfer-ownership="none" gs:managed-name="weeks" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15137">the number of weeks</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="add_years" c:identifier="g_date_time_add_years" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AddYears">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15148">Creates a copy of @datetime and adds the specified number of years to the
copy. Add negative values to subtract years.

As with g_date_time_add_months(), if the resulting date would be 29th
February on a non-leap year, the day will be clamped to 28th February.</doc>
        <source-position filename="gdatetime.h" line="157" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15159">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15150">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="years" transfer-ownership="none" gs:managed-name="years" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15151">the number of years</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="years" transfer-ownership="none" gs:managed-name="years" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15151">the number of years</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="difference" c:identifier="g_date_time_difference" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Difference">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15179">Calculates the difference in time between @end and @begin.  The
#GTimeSpan that is returned is effectively @end - @begin (ie:
positive if the first parameter is larger).</doc>
        <source-position filename="gdatetime.h" line="199" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15188">the difference between the two #GDateTime, as a time
  span expressed in microseconds.</doc>
          <type name="TimeSpan" c:type="GTimeSpan" gs:managed-name="TimeSpan" />
        </return-value>
        <parameters>
          <instance-parameter name="end" transfer-ownership="none" gs:managed-name="end" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15181">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="begin" transfer-ownership="none" gs:managed-name="begin" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15182">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="begin" transfer-ownership="none" gs:managed-name="begin" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15182">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="format" c:identifier="g_date_time_format" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Format">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15209">Creates a newly allocated string representing the requested @format.

The format strings understood by this function are a subset of the
strftime() format language as specified by C99.  The \%D, \%U and \%W
conversions are not supported, nor is the 'E' modifier.  The GNU
extensions \%k, \%l, \%s and \%P are supported, however, as are the
'0', '_' and '-' modifiers. The Python extension \%f is also supported.

In contrast to strftime(), this function always produces a UTF-8
string, regardless of the current locale.  Note that the rendering of
many formats is locale-dependent and may not match the strftime()
output exactly.

The following format specifiers are supported:

- \%a: the abbreviated weekday name according to the current locale
- \%A: the full weekday name according to the current locale
- \%b: the abbreviated month name according to the current locale
- \%B: the full month name according to the current locale
- \%c: the preferred date and time representation for the current locale
- \%C: the century number (year/100) as a 2-digit integer (00-99)
- \%d: the day of the month as a decimal number (range 01 to 31)
- \%e: the day of the month as a decimal number (range  1 to 31)
- \%F: equivalent to `%Y-%m-%d` (the ISO 8601 date format)
- \%g: the last two digits of the ISO 8601 week-based year as a
  decimal number (00-99). This works well with \%V and \%u.
- \%G: the ISO 8601 week-based year as a decimal number. This works
  well with \%V and \%u.
- \%h: equivalent to \%b
- \%H: the hour as a decimal number using a 24-hour clock (range 00 to 23)
- \%I: the hour as a decimal number using a 12-hour clock (range 01 to 12)
- \%j: the day of the year as a decimal number (range 001 to 366)
- \%k: the hour (24-hour clock) as a decimal number (range 0 to 23);
  single digits are preceded by a blank
- \%l: the hour (12-hour clock) as a decimal number (range 1 to 12);
  single digits are preceded by a blank
- \%m: the month as a decimal number (range 01 to 12)
- \%M: the minute as a decimal number (range 00 to 59)
- \%f: the microsecond as a decimal number (range 000000 to 999999)
- \%p: either "AM" or "PM" according to the given time value, or the
  corresponding  strings for the current locale.  Noon is treated as
  "PM" and midnight as "AM". Use of this format specifier is discouraged, as
  many locales have no concept of AM/PM formatting. Use \%c or \%X instead.
- \%P: like \%p but lowercase: "am" or "pm" or a corresponding string for
  the current locale. Use of this format specifier is discouraged, as
  many locales have no concept of AM/PM formatting. Use \%c or \%X instead.
- \%r: the time in a.m. or p.m. notation. Use of this format specifier is
  discouraged, as many locales have no concept of AM/PM formatting. Use \%c
  or \%X instead.
- \%R: the time in 24-hour notation (\%H:\%M)
- \%s: the number of seconds since the Epoch, that is, since 1970-01-01
  00:00:00 UTC
- \%S: the second as a decimal number (range 00 to 60)
- \%t: a tab character
- \%T: the time in 24-hour notation with seconds (\%H:\%M:\%S)
- \%u: the ISO 8601 standard day of the week as a decimal, range 1 to 7,
   Monday being 1. This works well with \%G and \%V.
- \%V: the ISO 8601 standard week number of the current year as a decimal
  number, range 01 to 53, where week 1 is the first week that has at
  least 4 days in the new year. See g_date_time_get_week_of_year().
  This works well with \%G and \%u.
- \%w: the day of the week as a decimal, range 0 to 6, Sunday being 0.
  This is not the ISO 8601 standard format -- use \%u instead.
- \%x: the preferred date representation for the current locale without
  the time
- \%X: the preferred time representation for the current locale without
  the date
- \%y: the year as a decimal number without the century
- \%Y: the year as a decimal number including the century
- \%z: the time zone as an offset from UTC (+hhmm)
- \%:z: the time zone as an offset from UTC (+hh:mm).
  This is a gnulib strftime() extension. Since: 2.38
- \%::z: the time zone as an offset from UTC (+hh:mm:ss). This is a
  gnulib strftime() extension. Since: 2.38
- \%:::z: the time zone as an offset from UTC, with : to necessary
  precision (e.g., -04, +05:30). This is a gnulib strftime() extension. Since: 2.38
- \%Z: the time zone or name or abbreviation
- \%\%: a literal \% character

Some conversion specifications can be modified by preceding the
conversion specifier by one or more modifier characters. The
following modifiers are supported for many of the numeric
conversions:

- O: Use alternative numeric symbols, if the current locale supports those.
- _: Pad a numeric result with spaces. This overrides the default padding
  for the specifier.
- -: Do not pad a numeric result. This overrides the default padding
  for the specifier.
- 0: Pad a numeric result with zeros. This overrides the default padding
  for the specifier.

Additionally, when O is used with B, b, or h, it produces the alternative
form of a month name. The alternative form should be used when the month
name is used without a day number (e.g., standalone). It is required in
some languages (Baltic, Slavic, Greek, and more) due to their grammatical
rules. For other languages there is no difference. \%OB is a GNU and BSD
strftime() extension expected to be added to the future POSIX specification,
\%Ob and \%Oh are GNU strftime() extensions. Since: 2.56</doc>
        <source-position filename="gdatetime.h" line="267" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15315">a newly allocated string formatted to
   the requested format or %NULL in the case that there was an error (such
   as a format specifier not being supported in the current locale). The
   string should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15211">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="format" transfer-ownership="none" gs:managed-name="format" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15212">a valid UTF-8 string, containing the format for the
         #GDateTime</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="format" transfer-ownership="none" gs:managed-name="format" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15212">a valid UTF-8 string, containing the format for the
         #GDateTime</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="format_iso8601" c:identifier="g_date_time_format_iso8601" version="2.62" gs:dll-name="glib-2.0" gs:managed-name="FormatIso8601">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15323">Format @datetime in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601),
including the date, time and time zone, and return that as a UTF-8 encoded
string.

Since GLib 2.66, this will output to sub-second precision if needed.</doc>
        <source-position filename="gdatetime.h" line="270" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15333">a newly allocated string formatted in
  ISO 8601 format or %NULL in the case that there was an error. The string
  should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15325">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_day_of_month" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="DayOfMonth">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15340">Retrieves the day of the month represented by @datetime in the gregorian
calendar.</doc>
        <source-position filename="gdatetime.h" line="218" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15347">the day of the month</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15342">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_day_of_month" c:identifier="g_date_time_get_day_of_month" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetDayOfMonth" gs:property-getter-for="DayOfMonth" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15340">Retrieves the day of the month represented by @datetime in the gregorian
calendar.</doc>
        <source-position filename="gdatetime.h" line="218" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15347">the day of the month</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15342">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_day_of_week" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="DayOfWeek">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15352">Retrieves the ISO 8601 day of the week on which @datetime falls (1 is
Monday, 2 is Tuesday... 7 is Sunday).</doc>
        <source-position filename="gdatetime.h" line="225" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15359">the day of the week</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15354">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_day_of_week" c:identifier="g_date_time_get_day_of_week" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetDayOfWeek" gs:property-getter-for="DayOfWeek" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15352">Retrieves the ISO 8601 day of the week on which @datetime falls (1 is
Monday, 2 is Tuesday... 7 is Sunday).</doc>
        <source-position filename="gdatetime.h" line="225" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15359">the day of the week</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15354">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_day_of_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="DayOfYear">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15364">Retrieves the day of the year represented by @datetime in the Gregorian
calendar.</doc>
        <source-position filename="gdatetime.h" line="228" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15371">the day of the year</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15366">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_day_of_year" c:identifier="g_date_time_get_day_of_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetDayOfYear" gs:property-getter-for="DayOfYear" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15364">Retrieves the day of the year represented by @datetime in the Gregorian
calendar.</doc>
        <source-position filename="gdatetime.h" line="228" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15371">the day of the year</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15366">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_hour" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Hour">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15376">Retrieves the hour of the day represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="231" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15382">the hour of the day</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15378">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_hour" c:identifier="g_date_time_get_hour" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetHour" gs:property-getter-for="Hour" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15376">Retrieves the hour of the day represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="231" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15382">the hour of the day</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15378">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_microsecond" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Microsecond">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15387">Retrieves the microsecond of the date represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="237" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15393">the microsecond of the second</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15389">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_microsecond" c:identifier="g_date_time_get_microsecond" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetMicrosecond" gs:property-getter-for="Microsecond" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15387">Retrieves the microsecond of the date represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="237" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15393">the microsecond of the second</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15389">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_minute" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Minute">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15398">Retrieves the minute of the hour represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="233" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15404">the minute of the hour</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15400">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_minute" c:identifier="g_date_time_get_minute" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetMinute" gs:property-getter-for="Minute" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15398">Retrieves the minute of the hour represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="233" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15404">the minute of the hour</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15400">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_month" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Month">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15409">Retrieves the month of the year represented by @datetime in the Gregorian
calendar.</doc>
        <source-position filename="gdatetime.h" line="216" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15416">the month represented by @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15411">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_month" c:identifier="g_date_time_get_month" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetMonth" gs:property-getter-for="Month" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15409">Retrieves the month of the year represented by @datetime in the Gregorian
calendar.</doc>
        <source-position filename="gdatetime.h" line="216" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15416">the month represented by @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15411">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_second" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Second">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15421">Retrieves the second of the minute represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="235" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15427">the second represented by @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15423">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_second" c:identifier="g_date_time_get_second" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetSecond" gs:property-getter-for="Second" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15421">Retrieves the second of the minute represented by @datetime</doc>
        <source-position filename="gdatetime.h" line="235" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15427">the second represented by @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15423">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_seconds" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Seconds">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15432">Retrieves the number of seconds since the start of the last minute,
including the fractional part.</doc>
        <source-position filename="gdatetime.h" line="239" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15439">the number of seconds</doc>
          <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15434">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_seconds" c:identifier="g_date_time_get_seconds" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetSeconds" gs:property-getter-for="Seconds" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15432">Retrieves the number of seconds since the start of the last minute,
including the fractional part.</doc>
        <source-position filename="gdatetime.h" line="239" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15439">the number of seconds</doc>
          <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15434">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_timezone" version="2.58" gs:dll-name="glib-2.0" gs:managed-name="Timezone">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15444">Get the time zone for this @datetime.</doc>
        <source-position filename="gdatetime.h" line="252" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15450">the time zone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15446">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_timezone" c:identifier="g_date_time_get_timezone" version="2.58" gs:dll-name="glib-2.0" gs:managed-name="GetTimezone" gs:property-getter-for="Timezone" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15444">Get the time zone for this @datetime.</doc>
        <source-position filename="gdatetime.h" line="252" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15450">the time zone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15446">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_timezone_abbreviation" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="TimezoneAbbreviation">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15455">Determines the time zone abbreviation to be used at the time and in
the time zone of @datetime.

For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings
time is in effect.</doc>
        <source-position filename="gdatetime.h" line="254" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15466">the time zone abbreviation. The returned
         string is owned by the #GDateTime and it should not be
         modified or freed</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15457">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_timezone_abbreviation" c:identifier="g_date_time_get_timezone_abbreviation" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetTimezoneAbbreviation" gs:property-getter-for="TimezoneAbbreviation" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15455">Determines the time zone abbreviation to be used at the time and in
the time zone of @datetime.

For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings
time is in effect.</doc>
        <source-position filename="gdatetime.h" line="254" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15466">the time zone abbreviation. The returned
         string is owned by the #GDateTime and it should not be
         modified or freed</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15457">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_utc_offset" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="UtcOffset">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15473">Determines the offset to UTC in effect at the time and in the time
zone of @datetime.

The offset is the number of microseconds that you add to UTC time to
arrive at local time for the time zone (ie: negative numbers for time
zones west of GMT, positive numbers for east).

If @datetime represents UTC time, then the offset is always zero.</doc>
        <source-position filename="gdatetime.h" line="250" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15486">the number of microseconds that should be added to UTC to
         get the local time</doc>
          <type name="TimeSpan" c:type="GTimeSpan" gs:managed-name="TimeSpan" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15475">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_utc_offset" c:identifier="g_date_time_get_utc_offset" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetUtcOffset" gs:property-getter-for="UtcOffset" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15473">Determines the offset to UTC in effect at the time and in the time
zone of @datetime.

The offset is the number of microseconds that you add to UTC time to
arrive at local time for the time zone (ie: negative numbers for time
zones west of GMT, positive numbers for east).

If @datetime represents UTC time, then the offset is always zero.</doc>
        <source-position filename="gdatetime.h" line="250" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15486">the number of microseconds that should be added to UTC to
         get the local time</doc>
          <type name="TimeSpan" c:type="GTimeSpan" gs:managed-name="TimeSpan" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15475">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_week_numbering_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="WeekNumberingYear">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15492">Returns the ISO 8601 week-numbering year in which the week containing
@datetime falls.

This function, taken together with g_date_time_get_week_of_year() and
g_date_time_get_day_of_week() can be used to determine the full ISO
week date on which @datetime falls.

This is usually equal to the normal Gregorian year (as returned by
g_date_time_get_year()), except as detailed below:

For Thursday, the week-numbering year is always equal to the usual
calendar year.  For other days, the number is such that every day
within a complete week (Monday to Sunday) is contained within the
same week-numbering year.

For Monday, Tuesday and Wednesday occurring near the end of the year,
this may mean that the week-numbering year is one greater than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring early in the next year).

For Friday, Saturday and Sunday occurring near the start of the year,
this may mean that the week-numbering year is one less than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring late in the previous year).

An equivalent description is that the week-numbering year is equal to
the calendar year containing the majority of the days in the current
week (Monday to Sunday).

Note that January 1 0001 in the proleptic Gregorian calendar is a
Monday, so this function never returns 0.</doc>
        <source-position filename="gdatetime.h" line="221" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15528">the ISO 8601 week-numbering year for @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15494">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_week_numbering_year" c:identifier="g_date_time_get_week_numbering_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetWeekNumberingYear" gs:property-getter-for="WeekNumberingYear" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15492">Returns the ISO 8601 week-numbering year in which the week containing
@datetime falls.

This function, taken together with g_date_time_get_week_of_year() and
g_date_time_get_day_of_week() can be used to determine the full ISO
week date on which @datetime falls.

This is usually equal to the normal Gregorian year (as returned by
g_date_time_get_year()), except as detailed below:

For Thursday, the week-numbering year is always equal to the usual
calendar year.  For other days, the number is such that every day
within a complete week (Monday to Sunday) is contained within the
same week-numbering year.

For Monday, Tuesday and Wednesday occurring near the end of the year,
this may mean that the week-numbering year is one greater than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring early in the next year).

For Friday, Saturday and Sunday occurring near the start of the year,
this may mean that the week-numbering year is one less than the
calendar year (so that these days have the same week-numbering year
as the Thursday occurring late in the previous year).

An equivalent description is that the week-numbering year is equal to
the calendar year containing the majority of the days in the current
week (Monday to Sunday).

Note that January 1 0001 in the proleptic Gregorian calendar is a
Monday, so this function never returns 0.</doc>
        <source-position filename="gdatetime.h" line="221" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15528">the ISO 8601 week-numbering year for @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15494">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_week_of_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="WeekOfYear">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15533">Returns the ISO 8601 week number for the week containing @datetime.
The ISO 8601 week number is the same for every day of the week (from
Moday through Sunday).  That can produce some unusual results
(described below).

The first week of the year is week 1.  This is the week that contains
the first Thursday of the year.  Equivalently, this is the first week
that has more than 4 of its days falling within the calendar year.

The value 0 is never returned by this function.  Days contained
within a year but occurring before the first ISO 8601 week of that
year are considered as being contained in the last week of the
previous year.  Similarly, the final days of a calendar year may be
considered as being part of the first ISO 8601 week of the next year
if 4 or more days of that week are contained within the new year.</doc>
        <source-position filename="gdatetime.h" line="223" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15553">the ISO 8601 week number for @datetime.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15535">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_week_of_year" c:identifier="g_date_time_get_week_of_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetWeekOfYear" gs:property-getter-for="WeekOfYear" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15533">Returns the ISO 8601 week number for the week containing @datetime.
The ISO 8601 week number is the same for every day of the week (from
Moday through Sunday).  That can produce some unusual results
(described below).

The first week of the year is week 1.  This is the week that contains
the first Thursday of the year.  Equivalently, this is the first week
that has more than 4 of its days falling within the calendar year.

The value 0 is never returned by this function.  Days contained
within a year but occurring before the first ISO 8601 week of that
year are considered as being contained in the last week of the
previous year.  Similarly, the final days of a calendar year may be
considered as being part of the first ISO 8601 week of the next year
if 4 or more days of that week are contained within the new year.</doc>
        <source-position filename="gdatetime.h" line="223" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15553">the ISO 8601 week number for @datetime.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15535">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Year">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15558">Retrieves the year represented by @datetime in the Gregorian calendar.</doc>
        <source-position filename="gdatetime.h" line="214" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15564">the year represented by @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15560">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_year" c:identifier="g_date_time_get_year" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetYear" gs:property-getter-for="Year" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15558">Retrieves the year represented by @datetime in the Gregorian calendar.</doc>
        <source-position filename="gdatetime.h" line="214" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15564">the year represented by @datetime</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15560">A #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="get_ymd" c:identifier="g_date_time_get_ymd" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetYmd">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15569">Retrieves the Gregorian day, month, and year of a given #GDateTime.</doc>
        <source-position filename="gdatetime.h" line="208" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15571">a #GDateTime.</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="year" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="year">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15572">the return location for the gregorian year, or %NULL.</doc>
            <type name="gint" c:type="gint*" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="month">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15573">the return location for the month of the year, or %NULL.</doc>
            <type name="gint" c:type="gint*" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="day">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15574">the return location for the day of the month, or %NULL.</doc>
            <type name="gint" c:type="gint*" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="year" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="year">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15572">the return location for the gregorian year, or %NULL.</doc>
            <type name="gint" c:type="gint*" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="month" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="month">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15573">the return location for the month of the year, or %NULL.</doc>
            <type name="gint" c:type="gint*" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="day" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="day">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15574">the return location for the day of the month, or %NULL.</doc>
            <type name="gint" c:type="gint*" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <gs:managed-property name="is_daylight_savings" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="IsDaylightSavings">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15593">Determines if daylight savings time is in effect at the time and in
the time zone of @datetime.</doc>
        <source-position filename="gdatetime.h" line="256" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15600">%TRUE if daylight savings time is in effect</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15595">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="is_daylight_savings" c:identifier="g_date_time_is_daylight_savings" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetIsDaylightSavings" gs:property-getter-for="IsDaylightSavings" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15593">Determines if daylight savings time is in effect at the time and in
the time zone of @datetime.</doc>
        <source-position filename="gdatetime.h" line="256" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15600">%TRUE if daylight savings time is in effect</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15595">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="ref" c:identifier="g_date_time_ref" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Ref" gs:special-func="ref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15877">Atomically increments the reference count of @datetime by one.</doc>
        <source-position filename="gdatetime.h" line="102" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15883">the #GDateTime with the reference count increased</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15879">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="to_local" c:identifier="g_date_time_to_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="ToLocal">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15888">Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in the local time zone.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_local().</doc>
        <source-position filename="gdatetime.h" line="262" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15898">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15890">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="to_timeval" c:identifier="g_date_time_to_timeval" version="2.26" deprecated="1" deprecated-version="2.62" gs:dll-name="glib-2.0" gs:managed-name="ToTimeval">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15904">Stores the instant in time that @datetime represents into @tv.

The time contained in a #GTimeVal is always stored in the form of
seconds elapsed since 1970-01-01 00:00:00 UTC, regardless of the time
zone associated with @datetime.

On systems where 'long' is 32bit (ie: all 32bit systems and all
Windows systems), a #GTimeVal is incapable of storing the entire
range of values that #GDateTime is capable of expressing.  On those
systems, this function returns %FALSE to indicate that the time is
out of range.

On systems where 'long' is 64bit, this function never fails.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_to_unix() instead.</doc-deprecated>
        <source-position filename="gdatetime.h" line="245" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15923">%TRUE if successful, else %FALSE</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15906">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="tv" transfer-ownership="none" gs:managed-name="tv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15907">a #GTimeVal to modify</doc>
            <type name="TimeVal" c:type="GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="tv" transfer-ownership="none" gs:managed-name="tv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15907">a #GTimeVal to modify</doc>
            <type name="TimeVal" c:type="GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_timezone" c:identifier="g_date_time_to_timezone" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="ToTimezone">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15930">Create a new #GDateTime corresponding to the same instant in time as
@datetime, but in the time zone @tz.

This call can fail in the case that the time goes out of bounds.  For
example, converting 0001-01-01 00:00:00 UTC to a time zone west of
Greenwich will fail (due to the year 0 being out of range).</doc>
        <source-position filename="gdatetime.h" line="259" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15942">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15932">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15933">the new #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15933">the new #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_unix" c:identifier="g_date_time_to_unix" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="ToUnix">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15948">Gives the Unix time corresponding to @datetime, rounding down to the
nearest second.

Unix time is the number of seconds that have elapsed since 1970-01-01
00:00:00 UTC, regardless of the time zone associated with @datetime.</doc>
        <source-position filename="gdatetime.h" line="242" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15958">the Unix time corresponding to @datetime</doc>
          <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15950">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="to_utc" c:identifier="g_date_time_to_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="ToUtc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15963">Creates a new #GDateTime corresponding to the same instant in time as
@datetime, but in UTC.

This call is equivalent to calling g_date_time_to_timezone() with the
time zone returned by g_time_zone_new_utc().</doc>
        <source-position filename="gdatetime.h" line="264" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15973">the newly created #GDateTime which
  should be freed with g_date_time_unref(), or %NULL</doc>
          <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15965">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="unref" c:identifier="g_date_time_unref" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Unref" gs:special-func="unref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15979">Atomically decrements the reference count of @datetime by one.

When the reference count reaches zero, the resources allocated by
@datetime are freed</doc>
        <source-position filename="gdatetime.h" line="100" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15981">a #GDateTime</doc>
            <type name="DateTime" c:type="GDateTime*" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="compare" c:identifier="g_date_time_compare" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Compare">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15165">A comparison function for #GDateTimes that is suitable
as a #GCompareFunc. Both #GDateTimes must be non-%NULL.</doc>
        <source-position filename="gdatetime.h" line="196" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15173">-1, 0 or 1 if @dt1 is less than, equal to or greater
  than @dt2.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <parameter name="dt1" transfer-ownership="none" gs:managed-name="dt1" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15167">first #GDateTime to compare</doc>
            <type name="gpointer" c:type="gconstpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
          <parameter name="dt2" transfer-ownership="none" gs:managed-name="dt2" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15168">second #GDateTime to compare</doc>
            <type name="gpointer" c:type="gconstpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="dt1" transfer-ownership="none" gs:managed-name="dt1" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15167">first #GDateTime to compare</doc>
            <type name="gpointer" c:type="gconstpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
          <parameter name="dt2" transfer-ownership="none" gs:managed-name="dt2" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15168">second #GDateTime to compare</doc>
            <type name="gpointer" c:type="gconstpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <method name="equal" c:identifier="g_date_time_equal" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Equals" gs:equal="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15194">Checks to see if @dt1 and @dt2 are equal.

Equal here means that they represent the same moment after converting
them to the same time zone.</doc>
        <source-position filename="gdatetime.h" line="204" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15204">%TRUE if @dt1 and @dt2 are equal</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="dt1" transfer-ownership="none" gs:managed-name="dt1" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15196">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="dt2" transfer-ownership="none" gs:managed-name="dt2" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15197">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer" gs:managed-name="DateTime" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="dt2" transfer-ownership="none" gs:managed-name="dt2" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15197">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer" gs:managed-name="DateTime" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="hash" c:identifier="g_date_time_hash" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetHashCode" gs:hash="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="15582">Hashes @datetime into a #guint, suitable for use within #GHashTable.</doc>
        <source-position filename="gdatetime.h" line="202" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="15588">a #guint containing the hash</doc>
          <type name="guint" c:type="guint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="datetime" transfer-ownership="none" gs:managed-name="datetime" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="15584">a #GDateTime</doc>
            <type name="DateTime" c:type="gconstpointer" gs:managed-name="DateTime" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="g_date_time_get_type" gs:access-modifiers="private" gs:dll-name="gobject-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" gs:managed-name="GISharp.Lib.GObject.GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </record>
    <record name="KeyFile" c:type="GKeyFile" glib:type-name="GKeyFile" glib:get-type="g_key_file_get_type" c:symbol-prefix="key_file" gs:managed-name="KeyFile">
      <doc xml:space="preserve" filename="glib-2.0.c" line="1075">The GKeyFile struct contains only private data
and should not be accessed directly.</doc>
      <source-position filename="gkeyfile.h" line="48" />
      <constructor name="new" c:identifier="g_key_file_new" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="New">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20303">Creates a new empty #GKeyFile object. Use
g_key_file_load_from_file(), g_key_file_load_from_data(),
g_key_file_load_from_dirs() or g_key_file_load_from_data_dirs() to
read an existing key file.</doc>
        <source-position filename="gkeyfile.h" line="58" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20311">an empty #GKeyFile.</doc>
          <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </constructor>
      <method name="get_boolean" c:identifier="g_key_file_get_boolean" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetBoolean">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19787">Returns the value associated with @key under @group_name as a
boolean.

If @key cannot be found then %FALSE is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value
associated with @key cannot be interpreted as a boolean then %FALSE
is returned and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="gkeyfile.h" line="161" />
        <return-value transfer-ownership="none" skip="0" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19802">the value associated with the key as a boolean,
   or %FALSE if the key was not found or could not be parsed.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19789">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19790">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19791">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19790">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19791">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_boolean_list" c:identifier="g_key_file_get_boolean_list" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetBooleanList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19808">Returns the values associated with @key under @group_name as
booleans.

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as booleans then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="gkeyfile.h" line="237" />
        <return-value transfer-ownership="container" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19824">
   the values associated with the key as a list of booleans, or %NULL if the
   key was not found or could not be parsed. The returned list of booleans
   should be freed with g_free() when no longer needed.</doc>
          <array length="2" zero-terminated="0" c:type="gboolean*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
            <type name="gboolean" gs:managed-name="System.Boolean" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19810">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19811">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19812">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19813">the number of booleans returned</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19811">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19812">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_comment" c:identifier="g_key_file_get_comment" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetComment">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19832">Retrieves a comment above @key from @group_name.
If @key is %NULL then @comment will be read from above
@group_name. If both @key and @group_name are %NULL, then
@comment will be read from above the first group in the file.

Note that the returned string does not include the '#' comment markers,
but does include any whitespace after them (on each line). It includes
the line breaks between lines, but does not include the final line break.</doc>
        <source-position filename="gkeyfile.h" line="279" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19848">a comment that should be freed with g_free()</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19834">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19835">a group name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19836">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19835">a group name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19836">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_double" c:identifier="g_key_file_get_double" version="2.12" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetDouble">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19853">Returns the value associated with @key under @group_name as a
double. If @group_name is %NULL, the start_group is used.

If @key cannot be found then 0.0 is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with @key cannot be interpreted as a double then 0.0 is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="gkeyfile.h" line="201" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19868">the value associated with the key as a double, or
    0.0 if the key was not found or could not be parsed.</doc>
          <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19855">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19856">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19857">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19856">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19857">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_double_list" c:identifier="g_key_file_get_double_list" version="2.12" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetDoubleList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19874">Returns the values associated with @key under @group_name as
doubles.

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as doubles then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="gkeyfile.h" line="261" />
        <return-value transfer-ownership="container" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19890">
    the values associated with the key as a list of doubles, or %NULL if the
    key was not found or could not be parsed. The returned list of doubles
    should be freed with g_free() when no longer needed.</doc>
          <array length="2" zero-terminated="0" c:type="gdouble*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
            <type name="gdouble" gs:managed-name="System.Double" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19876">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19877">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19878">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19879">the number of doubles returned</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19877">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19878">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <gs:managed-property name="get_groups" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="Groups">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19898">Returns all groups in the key file loaded with @key_file.
The array of returned groups will be %NULL-terminated, so
@length may optionally be %NULL.</doc>
        <source-position filename="gkeyfile.h" line="108" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19907">a newly-allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.</doc>
          <array c:type="gchar**" zero-terminated="1" length="0" name="GLib.Strv" gs:managed-name="GISharp.Lib.GLib.Strv" gs:is-pointer="1">
            <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19900">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19901">return location for the number of returned groups, or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_groups" c:identifier="g_key_file_get_groups" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="GetGroups" gs:property-getter-for="Groups" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19898">Returns all groups in the key file loaded with @key_file.
The array of returned groups will be %NULL-terminated, so
@length may optionally be %NULL.</doc>
        <source-position filename="gkeyfile.h" line="108" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19907">a newly-allocated %NULL-terminated array of strings.
  Use g_strfreev() to free it.</doc>
          <array c:type="gchar**" zero-terminated="1" length="0" name="GLib.Strv" gs:managed-name="GISharp.Lib.GLib.Strv" gs:is-pointer="1">
            <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19900">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19901">return location for the number of returned groups, or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="get_int64" c:identifier="g_key_file_get_int64" version="2.26" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetInt64">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19913">Returns the value associated with @key under @group_name as a signed
64-bit integer. This is similar to g_key_file_get_integer() but can return
64-bit results without truncation.</doc>
        <source-position filename="gkeyfile.h" line="181" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19924">the value associated with the key as a signed 64-bit integer, or
0 if the key was not found or could not be parsed.</doc>
          <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19915">a non-%NULL #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19916">a non-%NULL group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19917">a non-%NULL key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19916">a non-%NULL group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19917">a non-%NULL key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_integer" c:identifier="g_key_file_get_integer" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetInteger">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19930">Returns the value associated with @key under @group_name as an
integer.

If @key cannot be found then 0 is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the value associated
with @key cannot be interpreted as an integer, or is out of range
for a #gint, then 0 is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="gkeyfile.h" line="171" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19946">the value associated with the key as an integer, or
    0 if the key was not found or could not be parsed.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19932">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19933">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19934">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19933">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19934">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_integer_list" c:identifier="g_key_file_get_integer_list" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetIntegerList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19952">Returns the values associated with @key under @group_name as
integers.

If @key cannot be found then %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_KEY_NOT_FOUND. Likewise, if the values associated
with @key cannot be interpreted as integers, or are out of range for
#gint, then %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_INVALID_VALUE.</doc>
        <source-position filename="gkeyfile.h" line="249" />
        <return-value transfer-ownership="container" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19969">
    the values associated with the key as a list of integers, or %NULL if
    the key was not found or could not be parsed. The returned list of
    integers should be freed with g_free() when no longer needed.</doc>
          <array length="2" zero-terminated="0" c:type="gint*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
            <type name="gint" gs:managed-name="System.Int32" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19954">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19955">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19956">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19957">the number of integers returned</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19955">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19956">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_keys" c:identifier="g_key_file_get_keys" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetKeys">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19977">Returns all keys for the group name @group_name.  The array of
returned keys will be %NULL-terminated, so @length may
optionally be %NULL. In the event that the @group_name cannot
be found, %NULL is returned and @error is set to
#G_KEY_FILE_ERROR_GROUP_NOT_FOUND.</doc>
        <source-position filename="gkeyfile.h" line="111" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="19990">a newly-allocated %NULL-terminated array of strings.
    Use g_strfreev() to free it.</doc>
          <array c:type="gchar**" zero-terminated="1" length="1" name="GLib.Strv" gs:managed-name="GISharp.Lib.GLib.Strv" gs:is-pointer="1">
            <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19979">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19980">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19981">return location for the number of keys returned, or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19980">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_locale_for_key" c:identifier="g_key_file_get_locale_for_key" version="2.56" gs:dll-name="glib-2.0" gs:managed-name="GetLocaleForKey">
        <doc xml:space="preserve" filename="glib-2.0.c" line="19996">Returns the actual locale which the result of
g_key_file_get_locale_string() or g_key_file_get_locale_string_list()
came from.

If calling g_key_file_get_locale_string() or
g_key_file_get_locale_string_list() with exactly the same @key_file,
@group_name, @key and @locale, the result of those functions will
have originally been tagged with the locale that is the result of
this function.</doc>
        <source-position filename="gkeyfile.h" line="150" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20013">the locale from the file, or %NULL if the key was not
  found or the entry in the file was was untranslated</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19998">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19999">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20000">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20001">a locale identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="19999">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20000">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20001">a locale identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_locale_string" c:identifier="g_key_file_get_locale_string" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetLocaleString">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20019">Returns the value associated with @key under @group_name
translated in the given @locale if available.  If @locale is
%NULL then the current locale is assumed.

If @locale is to be non-%NULL, or if the current locale will change over
the lifetime of the #GKeyFile, it must be loaded with
%G_KEY_FILE_KEEP_TRANSLATIONS in order to load strings for all locales.

If @key cannot be found then %NULL is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the value associated
with @key cannot be interpreted or no suitable translation can
be found then the untranslated value is returned.</doc>
        <source-position filename="gkeyfile.h" line="144" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20040">a newly allocated string or %NULL if the specified
  key cannot be found.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20021">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20022">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20023">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20024">a locale identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20022">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20023">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20024">a locale identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_locale_string_list" c:identifier="g_key_file_get_locale_string_list" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetLocaleStringList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20046">Returns the values associated with @key under @group_name
translated in the given @locale if available.  If @locale is
%NULL then the current locale is assumed.

If @locale is to be non-%NULL, or if the current locale will change over
the lifetime of the #GKeyFile, it must be loaded with
%G_KEY_FILE_KEEP_TRANSLATIONS in order to load strings for all locales.

If @key cannot be found then %NULL is returned and @error is set
to #G_KEY_FILE_ERROR_KEY_NOT_FOUND. If the values associated
with @key cannot be interpreted or no suitable translations
can be found then the untranslated values are returned. The
returned array is %NULL-terminated, so @length may optionally
be %NULL.</doc>
        <source-position filename="gkeyfile.h" line="223" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20070">a newly allocated %NULL-terminated string array
  or %NULL if the key isn't found. The string array should be freed
  with g_strfreev().</doc>
          <array length="3" zero-terminated="1" c:type="gchar**" name="GLib.Strv" gs:managed-name="GISharp.Lib.GLib.Strv" gs:is-pointer="1">
            <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20048">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20049">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20050">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20051">a locale identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20052">return location for the number of returned strings or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20049">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20050">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20051">a locale identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <gs:managed-property name="get_start_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="StartGroup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20077">Returns the name of the start group of the file.</doc>
        <source-position filename="gkeyfile.h" line="106" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20083">The start group of the key file.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20079">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_start_group" c:identifier="g_key_file_get_start_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="GetStartGroup" gs:property-getter-for="StartGroup" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20077">Returns the name of the start group of the file.</doc>
        <source-position filename="gkeyfile.h" line="106" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20083">The start group of the key file.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20079">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="get_string" c:identifier="g_key_file_get_string" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetString">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20088">Returns the string value associated with @key under @group_name.
Unlike g_key_file_get_value(), this function handles escape sequences
like \s.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.</doc>
        <source-position filename="gkeyfile.h" line="134" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20104">a newly allocated string or %NULL if the specified
  key cannot be found.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20090">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20091">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20092">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20091">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20092">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_string_list" c:identifier="g_key_file_get_string_list" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetStringList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20110">Returns the values associated with @key under @group_name.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.</doc>
        <source-position filename="gkeyfile.h" line="211" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20125">
 a %NULL-terminated string array or %NULL if the specified
 key cannot be found. The array should be freed with g_strfreev().</doc>
          <array length="2" zero-terminated="1" c:type="gchar**" name="GLib.Strv" gs:managed-name="GISharp.Lib.GLib.Strv" gs:is-pointer="1">
            <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20112">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20113">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20114">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20115">return location for the number of returned strings, or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20113">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20114">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_uint64" c:identifier="g_key_file_get_uint64" version="2.26" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetUint64">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20132">Returns the value associated with @key under @group_name as an unsigned
64-bit integer. This is similar to g_key_file_get_integer() but can return
large positive results without truncation.</doc>
        <source-position filename="gkeyfile.h" line="191" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20143">the value associated with the key as an unsigned 64-bit integer,
or 0 if the key was not found or could not be parsed.</doc>
          <type name="guint64" c:type="guint64" gs:managed-name="System.UInt64" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20134">a non-%NULL #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20135">a non-%NULL group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20136">a non-%NULL key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20135">a non-%NULL group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20136">a non-%NULL key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_value" c:identifier="g_key_file_get_value" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="GetValue">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20149">Returns the raw value associated with @key under @group_name.
Use g_key_file_get_string() to retrieve an unescaped UTF-8 string.

In the event the key cannot be found, %NULL is returned and
@error is set to #G_KEY_FILE_ERROR_KEY_NOT_FOUND.  In the
event that the @group_name cannot be found, %NULL is returned
and @error is set to #G_KEY_FILE_ERROR_GROUP_NOT_FOUND.</doc>
        <source-position filename="gkeyfile.h" line="124" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20164">a newly allocated string or %NULL if the specified
 key cannot be found.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20151">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20152">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20153">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20152">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20153">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="has_group" c:identifier="g_key_file_has_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="HasGroup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20170">Looks whether the key file has the group @group_name.</doc>
        <source-position filename="gkeyfile.h" line="116" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20177">%TRUE if @group_name is a part of @key_file, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20172">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20173">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20173">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="load_from_bytes" c:identifier="g_key_file_load_from_bytes" version="2.50" throws="1" gs:dll-name="glib-2.0" gs:managed-name="LoadFromBytes">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20206">Loads a key file from the data in @bytes into an empty #GKeyFile structure.
If the object cannot be created then %error is set to a #GKeyFileError.</doc>
        <source-position filename="gkeyfile.h" line="80" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20216">%TRUE if a key file could be loaded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20208">an empty #GKeyFile struct</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="bytes" transfer-ownership="none" gs:managed-name="bytes" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20209">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*" gs:managed-name="Bytes" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20210">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="bytes" transfer-ownership="none" gs:managed-name="bytes" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20209">a #GBytes</doc>
            <type name="Bytes" c:type="GBytes*" gs:managed-name="Bytes" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20210">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="load_from_data" c:identifier="g_key_file_load_from_data" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="LoadFromData">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20221">Loads a key file from memory into an empty #GKeyFile structure.
If the object cannot be created then %error is set to a #GKeyFileError.</doc>
        <source-position filename="gkeyfile.h" line="74" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20232">%TRUE if a key file could be loaded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20223">an empty #GKeyFile struct</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="data" transfer-ownership="none" gs:managed-name="data" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20224">key file loaded in memory</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20225">the length of @data in bytes (or (gsize)-1 if data is nul-terminated)</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20226">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="data" transfer-ownership="none" gs:managed-name="data" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20224">key file loaded in memory</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20225">the length of @data in bytes (or (gsize)-1 if data is nul-terminated)</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20226">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="load_from_data_dirs" c:identifier="g_key_file_load_from_data_dirs" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="LoadFromDataDirs">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20237">This function looks for a key file named @file in the paths
returned from g_get_user_data_dir() and g_get_system_data_dirs(),
loads the file into @key_file and returns the file's full path in
@full_path.  If the file could not be loaded then an %error is
set to either a #GFileError or #GKeyFileError.</doc>
        <source-position filename="gkeyfile.h" line="92" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20252">%TRUE if a key file could be loaded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20239">an empty #GKeyFile struct</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="file" transfer-ownership="none" gs:managed-name="file" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20240">a relative path to a filename to open and parse</doc>
            <type name="filename" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="full_path" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="fullPath">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20241">return location for a string containing the full path
  of the file, or %NULL</doc>
            <type name="filename" c:type="gchar**" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20243">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="file" transfer-ownership="none" gs:managed-name="file" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20240">a relative path to a filename to open and parse</doc>
            <type name="filename" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="full_path" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="fullPath">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20241">return location for a string containing the full path
  of the file, or %NULL</doc>
            <type name="filename" c:type="gchar**" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20243">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="load_from_dirs" c:identifier="g_key_file_load_from_dirs" version="2.14" throws="1" gs:dll-name="glib-2.0" gs:managed-name="LoadFromDirs">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20257">This function looks for a key file named @file in the paths
specified in @search_dirs, loads the file into @key_file and
returns the file's full path in @full_path.

If the file could not be found in any of the @search_dirs,
%G_KEY_FILE_ERROR_NOT_FOUND is returned. If
the file is found but the OS returns an error when opening or reading the
file, a %G_FILE_ERROR is returned. If there is a problem parsing the file, a
%G_KEY_FILE_ERROR is returned.</doc>
        <source-position filename="gkeyfile.h" line="85" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20277">%TRUE if a key file could be loaded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20259">an empty #GKeyFile struct</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="file" transfer-ownership="none" gs:managed-name="file" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20260">a relative path to a filename to open and parse</doc>
            <type name="filename" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="search_dirs" transfer-ownership="none" gs:managed-name="searchDirs" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20261">%NULL-terminated array of directories to search</doc>
            <array c:type="const gchar**" zero-terminated="1" gs:managed-name="GISharp.Runtime.FilenameArray" gs:is-pointer="1">
              <type name="filename" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
            </array>
          </parameter>
          <parameter name="full_path" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="fullPath">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20262">return location for a string containing the full path
  of the file, or %NULL</doc>
            <type name="filename" c:type="gchar**" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20264">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="file" transfer-ownership="none" gs:managed-name="file" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20260">a relative path to a filename to open and parse</doc>
            <type name="filename" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="search_dirs" transfer-ownership="none" gs:managed-name="searchDirs" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20261">%NULL-terminated array of directories to search</doc>
            <array c:type="const gchar**" zero-terminated="1" gs:managed-name="GISharp.Runtime.FilenameArray" gs:is-pointer="1">
              <type name="filename" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
            </array>
          </parameter>
          <parameter name="full_path" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="fullPath">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20262">return location for a string containing the full path
  of the file, or %NULL</doc>
            <type name="filename" c:type="gchar**" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20264">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="load_from_file" c:identifier="g_key_file_load_from_file" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="LoadFromFile">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20282">Loads a key file into an empty #GKeyFile structure.

If the OS returns an error when opening or reading the file, a
%G_FILE_ERROR is returned. If there is a problem parsing the file, a
%G_KEY_FILE_ERROR is returned.

This function will never return a %G_KEY_FILE_ERROR_NOT_FOUND error. If the
@file is not found, %G_FILE_ERROR_NOENT is returned.</doc>
        <source-position filename="gkeyfile.h" line="69" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20298">%TRUE if a key file could be loaded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20284">an empty #GKeyFile struct</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="file" transfer-ownership="none" gs:managed-name="file" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20285">the path of a filename to load, in the GLib filename encoding</doc>
            <type name="filename" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20286">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="file" transfer-ownership="none" gs:managed-name="file" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20285">the path of a filename to load, in the GLib filename encoding</doc>
            <type name="filename" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Filename" gs:is-pointer="1" />
          </parameter>
          <parameter name="flags" transfer-ownership="none" gs:managed-name="flags" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20286">flags from #GKeyFileFlags</doc>
            <type name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="ref" c:identifier="g_key_file_ref" version="2.32" introspectable="1" gs:dll-name="glib-2.0" gs:managed-name="Ref" gs:special-func="ref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20316">Increases the reference count of @key_file.</doc>
        <source-position filename="gkeyfile.h" line="60" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20322">the same @key_file.</doc>
          <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20318">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="remove_comment" c:identifier="g_key_file_remove_comment" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="RemoveComment">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20327">Removes a comment above @key from @group_name.
If @key is %NULL then @comment will be removed above @group_name.
If both @key and @group_name are %NULL, then @comment will
be removed above the first group in the file.</doc>
        <source-position filename="gkeyfile.h" line="285" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20339">%TRUE if the comment was removed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20329">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20330">a group name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20331">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20330">a group name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20331">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="remove_group" c:identifier="g_key_file_remove_group" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="RemoveGroup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20344">Removes the specified group, @group_name,
from the key file.</doc>
        <source-position filename="gkeyfile.h" line="295" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20353">%TRUE if the group was removed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20346">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20347">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20347">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="remove_key" c:identifier="g_key_file_remove_key" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="RemoveKey">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20358">Removes @key in @group_name from the key file.</doc>
        <source-position filename="gkeyfile.h" line="290" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20367">%TRUE if the key was removed, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20360">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20361">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20362">a key name to remove</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20361">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20362">a key name to remove</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="save_to_file" c:identifier="g_key_file_save_to_file" version="2.40" throws="1" gs:dll-name="glib-2.0" gs:managed-name="SaveToFile">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20372">Writes the contents of @key_file to @filename using
g_file_set_contents(). If you need stricter guarantees about durability of
the written file than are provided by g_file_set_contents(), use
g_file_set_contents_full() with the return value of g_key_file_to_data().

This function can fail for any of the reasons that
g_file_set_contents() may fail.</doc>
        <source-position filename="gkeyfile.h" line="102" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20386">%TRUE if successful, else %FALSE with @error set</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20374">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none" gs:managed-name="filename" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20375">the name of the file to write to</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="filename" transfer-ownership="none" gs:managed-name="filename" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20375">the name of the file to write to</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_boolean" c:identifier="g_key_file_set_boolean" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetBoolean">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20391">Associates a new boolean value with @key under @group_name.
If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="166" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20393">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20394">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20395">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20396">%TRUE or %FALSE</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20394">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20395">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20396">%TRUE or %FALSE</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_boolean_list" c:identifier="g_key_file_set_boolean_list" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetBooleanList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20405">Associates a list of boolean values with @key under @group_name.
If @key cannot be found then it is created.
If @group_name is %NULL, the start_group is used.</doc>
        <source-position filename="gkeyfile.h" line="243" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20407">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20408">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20409">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20410">an array of boolean values</doc>
            <array length="3" zero-terminated="0" c:type="gboolean*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20411">length of @list</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20408">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20409">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20410">an array of boolean values</doc>
            <array length="3" zero-terminated="0" c:type="gboolean*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_comment" c:identifier="g_key_file_set_comment" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="SetComment">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20421">Places a comment above @key from @group_name.

If @key is %NULL then @comment will be written above @group_name.
If both @key and @group_name  are %NULL, then @comment will be
written above the first group in the file.

Note that this function prepends a '#' comment marker to
each line of @comment.</doc>
        <source-position filename="gkeyfile.h" line="273" />
        <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20438">%TRUE if the comment was written, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20423">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20424">a group name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20425">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="comment" transfer-ownership="none" gs:managed-name="comment" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20426">a comment</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20424">a group name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20425">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="comment" transfer-ownership="none" gs:managed-name="comment" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20426">a comment</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_double" c:identifier="g_key_file_set_double" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="SetDouble">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20443">Associates a new double value with @key under @group_name.
If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="206" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20445">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20446">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20447">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20448">a double value</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20446">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20447">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20448">a double value</doc>
            <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_double_list" c:identifier="g_key_file_set_double_list" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="SetDoubleList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20457">Associates a list of double values with @key under
@group_name.  If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="255" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20459">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20460">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20461">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20462">an array of double values</doc>
            <array length="3" zero-terminated="0" c:type="gdouble*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20463">number of double values in @list</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20460">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20461">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20462">an array of double values</doc>
            <array length="3" zero-terminated="0" c:type="gdouble*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gdouble" c:type="gdouble" gs:managed-name="System.Double" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_int64" c:identifier="g_key_file_set_int64" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="SetInt64">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20472">Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="186" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20474">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20475">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20476">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20477">an integer value</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20475">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20476">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20477">an integer value</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_integer" c:identifier="g_key_file_set_integer" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetInteger">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20486">Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="176" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20488">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20489">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20490">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20491">an integer value</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20489">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20490">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20491">an integer value</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_integer_list" c:identifier="g_key_file_set_integer_list" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetIntegerList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20500">Associates a list of integer values with @key under @group_name.
If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="267" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20502">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20503">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20504">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20505">an array of integer values</doc>
            <array length="3" zero-terminated="0" c:type="gint*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20506">number of integer values in @list</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20503">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20504">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20505">an array of integer values</doc>
            <array length="3" zero-terminated="0" c:type="gint*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_list_separator" c:identifier="g_key_file_set_list_separator" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetListSeparator">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20515">Sets the character which is used to separate
values in lists. Typically ';' or ',' are used
as separators. The default list separator is ';'.</doc>
        <source-position filename="gkeyfile.h" line="66" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20517">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="separator" transfer-ownership="none" gs:managed-name="separator" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20518">the separator</doc>
            <type name="gchar" c:type="gchar" gs:managed-name="System.SByte" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="separator" transfer-ownership="none" gs:managed-name="separator" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20518">the separator</doc>
            <type name="gchar" c:type="gchar" gs:managed-name="System.SByte" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_locale_string" c:identifier="g_key_file_set_locale_string" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetLocaleString">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20528">Associates a string value for @key and @locale under @group_name.
If the translation for @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="155" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20530">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20531">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20532">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20533">a locale identifier</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="string" transfer-ownership="none" gs:managed-name="@string" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20534">a string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20531">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20532">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20533">a locale identifier</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="string" transfer-ownership="none" gs:managed-name="@string" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20534">a string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_locale_string_list" c:identifier="g_key_file_set_locale_string_list" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetLocaleStringList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20543">Associates a list of string values for @key and @locale under
@group_name.  If the translation for @key cannot be found then
it is created.</doc>
        <source-position filename="gkeyfile.h" line="230" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20545">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20546">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20547">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20548">a locale identifier</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20549">a %NULL-terminated array of locale string values</doc>
            <array length="4" zero-terminated="0" c:type="const gchar* const*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20550">the length of @list</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20546">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20547">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="locale" transfer-ownership="none" gs:managed-name="locale" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20548">a locale identifier</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20549">a %NULL-terminated array of locale string values</doc>
            <array length="4" zero-terminated="0" c:type="const gchar* const*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_string" c:identifier="g_key_file_set_string" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetString">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20560">Associates a new string value with @key under @group_name.
If @key cannot be found then it is created.
If @group_name cannot be found then it is created.
Unlike g_key_file_set_value(), this function handles characters
that need escaping, such as newlines.</doc>
        <source-position filename="gkeyfile.h" line="139" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20562">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20563">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20564">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="string" transfer-ownership="none" gs:managed-name="@string" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20565">a string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20563">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20564">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="string" transfer-ownership="none" gs:managed-name="@string" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20565">a string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_string_list" c:identifier="g_key_file_set_string_list" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetStringList">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20577">Associates a list of string values for @key under @group_name.
If @key cannot be found then it is created.
If @group_name cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="217" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20579">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20580">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20581">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20582">an array of string values</doc>
            <array length="3" zero-terminated="0" c:type="const gchar* const*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
            </array>
          </parameter>
          <parameter name="length" transfer-ownership="none" gs:managed-name="length" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20583">number of string values in @list</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20580">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20581">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="list" transfer-ownership="none" gs:managed-name="list" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20582">an array of string values</doc>
            <array length="3" zero-terminated="0" c:type="const gchar* const*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="utf8" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_uint64" c:identifier="g_key_file_set_uint64" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="SetUint64">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20593">Associates a new integer value with @key under @group_name.
If @key cannot be found then it is created.</doc>
        <source-position filename="gkeyfile.h" line="196" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20595">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20596">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20597">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20598">an integer value</doc>
            <type name="guint64" c:type="guint64" gs:managed-name="System.UInt64" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20596">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20597">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20598">an integer value</doc>
            <type name="guint64" c:type="guint64" gs:managed-name="System.UInt64" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_value" c:identifier="g_key_file_set_value" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetValue">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20607">Associates a new value with @key under @group_name.

If @key cannot be found then it is created. If @group_name cannot
be found then it is created. To set an UTF-8 string which may contain
characters that need escaping (such as newlines or spaces), use
g_key_file_set_string().</doc>
        <source-position filename="gkeyfile.h" line="129" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20609">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20610">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20611">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20612">a string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group_name" transfer-ownership="none" gs:managed-name="groupName" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20610">a group name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20611">a key</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20612">a string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_data" c:identifier="g_key_file_to_data" version="2.6" throws="1" gs:dll-name="glib-2.0" gs:managed-name="ToData">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20625">This function outputs @key_file as a string.

Note that this function never reports an error,
so it is safe to pass %NULL as @error.</doc>
        <source-position filename="gkeyfile.h" line="98" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="20637">a newly allocated string holding
  the contents of the #GKeyFile</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20627">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20628">return location for the length of the
  returned string, or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="length" direction="out" caller-allocates="0" transfer-ownership="full" optional="1" allow-none="1" gs:managed-name="length">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20628">return location for the length of the
  returned string, or %NULL</doc>
            <type name="gsize" c:type="gsize*" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="unref" c:identifier="g_key_file_unref" version="2.32" introspectable="1" gs:dll-name="glib-2.0" gs:managed-name="Unref" gs:special-func="unref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="20643">Decreases the reference count of @key_file by 1. If the reference count
reaches zero, frees the key file and all its allocated memory.</doc>
        <source-position filename="gkeyfile.h" line="62" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="key_file" transfer-ownership="none" gs:managed-name="keyFile" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="20645">a #GKeyFile</doc>
            <type name="KeyFile" c:type="GKeyFile*" gs:managed-name="KeyFile" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <constant name="DESKTOP_GROUP" value="Desktop Entry" c:type="G_KEY_FILE_DESKTOP_GROUP" version="2.14" gs:managed-name="DesktopGroup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3611">The name of the main group of a desktop entry file, as defined in the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec).
Consult the specification for more
details about the meanings of the keys below.</doc>
        <source-position filename="gkeyfile.h" line="300" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_ACTIONS" value="Actions" c:type="G_KEY_FILE_DESKTOP_KEY_ACTIONS" version="2.38" gs:managed-name="DesktopKeyActions">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3623">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string list
giving the available application actions.</doc>
        <source-position filename="gkeyfile.h" line="322" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_CATEGORIES" value="Categories" c:type="G_KEY_FILE_DESKTOP_KEY_CATEGORIES" version="2.14" gs:managed-name="DesktopKeyCategories">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3633">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the categories in which the desktop entry
should be shown in a menu.</doc>
        <source-position filename="gkeyfile.h" line="317" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_COMMENT" value="Comment" c:type="G_KEY_FILE_DESKTOP_KEY_COMMENT" version="2.14" gs:managed-name="DesktopKeyComment">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3644">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the tooltip for the desktop entry.</doc>
        <source-position filename="gkeyfile.h" line="307" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_DBUS_ACTIVATABLE" value="DBusActivatable" c:type="G_KEY_FILE_DESKTOP_KEY_DBUS_ACTIVATABLE" version="2.38" gs:managed-name="DesktopKeyDbusActivatable">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3654">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean set to true
if the application is D-Bus activatable.</doc>
        <source-position filename="gkeyfile.h" line="321" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_EXEC" value="Exec" c:type="G_KEY_FILE_DESKTOP_KEY_EXEC" version="2.14" gs:managed-name="DesktopKeyExec">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3664">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the command line to execute. It is only valid for desktop
entries with the `Application` type.</doc>
        <source-position filename="gkeyfile.h" line="313" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_GENERIC_NAME" value="GenericName" c:type="G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME" version="2.14" gs:managed-name="DesktopKeyGenericName">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3675">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the generic name of the desktop entry.</doc>
        <source-position filename="gkeyfile.h" line="305" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_HIDDEN" value="Hidden" c:type="G_KEY_FILE_DESKTOP_KEY_HIDDEN" version="2.14" gs:managed-name="DesktopKeyHidden">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3685">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry has been deleted by the user.</doc>
        <source-position filename="gkeyfile.h" line="309" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_ICON" value="Icon" c:type="G_KEY_FILE_DESKTOP_KEY_ICON" version="2.14" gs:managed-name="DesktopKeyIcon">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3695">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the name of the icon to be displayed for the desktop
entry.</doc>
        <source-position filename="gkeyfile.h" line="308" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_MIME_TYPE" value="MimeType" c:type="G_KEY_FILE_DESKTOP_KEY_MIME_TYPE" version="2.14" gs:managed-name="DesktopKeyMimeType">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3706">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list
of strings giving the MIME types supported by this desktop entry.</doc>
        <source-position filename="gkeyfile.h" line="316" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_NAME" value="Name" c:type="G_KEY_FILE_DESKTOP_KEY_NAME" version="2.14" gs:managed-name="DesktopKeyName">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3716">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a localized
string giving the specific name of the desktop entry.</doc>
        <source-position filename="gkeyfile.h" line="304" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_NOT_SHOW_IN" value="NotShowIn" c:type="G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN" version="2.14" gs:managed-name="DesktopKeyNotShowIn">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3726">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should not display the
desktop entry.</doc>
        <source-position filename="gkeyfile.h" line="311" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_NO_DISPLAY" value="NoDisplay" c:type="G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY" version="2.14" gs:managed-name="DesktopKeyNoDisplay">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3737">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the desktop entry should be shown in menus.</doc>
        <source-position filename="gkeyfile.h" line="306" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_ONLY_SHOW_IN" value="OnlyShowIn" c:type="G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN" version="2.14" gs:managed-name="DesktopKeyOnlyShowIn">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3747">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a list of
strings identifying the environments that should display the
desktop entry.</doc>
        <source-position filename="gkeyfile.h" line="310" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_PATH" value="Path" c:type="G_KEY_FILE_DESKTOP_KEY_PATH" version="2.14" gs:managed-name="DesktopKeyPath">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3758">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
containing the working directory to run the program in. It is only
valid for desktop entries with the `Application` type.</doc>
        <source-position filename="gkeyfile.h" line="314" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_STARTUP_NOTIFY" value="StartupNotify" c:type="G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY" version="2.14" gs:managed-name="DesktopKeyStartupNotify">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3769">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the application supports the
[Startup Notification Protocol Specification](http://www.freedesktop.org/Standards/startup-notification-spec).</doc>
        <source-position filename="gkeyfile.h" line="318" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_STARTUP_WM_CLASS" value="StartupWMClass" c:type="G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS" version="2.14" gs:managed-name="DesktopKeyStartupWmClass">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3780">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is string
identifying the WM class or name hint of a window that the application
will create, which can be used to emulate Startup Notification with
older applications.</doc>
        <source-position filename="gkeyfile.h" line="319" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_TERMINAL" value="Terminal" c:type="G_KEY_FILE_DESKTOP_KEY_TERMINAL" version="2.14" gs:managed-name="DesktopKeyTerminal">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3792">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a boolean
stating whether the program should be run in a terminal window.
It is only valid for desktop entries with the
`Application` type.</doc>
        <source-position filename="gkeyfile.h" line="315" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_TRY_EXEC" value="TryExec" c:type="G_KEY_FILE_DESKTOP_KEY_TRY_EXEC" version="2.14" gs:managed-name="DesktopKeyTryExec">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3804">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the file name of a binary on disk used to determine if the
program is actually installed. It is only valid for desktop entries
with the `Application` type.</doc>
        <source-position filename="gkeyfile.h" line="312" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_TYPE" value="Type" c:type="G_KEY_FILE_DESKTOP_KEY_TYPE" version="2.14" gs:managed-name="DesktopKeyType">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3816">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the type of the desktop entry. Usually
#G_KEY_FILE_DESKTOP_TYPE_APPLICATION,
#G_KEY_FILE_DESKTOP_TYPE_LINK, or
#G_KEY_FILE_DESKTOP_TYPE_DIRECTORY.</doc>
        <source-position filename="gkeyfile.h" line="302" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_URL" value="URL" c:type="G_KEY_FILE_DESKTOP_KEY_URL" version="2.14" gs:managed-name="DesktopKeyUrl">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3829">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the URL to access. It is only valid for desktop entries
with the `Link` type.</doc>
        <source-position filename="gkeyfile.h" line="320" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_KEY_VERSION" value="Version" c:type="G_KEY_FILE_DESKTOP_KEY_VERSION" version="2.14" gs:managed-name="DesktopKeyVersion">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3840">A key under #G_KEY_FILE_DESKTOP_GROUP, whose value is a string
giving the version of the Desktop Entry Specification used for
the desktop entry file.</doc>
        <source-position filename="gkeyfile.h" line="303" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_TYPE_APPLICATION" value="Application" c:type="G_KEY_FILE_DESKTOP_TYPE_APPLICATION" version="2.14" gs:managed-name="DesktopTypeApplication">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3851">The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing applications.</doc>
        <source-position filename="gkeyfile.h" line="324" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_TYPE_DIRECTORY" value="Directory" c:type="G_KEY_FILE_DESKTOP_TYPE_DIRECTORY" version="2.14" gs:managed-name="DesktopTypeDirectory">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3861">The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing directories.</doc>
        <source-position filename="gkeyfile.h" line="326" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <constant name="DESKTOP_TYPE_LINK" value="Link" c:type="G_KEY_FILE_DESKTOP_TYPE_LINK" version="2.14" gs:managed-name="DesktopTypeLink">
        <doc xml:space="preserve" filename="glib-2.0.c" line="3871">The value of the #G_KEY_FILE_DESKTOP_KEY_TYPE, key for desktop
entries representing links to documents.</doc>
        <source-position filename="gkeyfile.h" line="325" />
        <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </constant>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="g_key_file_get_type" gs:access-modifiers="private" gs:dll-name="gobject-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" gs:managed-name="GISharp.Lib.GObject.GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </record>
    <enumeration name="KeyFileError" c:type="GKeyFileError" glib:error-domain="g-key-file-error-quark" gs:managed-name="KeyFileError">
      <doc xml:space="preserve" filename="glib-2.0.c" line="1083">Error codes returned by key file parsing.</doc>
      <source-position filename="gkeyfile.h" line="41" />
      <member name="unknown_encoding" value="0" c:identifier="G_KEY_FILE_ERROR_UNKNOWN_ENCODING" gs:managed-name="UnknownEncoding">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1085">the text being parsed was in
    an unknown encoding</doc>
      </member>
      <member name="parse" value="1" c:identifier="G_KEY_FILE_ERROR_PARSE" gs:managed-name="Parse">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1087">document was ill-formed</doc>
      </member>
      <member name="not_found" value="2" c:identifier="G_KEY_FILE_ERROR_NOT_FOUND" gs:managed-name="NotFound">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1088">the file was not found</doc>
      </member>
      <member name="key_not_found" value="3" c:identifier="G_KEY_FILE_ERROR_KEY_NOT_FOUND" gs:managed-name="KeyNotFound">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1089">a requested key was not found</doc>
      </member>
      <member name="group_not_found" value="4" c:identifier="G_KEY_FILE_ERROR_GROUP_NOT_FOUND" gs:managed-name="GroupNotFound">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1090">a requested group was not found</doc>
      </member>
      <member name="invalid_value" value="5" c:identifier="G_KEY_FILE_ERROR_INVALID_VALUE" gs:managed-name="InvalidValue">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1091">a value could not be parsed</doc>
      </member>
      <gs:managed-property name="get_quark" gs:dll-name="glib-2.0" gs:managed-name="Quark">
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="Quark" c:type="GQuark" gs:managed-name="Quark" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_quark" c:identifier="g_key_file_error_quark" gs:dll-name="glib-2.0" gs:managed-name="GetQuark" gs:property-getter-for="Quark" gs:access-modifiers="private">
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="Quark" c:type="GQuark" gs:managed-name="Quark" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <bitfield name="KeyFileFlags" c:type="GKeyFileFlags" gs:managed-name="KeyFileFlags">
      <doc xml:space="preserve" filename="glib-2.0.c" line="1097">Flags which influence the parsing.</doc>
      <source-position filename="gkeyfile.h" line="55" />
      <member name="none" value="0" c:identifier="G_KEY_FILE_NONE" gs:managed-name="None">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1099">No flags, default behaviour</doc>
      </member>
      <member name="keep_comments" value="1" c:identifier="G_KEY_FILE_KEEP_COMMENTS" gs:managed-name="KeepComments">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1100">Use this flag if you plan to write the
    (possibly modified) contents of the key file back to a file;
    otherwise all comments will be lost when the key file is
    written back.</doc>
      </member>
      <member name="keep_translations" value="2" c:identifier="G_KEY_FILE_KEEP_TRANSLATIONS" gs:managed-name="KeepTranslations">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1104">Use this flag if you plan to write the
    (possibly modified) contents of the key file back to a file;
    otherwise only the translations for the current language will be
    written back.</doc>
      </member>
    </bitfield>
    <enumeration name="NormalizeMode" c:type="GNormalizeMode" gs:managed-name="NormalizeMode">
      <doc xml:space="preserve" filename="gunicode.h" line="883">Defines how a Unicode string is transformed in a canonical
form, standardizing such issues as whether a character with
an accent is represented as a base character and combining
accent or as a single precomposed character. Unicode strings
should generally be normalized before comparing them.</doc>
      <source-position filename="gunicode.h" line="916" />
      <member name="default" value="0" c:identifier="G_NORMALIZE_DEFAULT" gs:managed-name="Default">
        <doc xml:space="preserve" filename="gunicode.h" line="885">standardize differences that do not affect the
    text content, such as the above-mentioned accent representation</doc>
      </member>
      <member name="n_f_d" value="0" c:identifier="G_NORMALIZE_NFD" gs:managed-name="NFD">
        <doc xml:space="preserve" filename="gunicode.h" line="887">another name for %G_NORMALIZE_DEFAULT</doc>
      </member>
      <member name="default_compose" value="1" c:identifier="G_NORMALIZE_DEFAULT_COMPOSE" gs:managed-name="DefaultCompose">
        <doc xml:space="preserve" filename="gunicode.h" line="888">like %G_NORMALIZE_DEFAULT, but with
    composed forms rather than a maximally decomposed form</doc>
      </member>
      <member name="n_f_c" value="1" c:identifier="G_NORMALIZE_NFC" gs:managed-name="NFC">
        <doc xml:space="preserve" filename="gunicode.h" line="890">another name for %G_NORMALIZE_DEFAULT_COMPOSE</doc>
      </member>
      <member name="all" value="2" c:identifier="G_NORMALIZE_ALL" gs:managed-name="All">
        <doc xml:space="preserve" filename="gunicode.h" line="891">beyond %G_NORMALIZE_DEFAULT also standardize the
    "compatibility" characters in Unicode, such as SUPERSCRIPT THREE
    to the standard forms (in this case DIGIT THREE). Formatting
    information may be lost but for most text operations such
    characters should be considered the same</doc>
      </member>
      <member name="n_f_k_d" value="2" c:identifier="G_NORMALIZE_NFKD" gs:managed-name="NFKD">
        <doc xml:space="preserve" filename="gunicode.h" line="896">another name for %G_NORMALIZE_ALL</doc>
      </member>
      <member name="all_compose" value="3" c:identifier="G_NORMALIZE_ALL_COMPOSE" gs:managed-name="AllCompose">
        <doc xml:space="preserve" filename="gunicode.h" line="897">like %G_NORMALIZE_ALL, but with composed
    forms rather than a maximally decomposed form</doc>
      </member>
      <member name="n_f_k_c" value="3" c:identifier="G_NORMALIZE_NFKC" gs:managed-name="NFKC">
        <doc xml:space="preserve" filename="gunicode.h" line="899">another name for %G_NORMALIZE_ALL_COMPOSE</doc>
      </member>
    </enumeration>
    <enumeration name="OptionArg" c:type="GOptionArg" gs:managed-name="OptionArg">
      <doc xml:space="preserve" filename="goption.h" line="93">The #GOptionArg enum values determine which type of extra argument the
options expect to find. If an option expects an extra argument, it can
be specified in several ways; with a short option: `-x arg`, with a long
option: `--name arg` or combined in a single argument: `--name=arg`.</doc>
      <source-position filename="goption.h" line="130" />
      <member name="none" value="0" c:identifier="G_OPTION_ARG_NONE" gs:managed-name="None">
        <doc xml:space="preserve" filename="goption.h" line="95">No extra argument. This is useful for simple flags.</doc>
      </member>
      <member name="string" value="1" c:identifier="G_OPTION_ARG_STRING" gs:managed-name="String">
        <doc xml:space="preserve" filename="goption.h" line="96">The option takes a UTF-8 string argument.</doc>
      </member>
      <member name="int" value="2" c:identifier="G_OPTION_ARG_INT" gs:managed-name="Int">
        <doc xml:space="preserve" filename="goption.h" line="97">The option takes an integer argument.</doc>
      </member>
      <member name="callback" value="3" c:identifier="G_OPTION_ARG_CALLBACK" gs:managed-name="Callback">
        <doc xml:space="preserve" filename="goption.h" line="98">The option provides a callback (of type
    #GOptionArgFunc) to parse the extra argument.</doc>
      </member>
      <member name="filename" value="4" c:identifier="G_OPTION_ARG_FILENAME" gs:managed-name="Filename">
        <doc xml:space="preserve" filename="goption.h" line="100">The option takes a filename as argument, which will
       be in the GLib filename encoding rather than UTF-8.</doc>
      </member>
      <member name="string_array" value="5" c:identifier="G_OPTION_ARG_STRING_ARRAY" gs:managed-name="StringArray">
        <doc xml:space="preserve" filename="goption.h" line="102">The option takes a string argument, multiple
    uses of the option are collected into an array of strings.</doc>
      </member>
      <member name="filename_array" value="6" c:identifier="G_OPTION_ARG_FILENAME_ARRAY" gs:managed-name="FilenameArray">
        <doc xml:space="preserve" filename="goption.h" line="104">The option takes a filename as argument,
    multiple uses of the option are collected into an array of strings.</doc>
      </member>
      <member name="double" value="7" c:identifier="G_OPTION_ARG_DOUBLE" version="2.12" gs:managed-name="Double">
        <doc xml:space="preserve" filename="goption.h" line="106">The option takes a double argument. The argument
    can be formatted either for the user's locale or for the "C" locale.</doc>
      </member>
      <member name="int64" value="8" c:identifier="G_OPTION_ARG_INT64" version="2.12" gs:managed-name="Int64">
        <doc xml:space="preserve" filename="goption.h" line="109">The option takes a 64-bit integer. Like
    %G_OPTION_ARG_INT but for larger numbers. The number can be in
    decimal base, or in hexadecimal (when prefixed with `0x`, for
    example, `0xffffffff`).</doc>
      </member>
    </enumeration>
    <callback name="OptionArgFunc" c:type="GOptionArgFunc" throws="1" gs:dll-name="glib-2.0" gs:managed-name="OptionArgFunc">
      <doc xml:space="preserve" filename="goption.h" line="132">The type of function to be passed as callback for %G_OPTION_ARG_CALLBACK
options.</doc>
      <source-position filename="goption.h" line="149" />
      <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
        <doc xml:space="preserve" filename="goption.h" line="146">%TRUE if the option was successfully parsed, %FALSE if an error
 occurred, in which case @error should be set with g_set_error()</doc>
        <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
      </return-value>
      <parameters>
        <parameter name="option_name" transfer-ownership="none" gs:managed-name="optionName" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="134">The name of the option being parsed. This will be either a
 single dash followed by a single letter (for a short name) or two dashes
 followed by a long option name.</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </parameter>
        <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="137">The value to be parsed.</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" closure="2" gs:managed-name="data" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="138">User data added to the #GOptionGroup containing the option when it
 was created with g_option_group_new()</doc>
          <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
        </parameter>
        <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
          <doc>return location for a #GError</doc>
          <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
        </gs:error-parameter>
      </parameters>
      <gs:managed-parameters>
        <parameter name="option_name" transfer-ownership="none" gs:managed-name="optionName" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="134">The name of the option being parsed. This will be either a
 single dash followed by a single letter (for a short name) or two dashes
 followed by a long option name.</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </parameter>
        <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="137">The value to be parsed.</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </parameter>
      </gs:managed-parameters>
    </callback>
    <record name="OptionContext" c:type="GOptionContext" disguised="1" gs:managed-name="OptionContext">
      <doc xml:space="preserve" filename="goption.h" line="31">A `GOptionContext` struct defines which options
are accepted by the commandline option parser. The struct has only private
fields and should not be directly accessed.</doc>
      <source-position filename="goption.h" line="38" />
      <method name="add_group" c:identifier="g_option_context_add_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="AddGroup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24309">Adds a #GOptionGroup to the @context, so that parsing with @context
will recognize the options in the group. Note that this will take
ownership of the @group and thus the @group should not be freed.</doc>
        <source-position filename="goption.h" line="343" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24311">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group" transfer-ownership="full" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24312">the group to add</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group" transfer-ownership="full" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24312">the group to add</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="free" c:identifier="g_option_context_free" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="Free" gs:special-func="free" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24337">Frees context and all the groups which have been
added to it.

Please note that parsed arguments need to be freed separately (see
#GOptionEntry).</doc>
        <source-position filename="goption.h" line="302" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24339">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_description" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="Description">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24351">Returns the description. See g_option_context_set_description().</doc>
        <source-position filename="goption.h" line="300" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24357">the description</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24353">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_description" c:identifier="g_option_context_get_description" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="GetDescription" gs:property-getter-for="Description" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24351">Returns the description. See g_option_context_set_description().</doc>
        <source-position filename="goption.h" line="300" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24357">the description</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24353">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="get_help" c:identifier="g_option_context_get_help" version="2.14" gs:dll-name="glib-2.0" gs:managed-name="GetHelp">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24362">Returns a formatted, translated help text for the given context.
To obtain the text produced by `--help`, call
`g_option_context_get_help (context, TRUE, NULL)`.
To obtain the text produced by `--help-all`, call
`g_option_context_get_help (context, FALSE, NULL)`.
To obtain the help text for an option group, call
`g_option_context_get_help (context, FALSE, group)`.</doc>
        <source-position filename="goption.h" line="351" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24376">A newly allocated string containing the help text</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24364">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="main_help" transfer-ownership="none" gs:managed-name="mainHelp" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24365">if %TRUE, only include the main group</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
          <parameter name="group" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24366">the #GOptionGroup to create help for, or %NULL</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="main_help" transfer-ownership="none" gs:managed-name="mainHelp" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24365">if %TRUE, only include the main group</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
          <parameter name="group" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24366">the #GOptionGroup to create help for, or %NULL</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <gs:managed-property name="get_help_enabled" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="HelpEnabled">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24381">Returns whether automatic `--help` generation
is turned on for @context. See g_option_context_set_help_enabled().</doc>
        <source-position filename="goption.h" line="307" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24388">%TRUE if automatic help generation is turned on.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24383">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_help_enabled" c:identifier="g_option_context_get_help_enabled" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="GetHelpEnabled" gs:property-getter-for="HelpEnabled" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24381">Returns whether automatic `--help` generation
is turned on for @context. See g_option_context_set_help_enabled().</doc>
        <source-position filename="goption.h" line="307" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24388">%TRUE if automatic help generation is turned on.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24383">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_ignore_unknown_options" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="IgnoreUnknownOptions">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24393">Returns whether unknown options are ignored or not. See
g_option_context_set_ignore_unknown_options().</doc>
        <source-position filename="goption.h" line="312" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24400">%TRUE if unknown options are ignored.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24395">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_ignore_unknown_options" c:identifier="g_option_context_get_ignore_unknown_options" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="GetIgnoreUnknownOptions" gs:property-getter-for="IgnoreUnknownOptions" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24393">Returns whether unknown options are ignored or not. See
g_option_context_set_ignore_unknown_options().</doc>
        <source-position filename="goption.h" line="312" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24400">%TRUE if unknown options are ignored.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24395">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_main_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="MainGroup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24405">Returns a pointer to the main group of @context.</doc>
        <source-position filename="goption.h" line="349" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24411">the main group of @context, or %NULL if
 @context doesn't have a main group. Note that group belongs to
 @context and should not be modified or freed.</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24407">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_main_group" c:identifier="g_option_context_get_main_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="GetMainGroup" gs:property-getter-for="MainGroup" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24405">Returns a pointer to the main group of @context.</doc>
        <source-position filename="goption.h" line="349" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24411">the main group of @context, or %NULL if
 @context doesn't have a main group. Note that group belongs to
 @context and should not be modified or freed.</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24407">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_strict_posix" version="2.44" gs:dll-name="glib-2.0" gs:managed-name="StrictPosix">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24418">Returns whether strict POSIX code is enabled.

See g_option_context_set_strict_posix() for more information.</doc>
        <source-position filename="goption.h" line="318" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24426">%TRUE if strict POSIX is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24420">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_strict_posix" c:identifier="g_option_context_get_strict_posix" version="2.44" gs:dll-name="glib-2.0" gs:managed-name="GetStrictPosix" gs:property-getter-for="StrictPosix" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24418">Returns whether strict POSIX code is enabled.

See g_option_context_set_strict_posix() for more information.</doc>
        <source-position filename="goption.h" line="318" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24426">%TRUE if strict POSIX is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24420">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <gs:managed-property name="get_summary" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="Summary">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24431">Returns the summary. See g_option_context_set_summary().</doc>
        <source-position filename="goption.h" line="295" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24437">the summary</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24433">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_summary" c:identifier="g_option_context_get_summary" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="GetSummary" gs:property-getter-for="Summary" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24431">Returns the summary. See g_option_context_set_summary().</doc>
        <source-position filename="goption.h" line="295" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24437">the summary</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24433">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="set_description" c:identifier="g_option_context_set_description" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="SetDescription" gs:property-setter-for="Description" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24541">Adds a string to be displayed in `--help` output after the list
of options. This text often includes a bug reporting address.

Note that the summary is translated (see
g_option_context_set_translate_func()).</doc>
        <source-position filename="goption.h" line="297" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24543">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="description" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="description" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24544">a string to be shown in `--help` output
  after the list of options, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="description" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="description" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24544">a string to be shown in `--help` output
  after the list of options, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_help_enabled" c:identifier="g_option_context_set_help_enabled" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetHelpEnabled" gs:property-setter-for="HelpEnabled" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24557">Enables or disables automatic generation of `--help` output.
By default, g_option_context_parse() recognizes `--help`, `-h`,
`-?`, `--help-all` and `--help-groupname` and creates suitable
output to stdout.</doc>
        <source-position filename="goption.h" line="304" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24559">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="help_enabled" transfer-ownership="none" gs:managed-name="helpEnabled" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24560">%TRUE to enable `--help`, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="help_enabled" transfer-ownership="none" gs:managed-name="helpEnabled" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24560">%TRUE to enable `--help`, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_ignore_unknown_options" c:identifier="g_option_context_set_ignore_unknown_options" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetIgnoreUnknownOptions" gs:property-setter-for="IgnoreUnknownOptions" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24571">Sets whether to ignore unknown options or not. If an argument is
ignored, it is left in the @argv array after parsing. By default,
g_option_context_parse() treats unknown options as error.

This setting does not affect non-option arguments (i.e. arguments
which don't start with a dash). But note that GOption cannot reliably
determine whether a non-option belongs to a preceding unknown option.</doc>
        <source-position filename="goption.h" line="309" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24573">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="ignore_unknown" transfer-ownership="none" gs:managed-name="ignoreUnknown" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24574">%TRUE to ignore unknown options, %FALSE to produce
   an error when unknown options are met</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="ignore_unknown" transfer-ownership="none" gs:managed-name="ignoreUnknown" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24574">%TRUE to ignore unknown options, %FALSE to produce
   an error when unknown options are met</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_main_group" c:identifier="g_option_context_set_main_group" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetMainGroup" gs:property-setter-for="MainGroup" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24589">Sets a #GOptionGroup as main group of the @context.
This has the same effect as calling g_option_context_add_group(),
the only difference is that the options in the main group are
treated differently when generating `--help` output.</doc>
        <source-position filename="goption.h" line="346" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24591">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="group" transfer-ownership="full" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24592">the group to set as main group</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="group" transfer-ownership="full" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24592">the group to set as main group</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_strict_posix" c:identifier="g_option_context_set_strict_posix" version="2.44" gs:dll-name="glib-2.0" gs:managed-name="SetStrictPosix" gs:property-setter-for="StrictPosix" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24603">Sets strict POSIX mode.

By default, this mode is disabled.

In strict POSIX mode, the first non-argument parameter encountered
(eg: filename) terminates argument processing.  Remaining arguments
are treated as non-options and are not attempted to be parsed.

If strict POSIX mode is disabled then parsing is done in the GNU way
where option arguments can be freely mixed with non-options.

As an example, consider "ls foo -l".  With GNU style parsing, this
will list "foo" in long mode.  In strict POSIX style, this will list
the files named "foo" and "-l".

It may be useful to force strict POSIX mode when creating "verb
style" command line tools.  For example, the "gsettings" command line
tool supports the global option "--schemadir" as well as many
subcommands ("get", "set", etc.) which each have their own set of
arguments.  Using strict POSIX mode will allow parsing the global
options up to the verb name while leaving the remaining options to be
parsed by the relevant subcommand (which can be determined by
examining the verb name, which should be present in argv[1] after
parsing).</doc>
        <source-position filename="goption.h" line="315" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24605">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="strict_posix" transfer-ownership="none" gs:managed-name="strictPosix" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24606">the new value</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="strict_posix" transfer-ownership="none" gs:managed-name="strictPosix" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24606">the new value</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_summary" c:identifier="g_option_context_set_summary" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="SetSummary" gs:property-setter-for="Summary" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24637">Adds a string to be displayed in `--help` output before the list
of options. This is typically a summary of the program functionality.

Note that the summary is translated (see
g_option_context_set_translate_func() and
g_option_context_set_translation_domain()).</doc>
        <source-position filename="goption.h" line="292" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24639">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="summary" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="summary" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24640">a string to be shown in `--help` output
 before the list of options, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="summary" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="summary" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24640">a string to be shown in `--help` output
 before the list of options, or %NULL</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_translate_func" c:identifier="g_option_context_set_translate_func" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="SetTranslateFunc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24654">Sets the function which is used to translate the contexts
user-visible strings, for `--help` output. If @func is %NULL,
strings are not translated.

Note that option groups have their own translation functions,
this function only affects the @parameter_string (see g_option_context_new()),
the summary (see g_option_context_set_summary()) and the description
(see g_option_context_set_description()).

If you are using gettext(), you only need to set the translation
domain, see g_option_context_set_translation_domain().</doc>
        <source-position filename="goption.h" line="334" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24656">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="func" transfer-ownership="none" nullable="1" allow-none="1" scope="notified" closure="1" destroy="2" gs:managed-name="func" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24657">the #GTranslateFunc, or %NULL</doc>
            <type name="TranslateFunc" c:type="GTranslateFunc" gs:managed-name="TranslateFunc" />
          </parameter>
          <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="data" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24658">user data to pass to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
          <parameter name="destroy_notify" transfer-ownership="none" nullable="1" allow-none="1" scope="async" gs:managed-name="destroyNotify" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24659">a function which gets called to free @data, or %NULL</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify" gs:managed-name="DestroyNotify" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="func" transfer-ownership="none" nullable="1" allow-none="1" scope="notified" closure="1" destroy="2" gs:managed-name="func" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24657">the #GTranslateFunc, or %NULL</doc>
            <type name="TranslateFunc" c:type="GTranslateFunc" gs:managed-name="TranslateFunc" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_translation_domain" c:identifier="g_option_context_set_translation_domain" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="SetTranslationDomain">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24677">A convenience function to use gettext() for translating
user-visible strings.</doc>
        <source-position filename="goption.h" line="339" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24679">a #GOptionContext</doc>
            <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none" gs:managed-name="domain" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24680">the domain to use</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="domain" transfer-ownership="none" gs:managed-name="domain" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24680">the domain to use</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <constructor name="new" c:identifier="g_option_context_new" version="2.6" introspectable="1" gs:custom-constructor="private" gs:dll-name="glib-2.0" gs:managed-name="New">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24442">Creates a new option context.

The @parameter_string can serve multiple purposes. It can be used
to add descriptions for "rest" arguments, which are not parsed by
the #GOptionContext, typically something like "FILES" or
"FILE1 FILE2...". If you are using #G_OPTION_REMAINING for
collecting "rest" arguments, GLib handles this automatically by
using the @arg_description of the corresponding #GOptionEntry in
the usage summary.

Another usage is to give a short summary of the program
functionality, like " - frob the strings", which will be displayed
in the same line as the usage. For a longer description of the
program functionality that should be displayed as a paragraph
below the usage line, use g_option_context_set_summary().

Note that the @parameter_string is translated using the
function set with g_option_context_set_translate_func(), so
it should normally be passed untranslated.</doc>
        <source-position filename="goption.h" line="290" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24468">a newly created #GOptionContext, which must be
   freed with g_option_context_free() after use.</doc>
          <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="parameter_string" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="parameterString" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24444">a string which is displayed in
   the first line of `--help` output, after the usage summary
   `programname [OPTION...]`</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="parameter_string" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="parameterString" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24444">a string which is displayed in
   the first line of `--help` output, after the usage summary
   `programname [OPTION...]`</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
    </record>
    <record name="OptionEntry" c:type="GOptionEntry" gs:managed-name="OptionEntry">
      <doc xml:space="preserve" filename="goption.h" line="216">A GOptionEntry struct defines a single option. To have an effect, they
must be added to a #GOptionGroup with g_option_context_add_main_entries()
or g_option_group_add_entries().</doc>
      <source-position filename="goption.h" line="269" />
      <field name="long_name" writable="1" gs:managed-name="LongName">
        <doc xml:space="preserve" filename="goption.h" line="218">The long name of an option can be used to specify it
    in a commandline as `--long_name`. Every option must have a
    long name. To resolve conflicts if multiple option groups contain
    the same long name, it is also possible to specify the option as
    `--groupname-long_name`.</doc>
        <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </field>
      <field name="short_name" writable="1" gs:managed-name="ShortName">
        <doc xml:space="preserve" filename="goption.h" line="223">If an option has a short name, it can be specified
    `-short_name` in a commandline. @short_name must be  a printable
    ASCII character different from '-', or zero if the option has no
    short name.</doc>
        <type name="gchar" c:type="gchar" gs:managed-name="System.SByte" />
      </field>
      <field name="flags" writable="1" gs:managed-name="Flags">
        <doc xml:space="preserve" filename="goption.h" line="227">Flags from #GOptionFlags</doc>
        <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
      </field>
      <field name="arg" writable="1" gs:managed-name="Arg">
        <doc xml:space="preserve" filename="goption.h" line="228">The type of the option, as a #GOptionArg</doc>
        <type name="OptionArg" c:type="GOptionArg" gs:managed-name="OptionArg" />
      </field>
      <field name="arg_data" writable="1" gs:managed-name="ArgData">
        <doc xml:space="preserve" filename="goption.h" line="229">If the @arg type is %G_OPTION_ARG_CALLBACK, then @arg_data
    must point to a #GOptionArgFunc callback function, which will be
    called to handle the extra argument. Otherwise, @arg_data is a
    pointer to a location to store the value, the required type of
    the location depends on the @arg type:
    - %G_OPTION_ARG_NONE: %gboolean
    - %G_OPTION_ARG_STRING: %gchar*
    - %G_OPTION_ARG_INT: %gint
    - %G_OPTION_ARG_FILENAME: %gchar*
    - %G_OPTION_ARG_STRING_ARRAY: %gchar**
    - %G_OPTION_ARG_FILENAME_ARRAY: %gchar**
    - %G_OPTION_ARG_DOUBLE: %gdouble
    If @arg type is %G_OPTION_ARG_STRING or %G_OPTION_ARG_FILENAME,
    the location will contain a newly allocated string if the option
    was given. That string needs to be freed by the callee using g_free().
    Likewise if @arg type is %G_OPTION_ARG_STRING_ARRAY or
    %G_OPTION_ARG_FILENAME_ARRAY, the data should be freed using g_strfreev().</doc>
        <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
      </field>
      <field name="description" writable="1" gs:managed-name="Description">
        <doc xml:space="preserve" filename="goption.h" line="246">the description for the option in `--help`
    output. The @description is translated using the @translate_func
    of the group, see g_option_group_set_translation_domain().</doc>
        <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </field>
      <field name="arg_description" writable="1" gs:managed-name="ArgDescription">
        <doc xml:space="preserve" filename="goption.h" line="249">The placeholder to use for the extra argument parsed
    by the option in `--help` output. The @arg_description is translated
    using the @translate_func of the group, see
    g_option_group_set_translation_domain().</doc>
        <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </field>
    </record>
    <enumeration name="OptionError" c:type="GOptionError" glib:error-domain="g-option-context-error-quark" gs:managed-name="OptionError">
      <doc xml:space="preserve" filename="goption.h" line="196">Error codes returned by option parsing.</doc>
      <source-position filename="goption.h" line="211" />
      <member name="unknown_option" value="0" c:identifier="G_OPTION_ERROR_UNKNOWN_OPTION" gs:managed-name="UnknownOption">
        <doc xml:space="preserve" filename="goption.h" line="198">An option was not known to the parser.
 This error will only be reported, if the parser hasn't been instructed
 to ignore unknown options, see g_option_context_set_ignore_unknown_options().</doc>
      </member>
      <member name="bad_value" value="1" c:identifier="G_OPTION_ERROR_BAD_VALUE" gs:managed-name="BadValue">
        <doc xml:space="preserve" filename="goption.h" line="201">A value couldn't be parsed.</doc>
      </member>
      <member name="failed" value="2" c:identifier="G_OPTION_ERROR_FAILED" gs:managed-name="Failed">
        <doc xml:space="preserve" filename="goption.h" line="202">A #GOptionArgFunc callback failed.</doc>
      </member>
      <gs:managed-property name="get_quark" gs:dll-name="glib-2.0" gs:managed-name="Quark">
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="Quark" c:type="GQuark" gs:managed-name="Quark" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_quark" c:identifier="g_option_error_quark" gs:dll-name="glib-2.0" gs:managed-name="GetQuark" gs:property-getter-for="Quark" gs:access-modifiers="private">
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="Quark" c:type="GQuark" gs:managed-name="Quark" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </enumeration>
    <callback name="OptionErrorFunc" c:type="GOptionErrorFunc" throws="1" gs:dll-name="glib-2.0" gs:managed-name="OptionErrorFunc">
      <doc xml:space="preserve" filename="goption.h" line="172">The type of function to be used as callback when a parse error occurs.</doc>
      <source-position filename="goption.h" line="182" />
      <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
        <type name="none" c:type="void" gs:managed-name="System.Void" />
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="174">The active #GOptionContext</doc>
          <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
        </parameter>
        <parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="175">The group to which the function belongs</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" closure="2" gs:managed-name="data" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="176">User data added to the #GOptionGroup containing the option when it
 was created with g_option_group_new()</doc>
          <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
        </parameter>
        <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
          <doc>return location for a #GError</doc>
          <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
        </gs:error-parameter>
      </parameters>
      <gs:managed-parameters>
        <parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="174">The active #GOptionContext</doc>
          <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
        </parameter>
        <parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="175">The group to which the function belongs</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </parameter>
      </gs:managed-parameters>
    </callback>
    <bitfield name="OptionFlags" c:type="GOptionFlags" gs:managed-name="OptionFlags">
      <doc xml:space="preserve" filename="goption.h" line="54">Flags which modify individual options.</doc>
      <source-position filename="goption.h" line="91" />
      <member name="none" value="0" c:identifier="G_OPTION_FLAG_NONE" version="2.42" gs:managed-name="None">
        <doc xml:space="preserve" filename="goption.h" line="56">No flags.</doc>
      </member>
      <member name="hidden" value="1" c:identifier="G_OPTION_FLAG_HIDDEN" gs:managed-name="Hidden">
        <doc xml:space="preserve" filename="goption.h" line="57">The option doesn't appear in `--help` output.</doc>
      </member>
      <member name="in_main" value="2" c:identifier="G_OPTION_FLAG_IN_MAIN" gs:managed-name="InMain">
        <doc xml:space="preserve" filename="goption.h" line="58">The option appears in the main section of the
    `--help` output, even if it is defined in a group.</doc>
      </member>
      <member name="reverse" value="4" c:identifier="G_OPTION_FLAG_REVERSE" gs:managed-name="Reverse">
        <doc xml:space="preserve" filename="goption.h" line="60">For options of the %G_OPTION_ARG_NONE kind, this
    flag indicates that the sense of the option is reversed.</doc>
      </member>
      <member name="no_arg" value="8" c:identifier="G_OPTION_FLAG_NO_ARG" version="2.8" gs:managed-name="NoArg">
        <doc xml:space="preserve" filename="goption.h" line="62">For options of the %G_OPTION_ARG_CALLBACK kind,
    this flag indicates that the callback does not take any argument
    (like a %G_OPTION_ARG_NONE option).</doc>
      </member>
      <member name="filename" value="16" c:identifier="G_OPTION_FLAG_FILENAME" version="2.8" gs:managed-name="Filename">
        <doc xml:space="preserve" filename="goption.h" line="65">For options of the %G_OPTION_ARG_CALLBACK
    kind, this flag indicates that the argument should be passed to the
    callback in the GLib filename encoding rather than UTF-8.</doc>
      </member>
      <member name="optional_arg" value="32" c:identifier="G_OPTION_FLAG_OPTIONAL_ARG" version="2.8" gs:managed-name="OptionalArg">
        <doc xml:space="preserve" filename="goption.h" line="68">For options of the %G_OPTION_ARG_CALLBACK
    kind, this flag indicates that the argument supply is optional.
    If no argument is given then data of %GOptionParseFunc will be
    set to NULL.</doc>
      </member>
      <member name="no_alias" value="64" c:identifier="G_OPTION_FLAG_NOALIAS" version="2.8" gs:managed-name="NoAlias">
        <doc xml:space="preserve" filename="goption.h" line="72">This flag turns off the automatic conflict
    resolution which prefixes long option names with `groupname-` if
    there is a conflict. This option should only be used in situations
    where aliasing is necessary to model some legacy commandline interface.
    It is not safe to use this option, unless all option groups are under
    your direct control.</doc>
      </member>
    </bitfield>
    <record name="OptionGroup" c:type="GOptionGroup" glib:type-name="GOptionGroup" glib:get-type="g_option_group_get_type" c:symbol-prefix="option_group" gs:managed-name="OptionGroup">
      <doc xml:space="preserve" filename="goption.h" line="40">A `GOptionGroup` struct defines the options in a single
group. The struct has only private fields and should not be directly accessed.

All options in a group share the same translation function. Libraries which
need to parse commandline options are expected to provide a function for
getting a `GOptionGroup` holding their options, which
the application can then add to its #GOptionContext.</doc>
      <source-position filename="goption.h" line="51" />
      <constructor name="new" c:identifier="g_option_group_new" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="New" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24712">Creates a new #GOptionGroup.</doc>
        <source-position filename="goption.h" line="356" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24728">a newly created option group. It should be added
  to a #GOptionContext or freed with g_option_group_unref().</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none" gs:managed-name="name" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24714">the name for the option group, this is used to provide
  help for the options in this group with `--help-`@name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="description" transfer-ownership="none" gs:managed-name="description" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24716">a description for this group to be shown in
  `--help`. This string is translated using the translation
  domain or translation function of the group</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="help_description" transfer-ownership="none" gs:managed-name="helpDescription" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24719">a description for the `--help-`@name option.
  This string is translated using the translation domain or translation function
  of the group</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="userData" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24722">user data that will be passed to the pre- and post-parse hooks,
  the error hook and to callbacks of %G_OPTION_ARG_CALLBACK options, or %NULL</doc>
            <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
          <parameter name="destroy" transfer-ownership="none" nullable="1" allow-none="1" scope="async" gs:managed-name="destroy" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24724">a function that will be called to free @user_data, or %NULL</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify" gs:managed-name="DestroyNotify" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="name" transfer-ownership="none" gs:managed-name="name" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24714">the name for the option group, this is used to provide
  help for the options in this group with `--help-`@name</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="description" transfer-ownership="none" gs:managed-name="description" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24716">a description for this group to be shown in
  `--help`. This string is translated using the translation
  domain or translation function of the group</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="help_description" transfer-ownership="none" gs:managed-name="helpDescription" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24719">a description for the `--help-`@name option.
  This string is translated using the translation domain or translation function
  of the group</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="user_data" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="userData" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24722">user data that will be passed to the pre- and post-parse hooks,
  the error hook and to callbacks of %G_OPTION_ARG_CALLBACK options, or %NULL</doc>
            <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
          <parameter name="destroy" transfer-ownership="none" nullable="1" allow-none="1" scope="async" gs:managed-name="destroy" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24724">a function that will be called to free @user_data, or %NULL</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify" gs:managed-name="DestroyNotify" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
      <method name="add_entries" c:identifier="g_option_group_add_entries" version="2.6" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="AddEntries">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24689">Adds the options specified in @entries to @group.</doc>
        <source-position filename="goption.h" line="375" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24691">a #GOptionGroup</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="entries" transfer-ownership="none" gs:managed-name="entries" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24692">a %NULL-terminated array of #GOptionEntrys</doc>
            <array c:type="const GOptionEntry*" zero-terminated="1" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="OptionEntry" c:type="GOptionEntry" gs:managed-name="OptionEntry" />
            </array>
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="entries" transfer-ownership="none" gs:managed-name="entries" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24692">a %NULL-terminated array of #GOptionEntrys</doc>
            <array c:type="const GOptionEntry*" zero-terminated="1" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="OptionEntry" c:type="GOptionEntry" gs:managed-name="OptionEntry" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="ref" c:identifier="g_option_group_ref" version="2.44" gs:dll-name="glib-2.0" gs:managed-name="Ref" gs:special-func="ref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24734">Increments the reference count of @group by one.</doc>
        <source-position filename="goption.h" line="371" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="24740">a #GOptionGroup</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24736">a #GOptionGroup</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="set_parse_hooks" c:identifier="g_option_group_set_parse_hooks" version="2.6" introspectable="1" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="SetParseHooks">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24760">Associates two functions with @group which will be called
from g_option_context_parse() before the first option is parsed
and after the last option has been parsed, respectively.

Note that the user data to be passed to @pre_parse_func and
@post_parse_func can be specified when constructing the group
with g_option_group_new().</doc>
        <source-position filename="goption.h" line="362" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24762">a #GOptionGroup</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="pre_parse_func" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="preParseFunc" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24763">a function to call before parsing, or %NULL</doc>
            <type name="OptionParseFunc" c:type="GOptionParseFunc" gs:managed-name="OptionParseFunc" />
          </parameter>
          <parameter name="post_parse_func" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="postParseFunc" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24764">a function to call after parsing, or %NULL</doc>
            <type name="OptionParseFunc" c:type="GOptionParseFunc" gs:managed-name="OptionParseFunc" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="pre_parse_func" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="preParseFunc" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24763">a function to call before parsing, or %NULL</doc>
            <type name="OptionParseFunc" c:type="GOptionParseFunc" gs:managed-name="OptionParseFunc" />
          </parameter>
          <parameter name="post_parse_func" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="postParseFunc" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24764">a function to call after parsing, or %NULL</doc>
            <type name="OptionParseFunc" c:type="GOptionParseFunc" gs:managed-name="OptionParseFunc" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_translate_func" c:identifier="g_option_group_set_translate_func" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetTranslateFunc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24778">Sets the function which is used to translate user-visible strings,
for `--help` output. Different groups can use different
#GTranslateFuncs. If @func is %NULL, strings are not translated.

If you are using gettext(), you only need to set the translation
domain, see g_option_group_set_translation_domain().</doc>
        <source-position filename="goption.h" line="378" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24780">a #GOptionGroup</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="func" transfer-ownership="none" nullable="1" allow-none="1" scope="notified" closure="1" destroy="2" gs:managed-name="func" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24781">the #GTranslateFunc, or %NULL</doc>
            <type name="TranslateFunc" c:type="GTranslateFunc" gs:managed-name="TranslateFunc" />
          </parameter>
          <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="data" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24782">user data to pass to @func, or %NULL</doc>
            <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
          </parameter>
          <parameter name="destroy_notify" transfer-ownership="none" nullable="1" allow-none="1" scope="async" gs:managed-name="destroyNotify" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24783">a function which gets called to free @data, or %NULL</doc>
            <type name="DestroyNotify" c:type="GDestroyNotify" gs:managed-name="DestroyNotify" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="func" transfer-ownership="none" nullable="1" allow-none="1" scope="notified" closure="1" destroy="2" gs:managed-name="func" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24781">the #GTranslateFunc, or %NULL</doc>
            <type name="TranslateFunc" c:type="GTranslateFunc" gs:managed-name="TranslateFunc" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="set_translation_domain" c:identifier="g_option_group_set_translation_domain" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="SetTranslationDomain">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24796">A convenience function to use gettext() for translating
user-visible strings.</doc>
        <source-position filename="goption.h" line="383" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24798">a #GOptionGroup</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="domain" transfer-ownership="none" gs:managed-name="domain" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24799">the domain to use</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="domain" transfer-ownership="none" gs:managed-name="domain" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24799">the domain to use</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="unref" c:identifier="g_option_group_unref" version="2.44" gs:dll-name="glib-2.0" gs:managed-name="Unref" gs:special-func="unref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="24808">Decrements the reference count of @group by one.
If the reference count drops to 0, the @group will be freed.
and all memory allocated by the @group is released.</doc>
        <source-position filename="goption.h" line="373" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="24810">a #GOptionGroup</doc>
            <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="g_option_group_get_type" gs:access-modifiers="private" gs:dll-name="gobject-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" gs:managed-name="GISharp.Lib.GObject.GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </record>
    <callback name="OptionParseFunc" c:type="GOptionParseFunc" throws="1" gs:dll-name="glib-2.0" gs:managed-name="OptionParseFunc">
      <doc xml:space="preserve" filename="goption.h" line="154">The type of function that can be called before and after parsing.</doc>
      <source-position filename="goption.h" line="167" />
      <return-value transfer-ownership="none" gs:managed-name="ret" skip="1" direction="in">
        <doc xml:space="preserve" filename="goption.h" line="164">%TRUE if the function completed successfully, %FALSE if an error
 occurred, in which case @error should be set with g_set_error()</doc>
        <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="156">The active #GOptionContext</doc>
          <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
        </parameter>
        <parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="157">The group to which the function belongs</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" closure="2" gs:managed-name="data" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="158">User data added to the #GOptionGroup containing the option when it
 was created with g_option_group_new()</doc>
          <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
        </parameter>
        <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
          <doc>return location for a #GError</doc>
          <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
        </gs:error-parameter>
      </parameters>
      <gs:managed-parameters>
        <parameter name="context" transfer-ownership="none" gs:managed-name="context" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="156">The active #GOptionContext</doc>
          <type name="OptionContext" c:type="GOptionContext*" gs:managed-name="OptionContext" gs:is-pointer="1" />
        </parameter>
        <parameter name="group" transfer-ownership="none" gs:managed-name="group" direction="in">
          <doc xml:space="preserve" filename="goption.h" line="157">The group to which the function belongs</doc>
          <type name="OptionGroup" c:type="GOptionGroup*" gs:managed-name="OptionGroup" gs:is-pointer="1" />
        </parameter>
      </gs:managed-parameters>
    </callback>
    <enumeration name="SeekType" c:type="GSeekType" gs:managed-name="SeekType">
      <doc xml:space="preserve" filename="glib-2.0.c" line="1816">An enumeration specifying the base position for a
g_io_channel_seek_position() operation.</doc>
      <source-position filename="giochannel.h" line="82" />
      <member name="current" value="0" c:identifier="G_SEEK_CUR" gs:managed-name="Current">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1818">the current position in the file.</doc>
      </member>
      <member name="start" value="1" c:identifier="G_SEEK_SET" gs:managed-name="Start">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1819">the start of the file.</doc>
      </member>
      <member name="end" value="2" c:identifier="G_SEEK_END" gs:managed-name="End">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1820">the end of the file.</doc>
      </member>
    </enumeration>
    <enumeration name="TimeType" c:type="GTimeType" gs:managed-name="TimeType">
      <doc xml:space="preserve" filename="gtimezone.h" line="33">Disambiguates a given time in two ways.

First, specifies if the given time is in universal or local time.

Second, if the time is in local time, specifies if it is local
standard time or local daylight time.  This is important for the case
where the same local time occurs twice (during daylight savings time
transitions, for example).</doc>
      <source-position filename="gtimezone.h" line="53" />
      <member name="standard" value="0" c:identifier="G_TIME_TYPE_STANDARD" gs:managed-name="Standard">
        <doc xml:space="preserve" filename="gtimezone.h" line="35">the time is in local standard time</doc>
      </member>
      <member name="daylight" value="1" c:identifier="G_TIME_TYPE_DAYLIGHT" gs:managed-name="Daylight">
        <doc xml:space="preserve" filename="gtimezone.h" line="36">the time is in local daylight time</doc>
      </member>
      <member name="universal" value="2" c:identifier="G_TIME_TYPE_UNIVERSAL" gs:managed-name="Universal">
        <doc xml:space="preserve" filename="gtimezone.h" line="37">the time is in UTC</doc>
      </member>
    </enumeration>
    <record name="TimeVal" c:type="GTimeVal" deprecated="1" deprecated-version="2.62" gs:managed-name="TimeVal">
      <doc xml:space="preserve" filename="glib-2.0.c" line="2087">Represents a precise time, with seconds and microseconds.
Similar to the struct timeval returned by the gettimeofday()
UNIX system call.

GLib is attempting to unify around the use of 64-bit integers to
represent microsecond-precision time. As such, this type will be
removed from a future version of GLib. A consequence of using `glong` for
`tv_sec` is that on 32-bit systems `GTimeVal` is subject to the year 2038
problem.</doc>
      <doc-deprecated xml:space="preserve">Use #GDateTime or #guint64 instead.</doc-deprecated>
      <source-position filename="gtypes.h" line="551" />
      <field name="tv_sec" writable="1" gs:managed-name="TvSec">
        <doc xml:space="preserve" filename="glib-2.0.c" line="2089">seconds</doc>
        <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
      </field>
      <field name="tv_usec" writable="1" gs:managed-name="TvUsec">
        <doc xml:space="preserve" filename="glib-2.0.c" line="2090">microseconds</doc>
        <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
      </field>
      <method name="add" c:identifier="g_time_val_add" deprecated="1" deprecated-version="2.62" gs:dll-name="glib-2.0" gs:managed-name="Add">
        <doc xml:space="preserve" filename="glib-2.0.c" line="33965">Adds the given number of microseconds to @time_. @microseconds can
also be negative to decrease the value of @time_.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use `guint64` for
   representing microseconds since the epoch, or use #GDateTime.</doc-deprecated>
        <source-position filename="gtimer.h" line="67" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="time_" transfer-ownership="none" gs:managed-name="time" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33967">a #GTimeVal</doc>
            <type name="TimeVal" c:type="GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="microseconds" transfer-ownership="none" gs:managed-name="microseconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33968">number of microseconds to add to @time</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="microseconds" transfer-ownership="none" gs:managed-name="microseconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33968">number of microseconds to add to @time</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_iso8601" c:identifier="g_time_val_to_iso8601" version="2.12" deprecated="1" deprecated-version="2.62" gs:dll-name="glib-2.0" gs:managed-name="ToIso8601">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34008">Converts @time_ into an RFC 3339 encoded string, relative to the
Coordinated Universal Time (UTC). This is one of the many formats
allowed by ISO 8601.

ISO 8601 allows a large number of date/time formats, with or without
punctuation and optional elements. The format returned by this function
is a complete date and time, with optional punctuation included, the
UTC time zone represented as "Z", and the @tv_usec part included if
and only if it is nonzero, i.e. either
"YYYY-MM-DDTHH:MM:SSZ" or "YYYY-MM-DDTHH:MM:SS.fffffZ".

This corresponds to the Internet date/time format defined by
[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt),
and to either of the two most-precise formats defined by
the W3C Note
[Date and Time Formats](http://www.w3.org/TR/NOTE-datetime-19980827).
Both of these documents are profiles of ISO 8601.

Use g_date_time_format() or g_strdup_printf() if a different
variation of ISO 8601 format is required.

If @time_ represents a date which is too large to fit into a `struct tm`,
%NULL will be returned. This is platform dependent. Note also that since
`GTimeVal` stores the number of seconds as a `glong`, on 32-bit systems it
is subject to the year 2038 problem. Accordingly, since GLib 2.62, this
function has been deprecated. Equivalent functionality is available using:
|[
GDateTime *dt = g_date_time_new_from_unix_utc (time_val);
iso8601_string = g_date_time_format_iso8601 (dt);
g_date_time_unref (dt);
]|

The return value of g_time_val_to_iso8601() has been nullable since GLib
2.54; before then, GLib would crash under the same conditions.</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_format_iso8601(dt) instead.</doc-deprecated>
        <source-position filename="gtimer.h" line="73" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34047">a newly allocated string containing an ISO 8601 date,
   or %NULL if @time_ was too large</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="time_" transfer-ownership="none" gs:managed-name="time" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34010">a #GTimeVal</doc>
            <type name="TimeVal" c:type="GTimeVal*" gs:managed-name="TimeVal" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="from_iso8601" c:identifier="g_time_val_from_iso8601" version="2.12" deprecated="1" deprecated-version="2.62" gs:dll-name="glib-2.0" gs:managed-name="TryFromIso8601">
        <doc xml:space="preserve" filename="glib-2.0.c" line="33978">Converts a string containing an ISO 8601 encoded date and time
to a #GTimeVal and puts it into @time_.

@iso_date must include year, month, day, hours, minutes, and
seconds. It can optionally include fractions of a second and a time
zone indicator. (In the absence of any time zone indication, the
timestamp is assumed to be in local time.)

Any leading or trailing space in @iso_date is ignored.

This function was deprecated, along with #GTimeVal itself, in GLib 2.62.
Equivalent functionality is available using code like:
|[
GDateTime *dt = g_date_time_new_from_iso8601 (iso8601_string, NULL);
gint64 time_val = g_date_time_to_unix (dt);
g_date_time_unref (dt);
]|</doc>
        <doc-deprecated xml:space="preserve">#GTimeVal is not year-2038-safe. Use
   g_date_time_new_from_iso8601() instead.</doc-deprecated>
        <source-position filename="gtimer.h" line="70" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34001">%TRUE if the conversion was successful.</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <parameter name="iso_date" transfer-ownership="none" gs:managed-name="isoDate" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33980">an ISO 8601 encoded date string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="time_" direction="out" caller-allocates="1" transfer-ownership="none" gs:managed-name="time">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33981">a #GTimeVal</doc>
            <type name="TimeVal" c:type="GTimeVal*" gs:managed-name="TimeVal" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="iso_date" transfer-ownership="none" gs:managed-name="isoDate" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33980">an ISO 8601 encoded date string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="time_" direction="out" caller-allocates="1" transfer-ownership="none" gs:managed-name="time">
            <doc xml:space="preserve" filename="glib-2.0.c" line="33981">a #GTimeVal</doc>
            <type name="TimeVal" c:type="GTimeVal*" gs:managed-name="TimeVal" />
          </parameter>
        </gs:managed-parameters>
      </function>
    </record>
    <record name="TimeZone" c:type="GTimeZone" version="2.26" glib:type-name="GTimeZone" glib:get-type="g_time_zone_get_type" c:symbol-prefix="time_zone" gs:managed-name="TimeZone">
      <doc xml:space="preserve" filename="glib-2.0.c" line="2106">#GTimeZone is an opaque structure whose members cannot be accessed
directly.</doc>
      <source-position filename="gtimezone.h" line="31" />
      <constructor name="new" c:identifier="g_time_zone_new" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="New">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34179">Creates a #GTimeZone corresponding to @identifier.

@identifier can either be an RFC3339/ISO 8601 time offset or
something that would pass as a valid value for the `TZ` environment
variable (including %NULL).

In Windows, @identifier can also be the unlocalized name of a time
zone for standard time, for example "Pacific Standard Time".

Valid RFC3339 time offsets are `"Z"` (for UTC) or
`"±hh:mm"`.  ISO 8601 additionally specifies
`"±hhmm"` and `"±hh"`.  Offsets are
time values to be added to Coordinated Universal Time (UTC) to get
the local time.

In UNIX, the `TZ` environment variable typically corresponds
to the name of a file in the zoneinfo database, an absolute path to a file
somewhere else, or a string in
"std offset [dst [offset],start[/time],end[/time]]" (POSIX) format.
There  are  no spaces in the specification. The name of standard
and daylight savings time zone must be three or more alphabetic
characters. Offsets are time values to be added to local time to
get Coordinated Universal Time (UTC) and should be
`"[±]hh[[:]mm[:ss]]"`.  Dates are either
`"Jn"` (Julian day with n between 1 and 365, leap
years not counted), `"n"` (zero-based Julian day
with n between 0 and 365) or `"Mm.w.d"` (day d
(0 &lt;= d &lt;= 6) of week w (1 &lt;= w &lt;= 5) of month m (1 &lt;= m &lt;= 12), day
0 is a Sunday).  Times are in local wall clock time, the default is
02:00:00.

In Windows, the "tzn[+|–]hh[:mm[:ss]][dzn]" format is used, but also
accepts POSIX format.  The Windows format uses US rules for all time
zones; daylight savings time is 60 minutes behind the standard time
with date and time of change taken from Pacific Standard Time.
Offsets are time values to be added to the local time to get
Coordinated Universal Time (UTC).

g_time_zone_new_local() calls this function with the value of the
`TZ` environment variable. This function itself is independent of
the value of `TZ`, but if @identifier is %NULL then `/etc/localtime`
will be consulted to discover the correct time zone on UNIX and the
registry will be consulted or GetTimeZoneInformation() will be used
to get the local time zone on Windows.

If intervals are not available, only time zone rules from `TZ`
environment variable or other means, then they will be computed
from year 1900 to 2037.  If the maximum year for the rules is
available and it is greater than 2037, then it will followed
instead.

See
[RFC3339 §5.6](http://tools.ietf.org/html/rfc3339#section-5.6)
for a precise definition of valid RFC3339 time offsets
(the `time-offset` expansion) and ISO 8601 for the
full list of valid time offsets.  See
[The GNU C Library manual](http://www.gnu.org/s/libc/manual/html_node/TZ-Variable.html)
for an explanation of the possible
values of the `TZ` environment variable. See
[Microsoft Time Zone Index Values](http://msdn.microsoft.com/en-us/library/ms912391%28v=winembedded.11%29.aspx)
for the list of time zones on Windows.

You should release the return value by calling g_time_zone_unref()
when you are done with it.</doc>
        <source-position filename="gtimezone.h" line="56" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34248">the requested timezone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="identifier" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34181">a timezone identifier</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="identifier" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="identifier" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34181">a timezone identifier</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
      <gs:managed-property name="get_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Local">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34253">Creates a #GTimeZone corresponding to local time.  The local time
zone may change between invocations to this function; for example,
if the system administrator changes it.

This is equivalent to calling g_time_zone_new() with the value of
the `TZ` environment variable (including the possibility of %NULL).

You should release the return value by calling g_time_zone_unref()
when you are done with it.</doc>
        <source-position filename="gtimezone.h" line="60" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34266">the local timezone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_local" c:identifier="g_time_zone_new_local" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetLocal" gs:property-getter-for="Local" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34253">Creates a #GTimeZone corresponding to local time.  The local time
zone may change between invocations to this function; for example,
if the system administrator changes it.

This is equivalent to calling g_time_zone_new() with the value of
the `TZ` environment variable (including the possibility of %NULL).

You should release the return value by calling g_time_zone_unref()
when you are done with it.</doc>
        <source-position filename="gtimezone.h" line="60" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34266">the local timezone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
      <constructor name="new_offset" c:identifier="g_time_zone_new_offset" version="2.58" gs:dll-name="glib-2.0" gs:managed-name="NewOffset">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34271">Creates a #GTimeZone corresponding to the given constant offset from UTC,
in seconds.

This is equivalent to calling g_time_zone_new() with a string in the form
`[+|-]hh[:mm[:ss]]`.</doc>
        <source-position filename="gtimezone.h" line="62" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34281">a timezone at the given offset from UTC</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34273">offset to UTC, in seconds</doc>
            <type name="gint32" c:type="gint32" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="seconds" transfer-ownership="none" gs:managed-name="seconds" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34273">offset to UTC, in seconds</doc>
            <type name="gint32" c:type="gint32" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
      <gs:managed-property name="get_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Utc">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34286">Creates a #GTimeZone corresponding to UTC.

This is equivalent to calling g_time_zone_new() with a value like
"Z", "UTC", "+00", etc.

You should release the return value by calling g_time_zone_unref()
when you are done with it.</doc>
        <source-position filename="gtimezone.h" line="58" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34297">the universal timezone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </gs:managed-property>
      <function name="get_utc" c:identifier="g_time_zone_new_utc" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetUtc" gs:property-getter-for="Utc" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34286">Creates a #GTimeZone corresponding to UTC.

This is equivalent to calling g_time_zone_new() with a value like
"Z", "UTC", "+00", etc.

You should release the return value by calling g_time_zone_unref()
when you are done with it.</doc>
        <source-position filename="gtimezone.h" line="58" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34297">the universal timezone</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
      <method name="adjust_time" c:identifier="g_time_zone_adjust_time" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="AdjustTime">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34055">Finds an interval within @tz that corresponds to the given @time_,
possibly adjusting @time_ if required to fit into an interval.
The meaning of @time_ depends on @type.

This function is similar to g_time_zone_find_interval(), with the
difference that it always succeeds (by making the adjustments
described below).

In any of the cases where g_time_zone_find_interval() succeeds then
this function returns the same value, without modifying @time_.

This function may, however, modify @time_ in order to deal with
non-existent times.  If the non-existent local @time_ of 02:30 were
requested on March 14th 2010 in Toronto then this function would
adjust @time_ to be 03:00 and return the interval containing the
adjusted time.</doc>
        <source-position filename="gtimezone.h" line="75" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34078">the interval containing @time_, never -1</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34057">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34058">the #GTimeType of @time_</doc>
            <type name="TimeType" c:type="GTimeType" gs:managed-name="TimeType" />
          </parameter>
          <parameter name="time_" transfer-ownership="none" gs:managed-name="time" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34059">a pointer to a number of seconds since January 1, 1970</doc>
            <type name="gint64" c:type="gint64*" gs:managed-name="System.Int64" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34058">the #GTimeType of @time_</doc>
            <type name="TimeType" c:type="GTimeType" gs:managed-name="TimeType" />
          </parameter>
          <parameter name="time_" transfer-ownership="none" gs:managed-name="time" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34059">a pointer to a number of seconds since January 1, 1970</doc>
            <type name="gint64" c:type="gint64*" gs:managed-name="System.Int64" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="find_interval" c:identifier="g_time_zone_find_interval" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="FindInterval">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34083">Finds an interval within @tz that corresponds to the given @time_.
The meaning of @time_ depends on @type.

If @type is %G_TIME_TYPE_UNIVERSAL then this function will always
succeed (since universal time is monotonic and continuous).

Otherwise @time_ is treated as local time.  The distinction between
%G_TIME_TYPE_STANDARD and %G_TIME_TYPE_DAYLIGHT is ignored except in
the case that the given @time_ is ambiguous.  In Toronto, for example,
01:30 on November 7th 2010 occurred twice (once inside of daylight
savings time and the next, an hour later, outside of daylight savings
time).  In this case, the different value of @type would result in a
different interval being returned.

It is still possible for this function to fail.  In Toronto, for
example, 02:00 on March 14th 2010 does not exist (due to the leap
forward to begin daylight savings time).  -1 is returned in that
case.</doc>
        <source-position filename="gtimezone.h" line="70" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34108">the interval containing @time_, or -1 in case of failure</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34085">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34086">the #GTimeType of @time_</doc>
            <type name="TimeType" c:type="GTimeType" gs:managed-name="TimeType" />
          </parameter>
          <parameter name="time_" transfer-ownership="none" gs:managed-name="time" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34087">a number of seconds since January 1, 1970</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34086">the #GTimeType of @time_</doc>
            <type name="TimeType" c:type="GTimeType" gs:managed-name="TimeType" />
          </parameter>
          <parameter name="time_" transfer-ownership="none" gs:managed-name="time" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34087">a number of seconds since January 1, 1970</doc>
            <type name="gint64" c:type="gint64" gs:managed-name="System.Int64" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_abbreviation" c:identifier="g_time_zone_get_abbreviation" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetAbbreviation">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34113">Determines the time zone abbreviation to be used during a particular
@interval of time in the time zone @tz.

For example, in Toronto this is currently "EST" during the winter
months and "EDT" during the summer months when daylight savings time
is in effect.</doc>
        <source-position filename="gtimezone.h" line="80" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34125">the time zone abbreviation, which belongs to @tz</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34115">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none" gs:managed-name="interval" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34116">an interval within the timezone</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="interval" transfer-ownership="none" gs:managed-name="interval" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34116">an interval within the timezone</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <gs:managed-property name="get_identifier" version="2.58" gs:dll-name="glib-2.0" gs:managed-name="Identifier">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34130">Get the identifier of this #GTimeZone, as passed to g_time_zone_new().
If the identifier passed at construction time was not recognised, `UTC` will
be returned. If it was %NULL, the identifier of the local timezone at
construction time will be returned.

The identifier will be returned in the same format as provided at
construction time: if provided as a time offset, that will be returned by
this function.</doc>
        <source-position filename="gtimezone.h" line="89" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34143">identifier for this timezone</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34132">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </gs:managed-property>
      <method name="get_identifier" c:identifier="g_time_zone_get_identifier" version="2.58" gs:dll-name="glib-2.0" gs:managed-name="GetIdentifier" gs:property-getter-for="Identifier" gs:access-modifiers="private">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34130">Get the identifier of this #GTimeZone, as passed to g_time_zone_new().
If the identifier passed at construction time was not recognised, `UTC` will
be returned. If it was %NULL, the identifier of the local timezone at
construction time will be returned.

The identifier will be returned in the same format as provided at
construction time: if provided as a time offset, that will be returned by
this function.</doc>
        <source-position filename="gtimezone.h" line="89" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34143">identifier for this timezone</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34132">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="get_offset" c:identifier="g_time_zone_get_offset" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="GetOffset">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34148">Determines the offset to UTC in effect during a particular @interval
of time in the time zone @tz.

The offset is the number of seconds that you add to UTC time to
arrive at local time for @tz (ie: negative numbers for time zones
west of GMT, positive numbers for east).</doc>
        <source-position filename="gtimezone.h" line="83" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34160">the number of seconds that should be added to UTC to get the
         local time in @tz</doc>
          <type name="gint32" c:type="gint32" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34150">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none" gs:managed-name="interval" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34151">an interval within the timezone</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="interval" transfer-ownership="none" gs:managed-name="interval" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34151">an interval within the timezone</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_dst" c:identifier="g_time_zone_is_dst" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="IsDst">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34166">Determines if daylight savings time is in effect during a particular
@interval of time in the time zone @tz.</doc>
        <source-position filename="gtimezone.h" line="86" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34174">%TRUE if daylight savings time is in effect</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34168">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="interval" transfer-ownership="none" gs:managed-name="interval" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34169">an interval within the timezone</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="interval" transfer-ownership="none" gs:managed-name="interval" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34169">an interval within the timezone</doc>
            <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="ref" c:identifier="g_time_zone_ref" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Ref" gs:special-func="ref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34302">Increases the reference count on @tz.</doc>
        <source-position filename="gtimezone.h" line="65" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="34308">a new reference to @tz.</doc>
          <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34304">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="unref" c:identifier="g_time_zone_unref" version="2.26" gs:dll-name="glib-2.0" gs:managed-name="Unref" gs:special-func="unref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="34313">Decreases the reference count on @tz.</doc>
        <source-position filename="gtimezone.h" line="67" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="tz" transfer-ownership="none" gs:managed-name="tz" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="34315">a #GTimeZone</doc>
            <type name="TimeZone" c:type="GTimeZone*" gs:managed-name="TimeZone" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="g_time_zone_get_type" gs:access-modifiers="private" gs:dll-name="gobject-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" gs:managed-name="GISharp.Lib.GObject.GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </record>
    <callback name="TranslateFunc" c:type="GTranslateFunc" gs:dll-name="glib-2.0" gs:managed-name="TranslateFunc">
      <doc xml:space="preserve" filename="gtypes.h" line="145">The type of functions which are used to translate user-visible
strings, for &lt;option&gt;--help&lt;/option&gt; output.</doc>
      <source-position filename="gtypes.h" line="157" />
      <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
        <doc xml:space="preserve" filename="gtypes.h" line="154">a translation of the string for the current locale.
 The returned string is owned by GLib and must not be freed.</doc>
        <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
          <doc xml:space="preserve" filename="gtypes.h" line="147">the untranslated string</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </parameter>
        <parameter name="data" transfer-ownership="none" nullable="1" allow-none="1" closure="1" gs:managed-name="data" direction="in">
          <doc xml:space="preserve" filename="gtypes.h" line="148">user data specified when installing the function, e.g.
 in g_option_group_set_translate_func()</doc>
          <type name="gpointer" c:type="gpointer" gs:managed-name="System.IntPtr" gs:is-pointer="1" />
        </parameter>
      </parameters>
      <gs:managed-parameters>
        <parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
          <doc xml:space="preserve" filename="gtypes.h" line="147">the untranslated string</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </parameter>
      </gs:managed-parameters>
    </callback>
    <enumeration name="UnicodeBreakType" c:type="GUnicodeBreakType" gs:managed-name="UnicodeBreakType">
      <doc xml:space="preserve" filename="gunicode.h" line="159">These are the possible line break classifications.

Since new unicode versions may add new types here, applications should be ready
to handle unknown values. They may be regarded as %G_UNICODE_BREAK_UNKNOWN.

See [Unicode Line Breaking Algorithm](http://www.unicode.org/unicode/reports/tr14/).</doc>
      <source-position filename="gunicode.h" line="257" />
      <member name="mandatory" value="0" c:identifier="G_UNICODE_BREAK_MANDATORY" gs:managed-name="Mandatory">
        <doc xml:space="preserve" filename="gunicode.h" line="161">Mandatory Break (BK)</doc>
      </member>
      <member name="carriage_return" value="1" c:identifier="G_UNICODE_BREAK_CARRIAGE_RETURN" gs:managed-name="CarriageReturn">
        <doc xml:space="preserve" filename="gunicode.h" line="162">Carriage Return (CR)</doc>
      </member>
      <member name="line_feed" value="2" c:identifier="G_UNICODE_BREAK_LINE_FEED" gs:managed-name="LineFeed">
        <doc xml:space="preserve" filename="gunicode.h" line="163">Line Feed (LF)</doc>
      </member>
      <member name="combining_mark" value="3" c:identifier="G_UNICODE_BREAK_COMBINING_MARK" gs:managed-name="CombiningMark">
        <doc xml:space="preserve" filename="gunicode.h" line="164">Attached Characters and Combining Marks (CM)</doc>
      </member>
      <member name="surrogate" value="4" c:identifier="G_UNICODE_BREAK_SURROGATE" gs:managed-name="Surrogate">
        <doc xml:space="preserve" filename="gunicode.h" line="165">Surrogates (SG)</doc>
      </member>
      <member name="zero_width_space" value="5" c:identifier="G_UNICODE_BREAK_ZERO_WIDTH_SPACE" gs:managed-name="ZeroWidthSpace">
        <doc xml:space="preserve" filename="gunicode.h" line="166">Zero Width Space (ZW)</doc>
      </member>
      <member name="inseparable" value="6" c:identifier="G_UNICODE_BREAK_INSEPARABLE" gs:managed-name="Inseparable">
        <doc xml:space="preserve" filename="gunicode.h" line="167">Inseparable (IN)</doc>
      </member>
      <member name="non_breaking_glue" value="7" c:identifier="G_UNICODE_BREAK_NON_BREAKING_GLUE" gs:managed-name="NonBreakingGlue">
        <doc xml:space="preserve" filename="gunicode.h" line="168">Non-breaking ("Glue") (GL)</doc>
      </member>
      <member name="contingent" value="8" c:identifier="G_UNICODE_BREAK_CONTINGENT" gs:managed-name="Contingent">
        <doc xml:space="preserve" filename="gunicode.h" line="169">Contingent Break Opportunity (CB)</doc>
      </member>
      <member name="space" value="9" c:identifier="G_UNICODE_BREAK_SPACE" gs:managed-name="Space">
        <doc xml:space="preserve" filename="gunicode.h" line="170">Space (SP)</doc>
      </member>
      <member name="after" value="10" c:identifier="G_UNICODE_BREAK_AFTER" gs:managed-name="After">
        <doc xml:space="preserve" filename="gunicode.h" line="171">Break Opportunity After (BA)</doc>
      </member>
      <member name="before" value="11" c:identifier="G_UNICODE_BREAK_BEFORE" gs:managed-name="Before">
        <doc xml:space="preserve" filename="gunicode.h" line="172">Break Opportunity Before (BB)</doc>
      </member>
      <member name="before_and_after" value="12" c:identifier="G_UNICODE_BREAK_BEFORE_AND_AFTER" gs:managed-name="BeforeAndAfter">
        <doc xml:space="preserve" filename="gunicode.h" line="173">Break Opportunity Before and After (B2)</doc>
      </member>
      <member name="hyphen" value="13" c:identifier="G_UNICODE_BREAK_HYPHEN" gs:managed-name="Hyphen">
        <doc xml:space="preserve" filename="gunicode.h" line="174">Hyphen (HY)</doc>
      </member>
      <member name="non_starter" value="14" c:identifier="G_UNICODE_BREAK_NON_STARTER" gs:managed-name="NonStarter">
        <doc xml:space="preserve" filename="gunicode.h" line="175">Nonstarter (NS)</doc>
      </member>
      <member name="open_punctuation" value="15" c:identifier="G_UNICODE_BREAK_OPEN_PUNCTUATION" gs:managed-name="OpenPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="176">Opening Punctuation (OP)</doc>
      </member>
      <member name="close_punctuation" value="16" c:identifier="G_UNICODE_BREAK_CLOSE_PUNCTUATION" gs:managed-name="ClosePunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="177">Closing Punctuation (CL)</doc>
      </member>
      <member name="quotation" value="17" c:identifier="G_UNICODE_BREAK_QUOTATION" gs:managed-name="Quotation">
        <doc xml:space="preserve" filename="gunicode.h" line="178">Ambiguous Quotation (QU)</doc>
      </member>
      <member name="exclamation" value="18" c:identifier="G_UNICODE_BREAK_EXCLAMATION" gs:managed-name="Exclamation">
        <doc xml:space="preserve" filename="gunicode.h" line="179">Exclamation/Interrogation (EX)</doc>
      </member>
      <member name="ideographic" value="19" c:identifier="G_UNICODE_BREAK_IDEOGRAPHIC" gs:managed-name="Ideographic">
        <doc xml:space="preserve" filename="gunicode.h" line="180">Ideographic (ID)</doc>
      </member>
      <member name="numeric" value="20" c:identifier="G_UNICODE_BREAK_NUMERIC" gs:managed-name="Numeric">
        <doc xml:space="preserve" filename="gunicode.h" line="181">Numeric (NU)</doc>
      </member>
      <member name="infix_separator" value="21" c:identifier="G_UNICODE_BREAK_INFIX_SEPARATOR" gs:managed-name="InfixSeparator">
        <doc xml:space="preserve" filename="gunicode.h" line="182">Infix Separator (Numeric) (IS)</doc>
      </member>
      <member name="symbol" value="22" c:identifier="G_UNICODE_BREAK_SYMBOL" gs:managed-name="Symbol">
        <doc xml:space="preserve" filename="gunicode.h" line="183">Symbols Allowing Break After (SY)</doc>
      </member>
      <member name="alphabetic" value="23" c:identifier="G_UNICODE_BREAK_ALPHABETIC" gs:managed-name="Alphabetic">
        <doc xml:space="preserve" filename="gunicode.h" line="184">Ordinary Alphabetic and Symbol Characters (AL)</doc>
      </member>
      <member name="prefix" value="24" c:identifier="G_UNICODE_BREAK_PREFIX" gs:managed-name="Prefix">
        <doc xml:space="preserve" filename="gunicode.h" line="185">Prefix (Numeric) (PR)</doc>
      </member>
      <member name="postfix" value="25" c:identifier="G_UNICODE_BREAK_POSTFIX" gs:managed-name="Postfix">
        <doc xml:space="preserve" filename="gunicode.h" line="186">Postfix (Numeric) (PO)</doc>
      </member>
      <member name="complex_context" value="26" c:identifier="G_UNICODE_BREAK_COMPLEX_CONTEXT" gs:managed-name="ComplexContext">
        <doc xml:space="preserve" filename="gunicode.h" line="187">Complex Content Dependent (South East Asian) (SA)</doc>
      </member>
      <member name="ambiguous" value="27" c:identifier="G_UNICODE_BREAK_AMBIGUOUS" gs:managed-name="Ambiguous">
        <doc xml:space="preserve" filename="gunicode.h" line="188">Ambiguous (Alphabetic or Ideographic) (AI)</doc>
      </member>
      <member name="unknown" value="28" c:identifier="G_UNICODE_BREAK_UNKNOWN" gs:managed-name="Unknown">
        <doc xml:space="preserve" filename="gunicode.h" line="189">Unknown (XX)</doc>
      </member>
      <member name="next_line" value="29" c:identifier="G_UNICODE_BREAK_NEXT_LINE" gs:managed-name="NextLine">
        <doc xml:space="preserve" filename="gunicode.h" line="190">Next Line (NL)</doc>
      </member>
      <member name="word_joiner" value="30" c:identifier="G_UNICODE_BREAK_WORD_JOINER" gs:managed-name="WordJoiner">
        <doc xml:space="preserve" filename="gunicode.h" line="191">Word Joiner (WJ)</doc>
      </member>
      <member name="hangul_l_jamo" value="31" c:identifier="G_UNICODE_BREAK_HANGUL_L_JAMO" gs:managed-name="HangulLJamo">
        <doc xml:space="preserve" filename="gunicode.h" line="192">Hangul L Jamo (JL)</doc>
      </member>
      <member name="hangul_v_jamo" value="32" c:identifier="G_UNICODE_BREAK_HANGUL_V_JAMO" gs:managed-name="HangulVJamo">
        <doc xml:space="preserve" filename="gunicode.h" line="193">Hangul V Jamo (JV)</doc>
      </member>
      <member name="hangul_t_jamo" value="33" c:identifier="G_UNICODE_BREAK_HANGUL_T_JAMO" gs:managed-name="HangulTJamo">
        <doc xml:space="preserve" filename="gunicode.h" line="194">Hangul T Jamo (JT)</doc>
      </member>
      <member name="hangul_lv_syllable" value="34" c:identifier="G_UNICODE_BREAK_HANGUL_LV_SYLLABLE" gs:managed-name="HangulLvSyllable">
        <doc xml:space="preserve" filename="gunicode.h" line="195">Hangul LV Syllable (H2)</doc>
      </member>
      <member name="hangul_lvt_syllable" value="35" c:identifier="G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE" gs:managed-name="HangulLvtSyllable">
        <doc xml:space="preserve" filename="gunicode.h" line="196">Hangul LVT Syllable (H3)</doc>
      </member>
      <member name="close_paranthesis" value="36" c:identifier="G_UNICODE_BREAK_CLOSE_PARANTHESIS" version="2.28" gs:managed-name="CloseParanthesis">
        <doc xml:space="preserve" filename="gunicode.h" line="197">Closing Parenthesis (CP).</doc>
      </member>
      <member name="conditional_japanese_starter" value="37" c:identifier="G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER" version="2.32" gs:managed-name="ConditionalJapaneseStarter">
        <doc xml:space="preserve" filename="gunicode.h" line="198">Conditional Japanese Starter (CJ).</doc>
      </member>
      <member name="hebrew_letter" value="38" c:identifier="G_UNICODE_BREAK_HEBREW_LETTER" version="2.32" gs:managed-name="HebrewLetter">
        <doc xml:space="preserve" filename="gunicode.h" line="199">Hebrew Letter (HL).</doc>
      </member>
      <member name="regional_indicator" value="39" c:identifier="G_UNICODE_BREAK_REGIONAL_INDICATOR" version="2.36" gs:managed-name="RegionalIndicator">
        <doc xml:space="preserve" filename="gunicode.h" line="200">Regional Indicator (RI).</doc>
      </member>
      <member name="emoji_base" value="40" c:identifier="G_UNICODE_BREAK_EMOJI_BASE" version="2.50" gs:managed-name="EmojiBase">
        <doc xml:space="preserve" filename="gunicode.h" line="201">Emoji Base (EB).</doc>
      </member>
      <member name="emoji_modifier" value="41" c:identifier="G_UNICODE_BREAK_EMOJI_MODIFIER" version="2.50" gs:managed-name="EmojiModifier">
        <doc xml:space="preserve" filename="gunicode.h" line="202">Emoji Modifier (EM).</doc>
      </member>
      <member name="zero_width_joiner" value="42" c:identifier="G_UNICODE_BREAK_ZERO_WIDTH_JOINER" version="2.50" gs:managed-name="ZeroWidthJoiner">
        <doc xml:space="preserve" filename="gunicode.h" line="203">Zero Width Joiner (ZWJ).</doc>
      </member>
    </enumeration>
    <enumeration name="UnicodeScript" c:type="GUnicodeScript" gs:managed-name="UnicodeScript">
      <doc xml:space="preserve" filename="gunicode.h" line="259">The #GUnicodeScript enumeration identifies different writing
systems. The values correspond to the names as defined in the
Unicode standard. The enumeration has been added in GLib 2.14,
and is interchangeable with #PangoScript.

Note that new types may be added in the future. Applications
should be ready to handle unknown values.
See [Unicode Standard Annex #24: Script names](http://www.unicode.org/reports/tr24/).</doc>
      <source-position filename="gunicode.h" line="629" />
      <member name="invalid_code" value="-1" c:identifier="G_UNICODE_SCRIPT_INVALID_CODE" gs:managed-name="InvalidCode">
        <doc xml:space="preserve" filename="gunicode.h" line="261">a value never returned from g_unichar_get_script()</doc>
      </member>
      <member name="common" value="0" c:identifier="G_UNICODE_SCRIPT_COMMON" gs:managed-name="Common">
        <doc xml:space="preserve" filename="gunicode.h" line="263">a character used by multiple different scripts</doc>
      </member>
      <member name="inherited" value="1" c:identifier="G_UNICODE_SCRIPT_INHERITED" gs:managed-name="Inherited">
        <doc xml:space="preserve" filename="gunicode.h" line="264">a mark glyph that takes its script from the
                              base glyph to which it is attached</doc>
      </member>
      <member name="arabic" value="2" c:identifier="G_UNICODE_SCRIPT_ARABIC" gs:managed-name="Arabic">
        <doc xml:space="preserve" filename="gunicode.h" line="266">Arabic</doc>
      </member>
      <member name="armenian" value="3" c:identifier="G_UNICODE_SCRIPT_ARMENIAN" gs:managed-name="Armenian">
        <doc xml:space="preserve" filename="gunicode.h" line="267">Armenian</doc>
      </member>
      <member name="bengali" value="4" c:identifier="G_UNICODE_SCRIPT_BENGALI" gs:managed-name="Bengali">
        <doc xml:space="preserve" filename="gunicode.h" line="268">Bengali</doc>
      </member>
      <member name="bopomofo" value="5" c:identifier="G_UNICODE_SCRIPT_BOPOMOFO" gs:managed-name="Bopomofo">
        <doc xml:space="preserve" filename="gunicode.h" line="269">Bopomofo</doc>
      </member>
      <member name="cherokee" value="6" c:identifier="G_UNICODE_SCRIPT_CHEROKEE" gs:managed-name="Cherokee">
        <doc xml:space="preserve" filename="gunicode.h" line="270">Cherokee</doc>
      </member>
      <member name="coptic" value="7" c:identifier="G_UNICODE_SCRIPT_COPTIC" gs:managed-name="Coptic">
        <doc xml:space="preserve" filename="gunicode.h" line="271">Coptic</doc>
      </member>
      <member name="cyrillic" value="8" c:identifier="G_UNICODE_SCRIPT_CYRILLIC" gs:managed-name="Cyrillic">
        <doc xml:space="preserve" filename="gunicode.h" line="272">Cyrillic</doc>
      </member>
      <member name="deseret" value="9" c:identifier="G_UNICODE_SCRIPT_DESERET" gs:managed-name="Deseret">
        <doc xml:space="preserve" filename="gunicode.h" line="273">Deseret</doc>
      </member>
      <member name="devanagari" value="10" c:identifier="G_UNICODE_SCRIPT_DEVANAGARI" gs:managed-name="Devanagari">
        <doc xml:space="preserve" filename="gunicode.h" line="274">Devanagari</doc>
      </member>
      <member name="ethiopic" value="11" c:identifier="G_UNICODE_SCRIPT_ETHIOPIC" gs:managed-name="Ethiopic">
        <doc xml:space="preserve" filename="gunicode.h" line="275">Ethiopic</doc>
      </member>
      <member name="georgian" value="12" c:identifier="G_UNICODE_SCRIPT_GEORGIAN" gs:managed-name="Georgian">
        <doc xml:space="preserve" filename="gunicode.h" line="276">Georgian</doc>
      </member>
      <member name="gothic" value="13" c:identifier="G_UNICODE_SCRIPT_GOTHIC" gs:managed-name="Gothic">
        <doc xml:space="preserve" filename="gunicode.h" line="277">Gothic</doc>
      </member>
      <member name="greek" value="14" c:identifier="G_UNICODE_SCRIPT_GREEK" gs:managed-name="Greek">
        <doc xml:space="preserve" filename="gunicode.h" line="278">Greek</doc>
      </member>
      <member name="gujarati" value="15" c:identifier="G_UNICODE_SCRIPT_GUJARATI" gs:managed-name="Gujarati">
        <doc xml:space="preserve" filename="gunicode.h" line="279">Gujarati</doc>
      </member>
      <member name="gurmukhi" value="16" c:identifier="G_UNICODE_SCRIPT_GURMUKHI" gs:managed-name="Gurmukhi">
        <doc xml:space="preserve" filename="gunicode.h" line="280">Gurmukhi</doc>
      </member>
      <member name="han" value="17" c:identifier="G_UNICODE_SCRIPT_HAN" gs:managed-name="Han">
        <doc xml:space="preserve" filename="gunicode.h" line="281">Han</doc>
      </member>
      <member name="hangul" value="18" c:identifier="G_UNICODE_SCRIPT_HANGUL" gs:managed-name="Hangul">
        <doc xml:space="preserve" filename="gunicode.h" line="282">Hangul</doc>
      </member>
      <member name="hebrew" value="19" c:identifier="G_UNICODE_SCRIPT_HEBREW" gs:managed-name="Hebrew">
        <doc xml:space="preserve" filename="gunicode.h" line="283">Hebrew</doc>
      </member>
      <member name="hiragana" value="20" c:identifier="G_UNICODE_SCRIPT_HIRAGANA" gs:managed-name="Hiragana">
        <doc xml:space="preserve" filename="gunicode.h" line="284">Hiragana</doc>
      </member>
      <member name="kannada" value="21" c:identifier="G_UNICODE_SCRIPT_KANNADA" gs:managed-name="Kannada">
        <doc xml:space="preserve" filename="gunicode.h" line="285">Kannada</doc>
      </member>
      <member name="katakana" value="22" c:identifier="G_UNICODE_SCRIPT_KATAKANA" gs:managed-name="Katakana">
        <doc xml:space="preserve" filename="gunicode.h" line="286">Katakana</doc>
      </member>
      <member name="khmer" value="23" c:identifier="G_UNICODE_SCRIPT_KHMER" gs:managed-name="Khmer">
        <doc xml:space="preserve" filename="gunicode.h" line="287">Khmer</doc>
      </member>
      <member name="lao" value="24" c:identifier="G_UNICODE_SCRIPT_LAO" gs:managed-name="Lao">
        <doc xml:space="preserve" filename="gunicode.h" line="288">Lao</doc>
      </member>
      <member name="latin" value="25" c:identifier="G_UNICODE_SCRIPT_LATIN" gs:managed-name="Latin">
        <doc xml:space="preserve" filename="gunicode.h" line="289">Latin</doc>
      </member>
      <member name="malayalam" value="26" c:identifier="G_UNICODE_SCRIPT_MALAYALAM" gs:managed-name="Malayalam">
        <doc xml:space="preserve" filename="gunicode.h" line="290">Malayalam</doc>
      </member>
      <member name="mongolian" value="27" c:identifier="G_UNICODE_SCRIPT_MONGOLIAN" gs:managed-name="Mongolian">
        <doc xml:space="preserve" filename="gunicode.h" line="291">Mongolian</doc>
      </member>
      <member name="myanmar" value="28" c:identifier="G_UNICODE_SCRIPT_MYANMAR" gs:managed-name="Myanmar">
        <doc xml:space="preserve" filename="gunicode.h" line="292">Myanmar</doc>
      </member>
      <member name="ogham" value="29" c:identifier="G_UNICODE_SCRIPT_OGHAM" gs:managed-name="Ogham">
        <doc xml:space="preserve" filename="gunicode.h" line="293">Ogham</doc>
      </member>
      <member name="old_italic" value="30" c:identifier="G_UNICODE_SCRIPT_OLD_ITALIC" gs:managed-name="OldItalic">
        <doc xml:space="preserve" filename="gunicode.h" line="294">Old Italic</doc>
      </member>
      <member name="oriya" value="31" c:identifier="G_UNICODE_SCRIPT_ORIYA" gs:managed-name="Oriya">
        <doc xml:space="preserve" filename="gunicode.h" line="295">Oriya</doc>
      </member>
      <member name="runic" value="32" c:identifier="G_UNICODE_SCRIPT_RUNIC" gs:managed-name="Runic">
        <doc xml:space="preserve" filename="gunicode.h" line="296">Runic</doc>
      </member>
      <member name="sinhala" value="33" c:identifier="G_UNICODE_SCRIPT_SINHALA" gs:managed-name="Sinhala">
        <doc xml:space="preserve" filename="gunicode.h" line="297">Sinhala</doc>
      </member>
      <member name="syriac" value="34" c:identifier="G_UNICODE_SCRIPT_SYRIAC" gs:managed-name="Syriac">
        <doc xml:space="preserve" filename="gunicode.h" line="298">Syriac</doc>
      </member>
      <member name="tamil" value="35" c:identifier="G_UNICODE_SCRIPT_TAMIL" gs:managed-name="Tamil">
        <doc xml:space="preserve" filename="gunicode.h" line="299">Tamil</doc>
      </member>
      <member name="telugu" value="36" c:identifier="G_UNICODE_SCRIPT_TELUGU" gs:managed-name="Telugu">
        <doc xml:space="preserve" filename="gunicode.h" line="300">Telugu</doc>
      </member>
      <member name="thaana" value="37" c:identifier="G_UNICODE_SCRIPT_THAANA" gs:managed-name="Thaana">
        <doc xml:space="preserve" filename="gunicode.h" line="301">Thaana</doc>
      </member>
      <member name="thai" value="38" c:identifier="G_UNICODE_SCRIPT_THAI" gs:managed-name="Thai">
        <doc xml:space="preserve" filename="gunicode.h" line="302">Thai</doc>
      </member>
      <member name="tibetan" value="39" c:identifier="G_UNICODE_SCRIPT_TIBETAN" gs:managed-name="Tibetan">
        <doc xml:space="preserve" filename="gunicode.h" line="303">Tibetan</doc>
      </member>
      <member name="canadian_aboriginal" value="40" c:identifier="G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL" gs:managed-name="CanadianAboriginal">
        <doc xml:space="preserve" filename="gunicode.h" line="304">Canadian Aboriginal</doc>
      </member>
      <member name="yi" value="41" c:identifier="G_UNICODE_SCRIPT_YI" gs:managed-name="Yi">
        <doc xml:space="preserve" filename="gunicode.h" line="306">Yi</doc>
      </member>
      <member name="tagalog" value="42" c:identifier="G_UNICODE_SCRIPT_TAGALOG" gs:managed-name="Tagalog">
        <doc xml:space="preserve" filename="gunicode.h" line="307">Tagalog</doc>
      </member>
      <member name="hanunoo" value="43" c:identifier="G_UNICODE_SCRIPT_HANUNOO" gs:managed-name="Hanunoo">
        <doc xml:space="preserve" filename="gunicode.h" line="308">Hanunoo</doc>
      </member>
      <member name="buhid" value="44" c:identifier="G_UNICODE_SCRIPT_BUHID" gs:managed-name="Buhid">
        <doc xml:space="preserve" filename="gunicode.h" line="309">Buhid</doc>
      </member>
      <member name="tagbanwa" value="45" c:identifier="G_UNICODE_SCRIPT_TAGBANWA" gs:managed-name="Tagbanwa">
        <doc xml:space="preserve" filename="gunicode.h" line="310">Tagbanwa</doc>
      </member>
      <member name="braille" value="46" c:identifier="G_UNICODE_SCRIPT_BRAILLE" gs:managed-name="Braille">
        <doc xml:space="preserve" filename="gunicode.h" line="311">Braille</doc>
      </member>
      <member name="cypriot" value="47" c:identifier="G_UNICODE_SCRIPT_CYPRIOT" gs:managed-name="Cypriot">
        <doc xml:space="preserve" filename="gunicode.h" line="312">Cypriot</doc>
      </member>
      <member name="limbu" value="48" c:identifier="G_UNICODE_SCRIPT_LIMBU" gs:managed-name="Limbu">
        <doc xml:space="preserve" filename="gunicode.h" line="313">Limbu</doc>
      </member>
      <member name="osmanya" value="49" c:identifier="G_UNICODE_SCRIPT_OSMANYA" gs:managed-name="Osmanya">
        <doc xml:space="preserve" filename="gunicode.h" line="314">Osmanya</doc>
      </member>
      <member name="shavian" value="50" c:identifier="G_UNICODE_SCRIPT_SHAVIAN" gs:managed-name="Shavian">
        <doc xml:space="preserve" filename="gunicode.h" line="315">Shavian</doc>
      </member>
      <member name="linear_b" value="51" c:identifier="G_UNICODE_SCRIPT_LINEAR_B" gs:managed-name="LinearB">
        <doc xml:space="preserve" filename="gunicode.h" line="316">Linear B</doc>
      </member>
      <member name="tai_le" value="52" c:identifier="G_UNICODE_SCRIPT_TAI_LE" gs:managed-name="TaiLe">
        <doc xml:space="preserve" filename="gunicode.h" line="317">Tai Le</doc>
      </member>
      <member name="ugaritic" value="53" c:identifier="G_UNICODE_SCRIPT_UGARITIC" gs:managed-name="Ugaritic">
        <doc xml:space="preserve" filename="gunicode.h" line="318">Ugaritic</doc>
      </member>
      <member name="new_tai_lue" value="54" c:identifier="G_UNICODE_SCRIPT_NEW_TAI_LUE" gs:managed-name="NewTaiLue">
        <doc xml:space="preserve" filename="gunicode.h" line="319">New Tai Lue</doc>
      </member>
      <member name="buginese" value="55" c:identifier="G_UNICODE_SCRIPT_BUGINESE" gs:managed-name="Buginese">
        <doc xml:space="preserve" filename="gunicode.h" line="321">Buginese</doc>
      </member>
      <member name="glagolitic" value="56" c:identifier="G_UNICODE_SCRIPT_GLAGOLITIC" gs:managed-name="Glagolitic">
        <doc xml:space="preserve" filename="gunicode.h" line="322">Glagolitic</doc>
      </member>
      <member name="tifinagh" value="57" c:identifier="G_UNICODE_SCRIPT_TIFINAGH" gs:managed-name="Tifinagh">
        <doc xml:space="preserve" filename="gunicode.h" line="323">Tifinagh</doc>
      </member>
      <member name="syloti_nagri" value="58" c:identifier="G_UNICODE_SCRIPT_SYLOTI_NAGRI" gs:managed-name="SylotiNagri">
        <doc xml:space="preserve" filename="gunicode.h" line="324">Syloti Nagri</doc>
      </member>
      <member name="old_persian" value="59" c:identifier="G_UNICODE_SCRIPT_OLD_PERSIAN" gs:managed-name="OldPersian">
        <doc xml:space="preserve" filename="gunicode.h" line="326">Old Persian</doc>
      </member>
      <member name="kharoshthi" value="60" c:identifier="G_UNICODE_SCRIPT_KHAROSHTHI" gs:managed-name="Kharoshthi">
        <doc xml:space="preserve" filename="gunicode.h" line="328">Kharoshthi</doc>
      </member>
      <member name="unknown" value="61" c:identifier="G_UNICODE_SCRIPT_UNKNOWN" gs:managed-name="Unknown">
        <doc xml:space="preserve" filename="gunicode.h" line="329">an unassigned code point</doc>
      </member>
      <member name="balinese" value="62" c:identifier="G_UNICODE_SCRIPT_BALINESE" gs:managed-name="Balinese">
        <doc xml:space="preserve" filename="gunicode.h" line="330">Balinese</doc>
      </member>
      <member name="cuneiform" value="63" c:identifier="G_UNICODE_SCRIPT_CUNEIFORM" gs:managed-name="Cuneiform">
        <doc xml:space="preserve" filename="gunicode.h" line="331">Cuneiform</doc>
      </member>
      <member name="phoenician" value="64" c:identifier="G_UNICODE_SCRIPT_PHOENICIAN" gs:managed-name="Phoenician">
        <doc xml:space="preserve" filename="gunicode.h" line="332">Phoenician</doc>
      </member>
      <member name="phags_pa" value="65" c:identifier="G_UNICODE_SCRIPT_PHAGS_PA" gs:managed-name="PhagsPa">
        <doc xml:space="preserve" filename="gunicode.h" line="333">Phags-pa</doc>
      </member>
      <member name="nko" value="66" c:identifier="G_UNICODE_SCRIPT_NKO" gs:managed-name="Nko">
        <doc xml:space="preserve" filename="gunicode.h" line="334">N'Ko</doc>
      </member>
      <member name="kayah_li" value="67" c:identifier="G_UNICODE_SCRIPT_KAYAH_LI" version="2.16" gs:managed-name="KayahLi">
        <doc xml:space="preserve" filename="gunicode.h" line="335">Kayah Li.3</doc>
      </member>
      <member name="lepcha" value="68" c:identifier="G_UNICODE_SCRIPT_LEPCHA" version="2.16" gs:managed-name="Lepcha">
        <doc xml:space="preserve" filename="gunicode.h" line="336">Lepcha.3</doc>
      </member>
      <member name="rejang" value="69" c:identifier="G_UNICODE_SCRIPT_REJANG" version="2.16" gs:managed-name="Rejang">
        <doc xml:space="preserve" filename="gunicode.h" line="337">Rejang.3</doc>
      </member>
      <member name="sundanese" value="70" c:identifier="G_UNICODE_SCRIPT_SUNDANESE" version="2.16" gs:managed-name="Sundanese">
        <doc xml:space="preserve" filename="gunicode.h" line="338">Sundanese.3</doc>
      </member>
      <member name="saurashtra" value="71" c:identifier="G_UNICODE_SCRIPT_SAURASHTRA" version="2.16" gs:managed-name="Saurashtra">
        <doc xml:space="preserve" filename="gunicode.h" line="339">Saurashtra.3</doc>
      </member>
      <member name="cham" value="72" c:identifier="G_UNICODE_SCRIPT_CHAM" version="2.16" gs:managed-name="Cham">
        <doc xml:space="preserve" filename="gunicode.h" line="340">Cham.3</doc>
      </member>
      <member name="ol_chiki" value="73" c:identifier="G_UNICODE_SCRIPT_OL_CHIKI" version="2.16" gs:managed-name="OlChiki">
        <doc xml:space="preserve" filename="gunicode.h" line="341">Ol Chiki.3</doc>
      </member>
      <member name="vai" value="74" c:identifier="G_UNICODE_SCRIPT_VAI" version="2.16" gs:managed-name="Vai">
        <doc xml:space="preserve" filename="gunicode.h" line="342">Vai.3</doc>
      </member>
      <member name="carian" value="75" c:identifier="G_UNICODE_SCRIPT_CARIAN" version="2.16" gs:managed-name="Carian">
        <doc xml:space="preserve" filename="gunicode.h" line="343">Carian.3</doc>
      </member>
      <member name="lycian" value="76" c:identifier="G_UNICODE_SCRIPT_LYCIAN" version="2.16" gs:managed-name="Lycian">
        <doc xml:space="preserve" filename="gunicode.h" line="344">Lycian.3</doc>
      </member>
      <member name="lydian" value="77" c:identifier="G_UNICODE_SCRIPT_LYDIAN" version="2.16" gs:managed-name="Lydian">
        <doc xml:space="preserve" filename="gunicode.h" line="345">Lydian.3</doc>
      </member>
      <member name="avestan" value="78" c:identifier="G_UNICODE_SCRIPT_AVESTAN" version="2.26" gs:managed-name="Avestan">
        <doc xml:space="preserve" filename="gunicode.h" line="346">Avestan.</doc>
      </member>
      <member name="bamum" value="79" c:identifier="G_UNICODE_SCRIPT_BAMUM" version="2.26" gs:managed-name="Bamum">
        <doc xml:space="preserve" filename="gunicode.h" line="347">Bamum.</doc>
      </member>
      <member name="egyptian_hieroglyphs" value="80" c:identifier="G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS" version="2.26" gs:managed-name="EgyptianHieroglyphs">
        <doc xml:space="preserve" filename="gunicode.h" line="348">Egyptian Hieroglpyhs.</doc>
      </member>
      <member name="imperial_aramaic" value="81" c:identifier="G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC" version="2.26" gs:managed-name="ImperialAramaic">
        <doc xml:space="preserve" filename="gunicode.h" line="350">Imperial Aramaic.</doc>
      </member>
      <member name="inscriptional_pahlavi" value="82" c:identifier="G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI" version="2.26" gs:managed-name="InscriptionalPahlavi">
        <doc xml:space="preserve" filename="gunicode.h" line="352">Inscriptional Pahlavi.</doc>
      </member>
      <member name="inscriptional_parthian" value="83" c:identifier="G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN" version="2.26" gs:managed-name="InscriptionalParthian">
        <doc xml:space="preserve" filename="gunicode.h" line="354">Inscriptional Parthian.</doc>
      </member>
      <member name="javanese" value="84" c:identifier="G_UNICODE_SCRIPT_JAVANESE" version="2.26" gs:managed-name="Javanese">
        <doc xml:space="preserve" filename="gunicode.h" line="356">Javanese.</doc>
      </member>
      <member name="kaithi" value="85" c:identifier="G_UNICODE_SCRIPT_KAITHI" version="2.26" gs:managed-name="Kaithi">
        <doc xml:space="preserve" filename="gunicode.h" line="357">Kaithi.</doc>
      </member>
      <member name="lisu" value="86" c:identifier="G_UNICODE_SCRIPT_LISU" version="2.26" gs:managed-name="Lisu">
        <doc xml:space="preserve" filename="gunicode.h" line="358">Lisu.</doc>
      </member>
      <member name="meetei_mayek" value="87" c:identifier="G_UNICODE_SCRIPT_MEETEI_MAYEK" version="2.26" gs:managed-name="MeeteiMayek">
        <doc xml:space="preserve" filename="gunicode.h" line="359">Meetei Mayek.</doc>
      </member>
      <member name="old_south_arabian" value="88" c:identifier="G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN" version="2.26" gs:managed-name="OldSouthArabian">
        <doc xml:space="preserve" filename="gunicode.h" line="361">Old South Arabian.</doc>
      </member>
      <member name="old_turkic" value="89" c:identifier="G_UNICODE_SCRIPT_OLD_TURKIC" version="2.28" gs:managed-name="OldTurkic">
        <doc xml:space="preserve" filename="gunicode.h" line="363">Old Turkic.</doc>
      </member>
      <member name="samaritan" value="90" c:identifier="G_UNICODE_SCRIPT_SAMARITAN" version="2.26" gs:managed-name="Samaritan">
        <doc xml:space="preserve" filename="gunicode.h" line="364">Samaritan.</doc>
      </member>
      <member name="tai_tham" value="91" c:identifier="G_UNICODE_SCRIPT_TAI_THAM" version="2.26" gs:managed-name="TaiTham">
        <doc xml:space="preserve" filename="gunicode.h" line="365">Tai Tham.</doc>
      </member>
      <member name="tai_viet" value="92" c:identifier="G_UNICODE_SCRIPT_TAI_VIET" version="2.26" gs:managed-name="TaiViet">
        <doc xml:space="preserve" filename="gunicode.h" line="366">Tai Viet.</doc>
      </member>
      <member name="batak" value="93" c:identifier="G_UNICODE_SCRIPT_BATAK" version="2.28" gs:managed-name="Batak">
        <doc xml:space="preserve" filename="gunicode.h" line="367">Batak.</doc>
      </member>
      <member name="brahmi" value="94" c:identifier="G_UNICODE_SCRIPT_BRAHMI" version="2.28" gs:managed-name="Brahmi">
        <doc xml:space="preserve" filename="gunicode.h" line="368">Brahmi.</doc>
      </member>
      <member name="mandaic" value="95" c:identifier="G_UNICODE_SCRIPT_MANDAIC" version="2.28" gs:managed-name="Mandaic">
        <doc xml:space="preserve" filename="gunicode.h" line="369">Mandaic.</doc>
      </member>
      <member name="chakma" value="96" c:identifier="G_UNICODE_SCRIPT_CHAKMA" version="2.32" gs:managed-name="Chakma">
        <doc xml:space="preserve" filename="gunicode.h" line="370">Chakma.</doc>
      </member>
      <member name="meroitic_cursive" value="97" c:identifier="G_UNICODE_SCRIPT_MEROITIC_CURSIVE" version="2.32" gs:managed-name="MeroiticCursive">
        <doc xml:space="preserve" filename="gunicode.h" line="371">Meroitic Cursive.</doc>
      </member>
      <member name="meroitic_hieroglyphs" value="98" c:identifier="G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS" version="2.32" gs:managed-name="MeroiticHieroglyphs">
        <doc xml:space="preserve" filename="gunicode.h" line="372">Meroitic Hieroglyphs.</doc>
      </member>
      <member name="miao" value="99" c:identifier="G_UNICODE_SCRIPT_MIAO" version="2.32" gs:managed-name="Miao">
        <doc xml:space="preserve" filename="gunicode.h" line="373">Miao.</doc>
      </member>
      <member name="sharada" value="100" c:identifier="G_UNICODE_SCRIPT_SHARADA" version="2.32" gs:managed-name="Sharada">
        <doc xml:space="preserve" filename="gunicode.h" line="374">Sharada.</doc>
      </member>
      <member name="sora_sompeng" value="101" c:identifier="G_UNICODE_SCRIPT_SORA_SOMPENG" version="2.32" gs:managed-name="SoraSompeng">
        <doc xml:space="preserve" filename="gunicode.h" line="375">Sora Sompeng.</doc>
      </member>
      <member name="takri" value="102" c:identifier="G_UNICODE_SCRIPT_TAKRI" version="2.32" gs:managed-name="Takri">
        <doc xml:space="preserve" filename="gunicode.h" line="376">Takri.</doc>
      </member>
      <member name="bassa_vah" value="103" c:identifier="G_UNICODE_SCRIPT_BASSA_VAH" version="2.42" gs:managed-name="BassaVah">
        <doc xml:space="preserve" filename="gunicode.h" line="377">Bassa.</doc>
      </member>
      <member name="caucasian_albanian" value="104" c:identifier="G_UNICODE_SCRIPT_CAUCASIAN_ALBANIAN" version="2.42" gs:managed-name="CaucasianAlbanian">
        <doc xml:space="preserve" filename="gunicode.h" line="378">Caucasian Albanian.</doc>
      </member>
      <member name="duployan" value="105" c:identifier="G_UNICODE_SCRIPT_DUPLOYAN" version="2.42" gs:managed-name="Duployan">
        <doc xml:space="preserve" filename="gunicode.h" line="379">Duployan.</doc>
      </member>
      <member name="elbasan" value="106" c:identifier="G_UNICODE_SCRIPT_ELBASAN" version="2.42" gs:managed-name="Elbasan">
        <doc xml:space="preserve" filename="gunicode.h" line="380">Elbasan.</doc>
      </member>
      <member name="grantha" value="107" c:identifier="G_UNICODE_SCRIPT_GRANTHA" version="2.42" gs:managed-name="Grantha">
        <doc xml:space="preserve" filename="gunicode.h" line="381">Grantha.</doc>
      </member>
      <member name="khojki" value="108" c:identifier="G_UNICODE_SCRIPT_KHOJKI" version="2.42" gs:managed-name="Khojki">
        <doc xml:space="preserve" filename="gunicode.h" line="382">Kjohki.</doc>
      </member>
      <member name="khudawadi" value="109" c:identifier="G_UNICODE_SCRIPT_KHUDAWADI" version="2.42" gs:managed-name="Khudawadi">
        <doc xml:space="preserve" filename="gunicode.h" line="383">Khudawadi, Sindhi.</doc>
      </member>
      <member name="linear_a" value="110" c:identifier="G_UNICODE_SCRIPT_LINEAR_A" version="2.42" gs:managed-name="LinearA">
        <doc xml:space="preserve" filename="gunicode.h" line="384">Linear A.</doc>
      </member>
      <member name="mahajani" value="111" c:identifier="G_UNICODE_SCRIPT_MAHAJANI" version="2.42" gs:managed-name="Mahajani">
        <doc xml:space="preserve" filename="gunicode.h" line="385">Mahajani.</doc>
      </member>
      <member name="manichaean" value="112" c:identifier="G_UNICODE_SCRIPT_MANICHAEAN" version="2.42" gs:managed-name="Manichaean">
        <doc xml:space="preserve" filename="gunicode.h" line="386">Manichaean.</doc>
      </member>
      <member name="mende_kikakui" value="113" c:identifier="G_UNICODE_SCRIPT_MENDE_KIKAKUI" version="2.42" gs:managed-name="MendeKikakui">
        <doc xml:space="preserve" filename="gunicode.h" line="387">Mende Kikakui.</doc>
      </member>
      <member name="modi" value="114" c:identifier="G_UNICODE_SCRIPT_MODI" version="2.42" gs:managed-name="Modi">
        <doc xml:space="preserve" filename="gunicode.h" line="388">Modi.</doc>
      </member>
      <member name="mro" value="115" c:identifier="G_UNICODE_SCRIPT_MRO" version="2.42" gs:managed-name="Mro">
        <doc xml:space="preserve" filename="gunicode.h" line="389">Mro.</doc>
      </member>
      <member name="nabataean" value="116" c:identifier="G_UNICODE_SCRIPT_NABATAEAN" version="2.42" gs:managed-name="Nabataean">
        <doc xml:space="preserve" filename="gunicode.h" line="390">Nabataean.</doc>
      </member>
      <member name="old_north_arabian" value="117" c:identifier="G_UNICODE_SCRIPT_OLD_NORTH_ARABIAN" version="2.42" gs:managed-name="OldNorthArabian">
        <doc xml:space="preserve" filename="gunicode.h" line="391">Old North Arabian.</doc>
      </member>
      <member name="old_permic" value="118" c:identifier="G_UNICODE_SCRIPT_OLD_PERMIC" version="2.42" gs:managed-name="OldPermic">
        <doc xml:space="preserve" filename="gunicode.h" line="392">Old Permic.</doc>
      </member>
      <member name="pahawh_hmong" value="119" c:identifier="G_UNICODE_SCRIPT_PAHAWH_HMONG" version="2.42" gs:managed-name="PahawhHmong">
        <doc xml:space="preserve" filename="gunicode.h" line="393">Pahawh Hmong.</doc>
      </member>
      <member name="palmyrene" value="120" c:identifier="G_UNICODE_SCRIPT_PALMYRENE" version="2.42" gs:managed-name="Palmyrene">
        <doc xml:space="preserve" filename="gunicode.h" line="394">Palmyrene.</doc>
      </member>
      <member name="pau_cin_hau" value="121" c:identifier="G_UNICODE_SCRIPT_PAU_CIN_HAU" version="2.42" gs:managed-name="PauCinHau">
        <doc xml:space="preserve" filename="gunicode.h" line="395">Pau Cin Hau.</doc>
      </member>
      <member name="psalter_pahlavi" value="122" c:identifier="G_UNICODE_SCRIPT_PSALTER_PAHLAVI" version="2.42" gs:managed-name="PsalterPahlavi">
        <doc xml:space="preserve" filename="gunicode.h" line="396">Psalter Pahlavi.</doc>
      </member>
      <member name="siddham" value="123" c:identifier="G_UNICODE_SCRIPT_SIDDHAM" version="2.42" gs:managed-name="Siddham">
        <doc xml:space="preserve" filename="gunicode.h" line="397">Siddham.</doc>
      </member>
      <member name="tirhuta" value="124" c:identifier="G_UNICODE_SCRIPT_TIRHUTA" version="2.42" gs:managed-name="Tirhuta">
        <doc xml:space="preserve" filename="gunicode.h" line="398">Tirhuta.</doc>
      </member>
      <member name="warang_citi" value="125" c:identifier="G_UNICODE_SCRIPT_WARANG_CITI" version="2.42" gs:managed-name="WarangCiti">
        <doc xml:space="preserve" filename="gunicode.h" line="399">Warang Citi.</doc>
      </member>
      <member name="ahom" value="126" c:identifier="G_UNICODE_SCRIPT_AHOM" version="2.48" gs:managed-name="Ahom">
        <doc xml:space="preserve" filename="gunicode.h" line="400">Ahom.</doc>
      </member>
      <member name="anatolian_hieroglyphs" value="127" c:identifier="G_UNICODE_SCRIPT_ANATOLIAN_HIEROGLYPHS" version="2.48" gs:managed-name="AnatolianHieroglyphs">
        <doc xml:space="preserve" filename="gunicode.h" line="401">Anatolian Hieroglyphs.</doc>
      </member>
      <member name="hatran" value="128" c:identifier="G_UNICODE_SCRIPT_HATRAN" version="2.48" gs:managed-name="Hatran">
        <doc xml:space="preserve" filename="gunicode.h" line="402">Hatran.</doc>
      </member>
      <member name="multani" value="129" c:identifier="G_UNICODE_SCRIPT_MULTANI" version="2.48" gs:managed-name="Multani">
        <doc xml:space="preserve" filename="gunicode.h" line="403">Multani.</doc>
      </member>
      <member name="old_hungarian" value="130" c:identifier="G_UNICODE_SCRIPT_OLD_HUNGARIAN" version="2.48" gs:managed-name="OldHungarian">
        <doc xml:space="preserve" filename="gunicode.h" line="404">Old Hungarian.</doc>
      </member>
      <member name="signwriting" value="131" c:identifier="G_UNICODE_SCRIPT_SIGNWRITING" version="2.48" gs:managed-name="Signwriting">
        <doc xml:space="preserve" filename="gunicode.h" line="405">Signwriting.</doc>
      </member>
      <member name="adlam" value="132" c:identifier="G_UNICODE_SCRIPT_ADLAM" version="2.50" gs:managed-name="Adlam">
        <doc xml:space="preserve" filename="gunicode.h" line="406">Adlam.</doc>
      </member>
      <member name="bhaiksuki" value="133" c:identifier="G_UNICODE_SCRIPT_BHAIKSUKI" version="2.50" gs:managed-name="Bhaiksuki">
        <doc xml:space="preserve" filename="gunicode.h" line="407">Bhaiksuki.</doc>
      </member>
      <member name="marchen" value="134" c:identifier="G_UNICODE_SCRIPT_MARCHEN" version="2.50" gs:managed-name="Marchen">
        <doc xml:space="preserve" filename="gunicode.h" line="408">Marchen.</doc>
      </member>
      <member name="newa" value="135" c:identifier="G_UNICODE_SCRIPT_NEWA" version="2.50" gs:managed-name="Newa">
        <doc xml:space="preserve" filename="gunicode.h" line="409">Newa.</doc>
      </member>
      <member name="osage" value="136" c:identifier="G_UNICODE_SCRIPT_OSAGE" version="2.50" gs:managed-name="Osage">
        <doc xml:space="preserve" filename="gunicode.h" line="410">Osage.</doc>
      </member>
      <member name="tangut" value="137" c:identifier="G_UNICODE_SCRIPT_TANGUT" version="2.50" gs:managed-name="Tangut">
        <doc xml:space="preserve" filename="gunicode.h" line="411">Tangut.</doc>
      </member>
      <member name="masaram_gondi" value="138" c:identifier="G_UNICODE_SCRIPT_MASARAM_GONDI" version="2.54" gs:managed-name="MasaramGondi">
        <doc xml:space="preserve" filename="gunicode.h" line="412">Masaram Gondi.</doc>
      </member>
      <member name="nushu" value="139" c:identifier="G_UNICODE_SCRIPT_NUSHU" version="2.54" gs:managed-name="Nushu">
        <doc xml:space="preserve" filename="gunicode.h" line="413">Nushu.</doc>
      </member>
      <member name="soyombo" value="140" c:identifier="G_UNICODE_SCRIPT_SOYOMBO" version="2.54" gs:managed-name="Soyombo">
        <doc xml:space="preserve" filename="gunicode.h" line="414">Soyombo.</doc>
      </member>
      <member name="zanabazar_square" value="141" c:identifier="G_UNICODE_SCRIPT_ZANABAZAR_SQUARE" version="2.54" gs:managed-name="ZanabazarSquare">
        <doc xml:space="preserve" filename="gunicode.h" line="415">Zanabazar Square.</doc>
      </member>
      <member name="dogra" value="142" c:identifier="G_UNICODE_SCRIPT_DOGRA" version="2.58" gs:managed-name="Dogra">
        <doc xml:space="preserve" filename="gunicode.h" line="416">Dogra.</doc>
      </member>
      <member name="gunjala_gondi" value="143" c:identifier="G_UNICODE_SCRIPT_GUNJALA_GONDI" version="2.58" gs:managed-name="GunjalaGondi">
        <doc xml:space="preserve" filename="gunicode.h" line="417">Gunjala Gondi.</doc>
      </member>
      <member name="hanifi_rohingya" value="144" c:identifier="G_UNICODE_SCRIPT_HANIFI_ROHINGYA" version="2.58" gs:managed-name="HanifiRohingya">
        <doc xml:space="preserve" filename="gunicode.h" line="418">Hanifi Rohingya.</doc>
      </member>
      <member name="makasar" value="145" c:identifier="G_UNICODE_SCRIPT_MAKASAR" version="2.58" gs:managed-name="Makasar">
        <doc xml:space="preserve" filename="gunicode.h" line="419">Makasar.</doc>
      </member>
      <member name="medefaidrin" value="146" c:identifier="G_UNICODE_SCRIPT_MEDEFAIDRIN" version="2.58" gs:managed-name="Medefaidrin">
        <doc xml:space="preserve" filename="gunicode.h" line="420">Medefaidrin.</doc>
      </member>
      <member name="old_sogdian" value="147" c:identifier="G_UNICODE_SCRIPT_OLD_SOGDIAN" version="2.58" gs:managed-name="OldSogdian">
        <doc xml:space="preserve" filename="gunicode.h" line="421">Old Sogdian.</doc>
      </member>
      <member name="sogdian" value="148" c:identifier="G_UNICODE_SCRIPT_SOGDIAN" version="2.58" gs:managed-name="Sogdian">
        <doc xml:space="preserve" filename="gunicode.h" line="422">Sogdian.</doc>
      </member>
      <member name="elymaic" value="149" c:identifier="G_UNICODE_SCRIPT_ELYMAIC" version="2.62" gs:managed-name="Elymaic">
        <doc xml:space="preserve" filename="gunicode.h" line="423">Elym.</doc>
      </member>
      <member name="nandinagari" value="150" c:identifier="G_UNICODE_SCRIPT_NANDINAGARI" version="2.62" gs:managed-name="Nandinagari">
        <doc xml:space="preserve" filename="gunicode.h" line="424">Nand.</doc>
      </member>
      <member name="nyiakeng_puachue_hmong" value="151" c:identifier="G_UNICODE_SCRIPT_NYIAKENG_PUACHUE_HMONG" version="2.62" gs:managed-name="NyiakengPuachueHmong">
        <doc xml:space="preserve" filename="gunicode.h" line="425">Rohg.</doc>
      </member>
      <member name="wancho" value="152" c:identifier="G_UNICODE_SCRIPT_WANCHO" version="2.62" gs:managed-name="Wancho">
        <doc xml:space="preserve" filename="gunicode.h" line="426">Wcho.</doc>
      </member>
      <member name="chorasmian" value="153" c:identifier="G_UNICODE_SCRIPT_CHORASMIAN" version="2.66" gs:managed-name="Chorasmian">
        <doc xml:space="preserve" filename="gunicode.h" line="427">Chorasmian.</doc>
      </member>
      <member name="dives_akuru" value="154" c:identifier="G_UNICODE_SCRIPT_DIVES_AKURU" version="2.66" gs:managed-name="DivesAkuru">
        <doc xml:space="preserve" filename="gunicode.h" line="428">Dives Akuru.</doc>
      </member>
      <member name="khitan_small_script" value="155" c:identifier="G_UNICODE_SCRIPT_KHITAN_SMALL_SCRIPT" version="2.66" gs:managed-name="KhitanSmallScript">
        <doc xml:space="preserve" filename="gunicode.h" line="429">Khitan small script.</doc>
      </member>
      <member name="yezidi" value="156" c:identifier="G_UNICODE_SCRIPT_YEZIDI" version="2.66" gs:managed-name="Yezidi">
        <doc xml:space="preserve" filename="gunicode.h" line="430">Yezidi.</doc>
      </member>
      <function name="from_iso15924" c:identifier="g_unicode_script_from_iso15924" version="2.30" gs:dll-name="glib-2.0" gs:managed-name="FromIso15924">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35646">Looks up the Unicode script for @iso15924.  ISO 15924 assigns four-letter
codes to scripts.  For example, the code for Arabic is 'Arab'.
This function accepts four letter codes encoded as a @guint32 in a
big-endian fashion.  That is, the code expected for Arabic is
0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

See
[Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
for details.</doc>
        <source-position filename="gunicode.h" line="634" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35660">the Unicode script for @iso15924, or
  of %G_UNICODE_SCRIPT_INVALID_CODE if @iso15924 is zero and
  %G_UNICODE_SCRIPT_UNKNOWN if @iso15924 is unknown.</doc>
          <type name="UnicodeScript" c:type="GUnicodeScript" gs:managed-name="UnicodeScript" />
        </return-value>
        <parameters>
          <parameter name="iso15924" transfer-ownership="none" gs:managed-name="iso15924" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35648">a Unicode script</doc>
            <type name="guint32" c:type="guint32" gs:managed-name="System.UInt32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="iso15924" transfer-ownership="none" gs:managed-name="iso15924" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35648">a Unicode script</doc>
            <type name="guint32" c:type="guint32" gs:managed-name="System.UInt32" />
          </parameter>
        </gs:managed-parameters>
      </function>
      <method name="to_iso15924" c:identifier="g_unicode_script_to_iso15924" version="2.30" gs:dll-name="glib-2.0" gs:managed-name="ToIso15924" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35667">Looks up the ISO 15924 code for @script.  ISO 15924 assigns four-letter
codes to scripts.  For example, the code for Arabic is 'Arab'.  The
four letter codes are encoded as a @guint32 by this function in a
big-endian fashion.  That is, the code returned for Arabic is
0x41726162 (0x41 is ASCII code for 'A', 0x72 is ASCII code for 'r', etc).

See
[Codes for the representation of names of scripts](http://unicode.org/iso15924/codelists.html)
for details.</doc>
        <source-position filename="gunicode.h" line="632" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35681">the ISO 15924 code for @script, encoded as an integer,
  of zero if @script is %G_UNICODE_SCRIPT_INVALID_CODE or
  ISO 15924 code 'Zzzz' (script code for UNKNOWN) if @script is not understood.</doc>
          <type name="guint32" c:type="guint32" gs:managed-name="System.UInt32" />
        </return-value>
        <parameters>
          <instance-parameter name="script" transfer-ownership="none" gs:managed-name="script" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35669">a Unicode script</doc>
            <type name="UnicodeScript" c:type="GUnicodeScript" gs:managed-name="UnicodeScript" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="script" transfer-ownership="none" gs:managed-name="script" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35669">a Unicode script</doc>
            <type name="UnicodeScript" c:type="GUnicodeScript" gs:managed-name="UnicodeScript" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
    </enumeration>
    <enumeration name="UnicodeType" c:type="GUnicodeType" gs:managed-name="UnicodeType">
      <doc xml:space="preserve" filename="gunicode.h" line="79">These are the possible character classifications from the
Unicode specification.
See [Unicode Character Database](http://www.unicode.org/reports/tr44/#General_Category_Values).</doc>
      <source-position filename="gunicode.h" line="148" />
      <member name="control" value="0" c:identifier="G_UNICODE_CONTROL" gs:managed-name="Control">
        <doc xml:space="preserve" filename="gunicode.h" line="81">General category "Other, Control" (Cc)</doc>
      </member>
      <member name="format" value="1" c:identifier="G_UNICODE_FORMAT" gs:managed-name="Format">
        <doc xml:space="preserve" filename="gunicode.h" line="82">General category "Other, Format" (Cf)</doc>
      </member>
      <member name="unassigned" value="2" c:identifier="G_UNICODE_UNASSIGNED" gs:managed-name="Unassigned">
        <doc xml:space="preserve" filename="gunicode.h" line="83">General category "Other, Not Assigned" (Cn)</doc>
      </member>
      <member name="private_use" value="3" c:identifier="G_UNICODE_PRIVATE_USE" gs:managed-name="PrivateUse">
        <doc xml:space="preserve" filename="gunicode.h" line="84">General category "Other, Private Use" (Co)</doc>
      </member>
      <member name="surrogate" value="4" c:identifier="G_UNICODE_SURROGATE" gs:managed-name="Surrogate">
        <doc xml:space="preserve" filename="gunicode.h" line="85">General category "Other, Surrogate" (Cs)</doc>
      </member>
      <member name="lowercase_letter" value="5" c:identifier="G_UNICODE_LOWERCASE_LETTER" gs:managed-name="LowercaseLetter">
        <doc xml:space="preserve" filename="gunicode.h" line="86">General category "Letter, Lowercase" (Ll)</doc>
      </member>
      <member name="modifier_letter" value="6" c:identifier="G_UNICODE_MODIFIER_LETTER" gs:managed-name="ModifierLetter">
        <doc xml:space="preserve" filename="gunicode.h" line="87">General category "Letter, Modifier" (Lm)</doc>
      </member>
      <member name="other_letter" value="7" c:identifier="G_UNICODE_OTHER_LETTER" gs:managed-name="OtherLetter">
        <doc xml:space="preserve" filename="gunicode.h" line="88">General category "Letter, Other" (Lo)</doc>
      </member>
      <member name="titlecase_letter" value="8" c:identifier="G_UNICODE_TITLECASE_LETTER" gs:managed-name="TitlecaseLetter">
        <doc xml:space="preserve" filename="gunicode.h" line="89">General category "Letter, Titlecase" (Lt)</doc>
      </member>
      <member name="uppercase_letter" value="9" c:identifier="G_UNICODE_UPPERCASE_LETTER" gs:managed-name="UppercaseLetter">
        <doc xml:space="preserve" filename="gunicode.h" line="90">General category "Letter, Uppercase" (Lu)</doc>
      </member>
      <member name="spacing_mark" value="10" c:identifier="G_UNICODE_SPACING_MARK" gs:managed-name="SpacingMark">
        <doc xml:space="preserve" filename="gunicode.h" line="91">General category "Mark, Spacing" (Mc)</doc>
      </member>
      <member name="enclosing_mark" value="11" c:identifier="G_UNICODE_ENCLOSING_MARK" gs:managed-name="EnclosingMark">
        <doc xml:space="preserve" filename="gunicode.h" line="92">General category "Mark, Enclosing" (Me)</doc>
      </member>
      <member name="non_spacing_mark" value="12" c:identifier="G_UNICODE_NON_SPACING_MARK" gs:managed-name="NonSpacingMark">
        <doc xml:space="preserve" filename="gunicode.h" line="93">General category "Mark, Nonspacing" (Mn)</doc>
      </member>
      <member name="decimal_number" value="13" c:identifier="G_UNICODE_DECIMAL_NUMBER" gs:managed-name="DecimalNumber">
        <doc xml:space="preserve" filename="gunicode.h" line="94">General category "Number, Decimal Digit" (Nd)</doc>
      </member>
      <member name="letter_number" value="14" c:identifier="G_UNICODE_LETTER_NUMBER" gs:managed-name="LetterNumber">
        <doc xml:space="preserve" filename="gunicode.h" line="95">General category "Number, Letter" (Nl)</doc>
      </member>
      <member name="other_number" value="15" c:identifier="G_UNICODE_OTHER_NUMBER" gs:managed-name="OtherNumber">
        <doc xml:space="preserve" filename="gunicode.h" line="96">General category "Number, Other" (No)</doc>
      </member>
      <member name="connect_punctuation" value="16" c:identifier="G_UNICODE_CONNECT_PUNCTUATION" gs:managed-name="ConnectPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="97">General category "Punctuation, Connector" (Pc)</doc>
      </member>
      <member name="dash_punctuation" value="17" c:identifier="G_UNICODE_DASH_PUNCTUATION" gs:managed-name="DashPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="98">General category "Punctuation, Dash" (Pd)</doc>
      </member>
      <member name="close_punctuation" value="18" c:identifier="G_UNICODE_CLOSE_PUNCTUATION" gs:managed-name="ClosePunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="99">General category "Punctuation, Close" (Pe)</doc>
      </member>
      <member name="final_punctuation" value="19" c:identifier="G_UNICODE_FINAL_PUNCTUATION" gs:managed-name="FinalPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="100">General category "Punctuation, Final quote" (Pf)</doc>
      </member>
      <member name="initial_punctuation" value="20" c:identifier="G_UNICODE_INITIAL_PUNCTUATION" gs:managed-name="InitialPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="101">General category "Punctuation, Initial quote" (Pi)</doc>
      </member>
      <member name="other_punctuation" value="21" c:identifier="G_UNICODE_OTHER_PUNCTUATION" gs:managed-name="OtherPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="102">General category "Punctuation, Other" (Po)</doc>
      </member>
      <member name="open_punctuation" value="22" c:identifier="G_UNICODE_OPEN_PUNCTUATION" gs:managed-name="OpenPunctuation">
        <doc xml:space="preserve" filename="gunicode.h" line="103">General category "Punctuation, Open" (Ps)</doc>
      </member>
      <member name="currency_symbol" value="23" c:identifier="G_UNICODE_CURRENCY_SYMBOL" gs:managed-name="CurrencySymbol">
        <doc xml:space="preserve" filename="gunicode.h" line="104">General category "Symbol, Currency" (Sc)</doc>
      </member>
      <member name="modifier_symbol" value="24" c:identifier="G_UNICODE_MODIFIER_SYMBOL" gs:managed-name="ModifierSymbol">
        <doc xml:space="preserve" filename="gunicode.h" line="105">General category "Symbol, Modifier" (Sk)</doc>
      </member>
      <member name="math_symbol" value="25" c:identifier="G_UNICODE_MATH_SYMBOL" gs:managed-name="MathSymbol">
        <doc xml:space="preserve" filename="gunicode.h" line="106">General category "Symbol, Math" (Sm)</doc>
      </member>
      <member name="other_symbol" value="26" c:identifier="G_UNICODE_OTHER_SYMBOL" gs:managed-name="OtherSymbol">
        <doc xml:space="preserve" filename="gunicode.h" line="107">General category "Symbol, Other" (So)</doc>
      </member>
      <member name="line_separator" value="27" c:identifier="G_UNICODE_LINE_SEPARATOR" gs:managed-name="LineSeparator">
        <doc xml:space="preserve" filename="gunicode.h" line="108">General category "Separator, Line" (Zl)</doc>
      </member>
      <member name="paragraph_separator" value="28" c:identifier="G_UNICODE_PARAGRAPH_SEPARATOR" gs:managed-name="ParagraphSeparator">
        <doc xml:space="preserve" filename="gunicode.h" line="109">General category "Separator, Paragraph" (Zp)</doc>
      </member>
      <member name="space_separator" value="29" c:identifier="G_UNICODE_SPACE_SEPARATOR" gs:managed-name="SpaceSeparator">
        <doc xml:space="preserve" filename="gunicode.h" line="110">General category "Separator, Space" (Zs)</doc>
      </member>
    </enumeration>
    <record name="VariantBuilder" c:type="GVariantBuilder" glib:type-name="GVariantBuilder" glib:get-type="g_variant_builder_get_type" c:symbol-prefix="variant_builder" gs:managed-name="VariantBuilder">
      <doc xml:space="preserve" filename="glib-2.0.c" line="2630">A utility type for constructing container-type #GVariant instances.

This is an opaque structure and may only be accessed using the
following functions.

#GVariantBuilder is not threadsafe in any way.  Do not attempt to
access it from more than one thread.</doc>
      <source-position filename="gvariant.h" line="309" />
      <union name="u" c:type="u" gs:managed-name="U">
        <source-position filename="gvariant.h" line="308" />
        <record name="s" c:type="s" gs:managed-name="S">
          <source-position filename="gvariant.h" line="306" />
          <field name="partial_magic" writable="1" gs:managed-name="PartialMagic">
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </field>
          <field name="type" writable="1" gs:managed-name="Type">
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </field>
          <field name="y" writable="1" gs:managed-name="Y">
            <array zero-terminated="0" fixed-size="14" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
            </array>
          </field>
        </record>
        <field name="x" writable="1" gs:managed-name="X">
          <array zero-terminated="0" fixed-size="16" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </array>
        </field>
      </union>
      <constructor name="new" c:identifier="g_variant_builder_new" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="New">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37563">Allocates and initialises a new #GVariantBuilder.

You should call g_variant_builder_unref() on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In most cases it is easier to place a #GVariantBuilder directly on
the stack of the calling function and initialise it with
g_variant_builder_init().</doc>
        <source-position filename="gvariant.h" line="366" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37577">a #GVariantBuilder</doc>
          <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37565">a container type</doc>
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37565">a container type</doc>
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
      <method name="add" c:identifier="g_variant_builder_add_value" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="Add">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37439">Adds @value to @builder.

It is an error to call this function in any way that would create an
inconsistent value to be constructed.  Some examples of this are
putting different types of items into an array, putting the wrong
types or number of items in a tuple, putting more than one value into
a variant, etc.

If @value is a floating reference (see g_variant_ref_sink()),
the @builder instance takes ownership of @value.</doc>
        <source-position filename="gvariant.h" line="384" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none" gs:managed-name="builder" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37441">a #GVariantBuilder</doc>
            <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37442">a #GVariant</doc>
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37442">a #GVariant</doc>
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="close" c:identifier="g_variant_builder_close" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="Close">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37482">Closes the subcontainer inside the given @builder that was opened by
the most recent call to g_variant_builder_open().

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: too few values added to the
subcontainer).</doc>
        <source-position filename="gvariant.h" line="382" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none" gs:managed-name="builder" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37484">a #GVariantBuilder</doc>
            <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="end" c:identifier="g_variant_builder_end" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="End">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37497">Ends the builder process and returns the constructed value.

It is not permissible to use @builder in any way after this call
except for reference counting operations (in the case of a
heap-allocated #GVariantBuilder) or by reinitialising it with
g_variant_builder_init() (in the case of stack-allocated). This
means that for the stack-allocated builders there is no need to
call g_variant_builder_clear() after the call to
g_variant_builder_end().

It is an error to call this function in any way that would create an
inconsistent value to be constructed (ie: insufficient number of
items added to a container with a specific number of children
required).  It is also an error to call this function if the builder
was created with an indefinite array or maybe type and no children
have been added; in this case it is impossible to infer the type of
the empty array.</doc>
        <source-position filename="gvariant.h" line="375" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37519">a new, floating, #GVariant</doc>
          <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none" gs:managed-name="builder" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37499">a #GVariantBuilder</doc>
            <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="open" c:identifier="g_variant_builder_open" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="Open">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37582">Opens a subcontainer inside the given @builder.  When done adding
items to the subcontainer, g_variant_builder_close() must be called. @type
is the type of the container: so to build a tuple of several values, @type
must include the tuple itself.

It is an error to call this function in any way that would cause an
inconsistent value to be constructed (ie: adding too many values or
a value of an incorrect type).

Example of building a nested variant:
|[&lt;!-- language="C" --&gt;
GVariantBuilder builder;
guint32 some_number = get_number ();
g_autoptr (GHashTable) some_dict = get_dict ();
GHashTableIter iter;
const gchar *key;
const GVariant *value;
g_autoptr (GVariant) output = NULL;

g_variant_builder_init (&amp;builder, G_VARIANT_TYPE ("(ua{sv})"));
g_variant_builder_add (&amp;builder, "u", some_number);
g_variant_builder_open (&amp;builder, G_VARIANT_TYPE ("a{sv}"));

g_hash_table_iter_init (&amp;iter, some_dict);
while (g_hash_table_iter_next (&amp;iter, (gpointer *) &amp;key, (gpointer *) &amp;value))
  {
    g_variant_builder_open (&amp;builder, G_VARIANT_TYPE ("{sv}"));
    g_variant_builder_add (&amp;builder, "s", key);
    g_variant_builder_add (&amp;builder, "v", value);
    g_variant_builder_close (&amp;builder);
  }

g_variant_builder_close (&amp;builder);

output = g_variant_builder_end (&amp;builder);
]|</doc>
        <source-position filename="gvariant.h" line="379" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none" gs:managed-name="builder" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37584">a #GVariantBuilder</doc>
            <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37585">the #GVariantType of the container</doc>
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="type" transfer-ownership="none" gs:managed-name="type" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37585">the #GVariantType of the container</doc>
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="ref" c:identifier="g_variant_builder_ref" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="Ref" gs:special-func="ref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37628">Increases the reference count on @builder.

Don't call this on stack-allocated #GVariantBuilder instances or bad
things will happen.</doc>
        <source-position filename="gvariant.h" line="370" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37637">a new reference to @builder</doc>
          <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none" gs:managed-name="builder" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37630">a #GVariantBuilder allocated by g_variant_builder_new()</doc>
            <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="unref" c:identifier="g_variant_builder_unref" version="2.24" gs:dll-name="glib-2.0" gs:managed-name="Unref" gs:special-func="unref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37642">Decreases the reference count on @builder.

In the event that there are no more references, releases all memory
associated with the #GVariantBuilder.

Don't call this on stack-allocated #GVariantBuilder instances or bad
things will happen.</doc>
        <source-position filename="gvariant.h" line="368" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="full" gs:managed-name="builder" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37644">a #GVariantBuilder allocated by g_variant_builder_new()</doc>
            <type name="VariantBuilder" c:type="GVariantBuilder*" gs:managed-name="VariantBuilder" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="g_variant_builder_get_type" gs:access-modifiers="private" gs:dll-name="gobject-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" gs:managed-name="GISharp.Lib.GObject.GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </record>
    <record name="VariantDict" c:type="GVariantDict" version="2.40" glib:type-name="GVariantDict" glib:get-type="g_variant_dict_get_type" c:symbol-prefix="variant_dict" gs:managed-name="VariantDict">
      <doc xml:space="preserve" filename="glib-2.0.c" line="2672">#GVariantDict is a mutable interface to #GVariant dictionaries.

It can be used for doing a sequence of dictionary lookups in an
efficient way on an existing #GVariant dictionary or it can be used
to construct new dictionaries with a hashtable-like interface.  It
can also be used for taking existing dictionaries and modifying them
in order to create new ones.

#GVariantDict can only be used with %G_VARIANT_TYPE_VARDICT
dictionaries.

It is possible to use #GVariantDict allocated on the stack or on the
heap.  When using a stack-allocated #GVariantDict, you begin with a
call to g_variant_dict_init() and free the resources with a call to
g_variant_dict_clear().

Heap-allocated #GVariantDict follows normal refcounting rules: you
allocate it with g_variant_dict_new() and use g_variant_dict_ref()
and g_variant_dict_unref().

g_variant_dict_end() is used to convert the #GVariantDict back into a
dictionary-type #GVariant.  When used with stack-allocated instances,
this also implicitly frees all associated memory, but for
heap-allocated instances, you must still call g_variant_dict_unref()
afterwards.

You will typically want to use a heap-allocated #GVariantDict when
you expose it as part of an API.  For most other uses, the
stack-allocated form will be more convenient.

Consider the following two examples that do the same thing in each
style: take an existing dictionary and look up the "count" uint32
key, adding 1 to it if it is found, or returning an error if the
key is not found.  Each returns the new dictionary as a floating
#GVariant.

## Using a stack-allocated GVariantDict

|[&lt;!-- language="C" --&gt;
  GVariant *
  add_to_count (GVariant  *orig,
                GError   **error)
  {
    GVariantDict dict;
    guint32 count;

    g_variant_dict_init (&amp;dict, orig);
    if (!g_variant_dict_lookup (&amp;dict, "count", "u", &amp;count))
      {
        g_set_error (...);
        g_variant_dict_clear (&amp;dict);
        return NULL;
      }

    g_variant_dict_insert (&amp;dict, "count", "u", count + 1);

    return g_variant_dict_end (&amp;dict);
  }
]|

## Using heap-allocated GVariantDict

|[&lt;!-- language="C" --&gt;
  GVariant *
  add_to_count (GVariant  *orig,
                GError   **error)
  {
    GVariantDict *dict;
    GVariant *result;
    guint32 count;

    dict = g_variant_dict_new (orig);

    if (g_variant_dict_lookup (dict, "count", "u", &amp;count))
      {
        g_variant_dict_insert (dict, "count", "u", count + 1);
        result = g_variant_dict_end (dict);
      }
    else
      {
        g_set_error (...);
        result = NULL;
      }

    g_variant_dict_unref (dict);

    return result;
  }
]|</doc>
      <source-position filename="gvariant.h" line="449" />
      <union name="u" c:type="u" gs:managed-name="U">
        <source-position filename="gvariant.h" line="448" />
        <record name="s" c:type="s" gs:managed-name="S">
          <source-position filename="gvariant.h" line="446" />
          <field name="asv" writable="1" gs:managed-name="Asv">
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </field>
          <field name="partial_magic" writable="1" gs:managed-name="PartialMagic">
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </field>
          <field name="y" writable="1" gs:managed-name="Y">
            <array zero-terminated="0" fixed-size="14" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
            </array>
          </field>
        </record>
        <field name="x" writable="1" gs:managed-name="X">
          <array zero-terminated="0" fixed-size="16" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </array>
        </field>
      </union>
      <constructor name="new" c:identifier="g_variant_dict_new" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="New">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37902">Allocates and initialises a new #GVariantDict.

You should call g_variant_dict_unref() on the return value when it
is no longer needed.  The memory will not be automatically freed by
any other call.

In some cases it may be easier to place a #GVariantDict directly on
the stack of the calling function and initialise it with
g_variant_dict_init().  This is particularly useful when you are
using #GVariantDict to construct a #GVariant.</doc>
        <source-position filename="gvariant.h" line="481" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37918">a #GVariantDict</doc>
          <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="from_asv" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="fromAsv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37904">the #GVariant with which to initialise the
  dictionary</doc>
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="from_asv" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="fromAsv" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37904">the #GVariant with which to initialise the
  dictionary</doc>
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </constructor>
      <method name="contains" c:identifier="g_variant_dict_contains" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="Contains">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37771">Checks if @key exists in @dict.</doc>
        <source-position filename="gvariant.h" line="497" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37778">%TRUE if @key is in @dict</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37773">a #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37774">the key to look up in the dictionary</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37774">the key to look up in the dictionary</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="end" c:identifier="g_variant_dict_end" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="End">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37783">Returns the current value of @dict as a #GVariant of type
%G_VARIANT_TYPE_VARDICT, clearing it in the process.

It is not permissible to use @dict in any way after this call except
for reference counting operations (in the case of a heap-allocated
#GVariantDict) or by reinitialising it with g_variant_dict_init() (in
the case of stack-allocated).</doc>
        <source-position filename="gvariant.h" line="514" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37795">a new, floating, #GVariant</doc>
          <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37785">a #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="insert" c:identifier="g_variant_dict_insert_value" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="Insert">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37842">Inserts (or replaces) a key in a #GVariantDict.

@value is consumed if it is floating.</doc>
        <source-position filename="gvariant.h" line="505" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37844">a #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37845">the key to insert a value for</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37846">the value to insert</doc>
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37845">the key to insert a value for</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="value" transfer-ownership="none" gs:managed-name="value" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37846">the value to insert</doc>
            <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="lookup" c:identifier="g_variant_dict_lookup_value" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="Lookup">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37879">Looks up a value in a #GVariantDict.

If @key is not found in @dictionary, %NULL is returned.

The @expected_type string specifies what type of value is expected.
If the value associated with @key has a different type then %NULL is
returned.

If the key is found and the value has the correct type, it is
returned.  If @expected_type was specified then any non-%NULL return
value will have this type.</doc>
        <source-position filename="gvariant.h" line="493" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37897">the value of the dictionary key, or %NULL</doc>
          <type name="Variant" c:type="GVariant*" gs:managed-name="Variant" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37881">a #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37882">the key to look up in the dictionary</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="expected_type" transfer-ownership="none" nullable="1" allow-none="1" gs:default="null" gs:managed-name="expectedType" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37883">a #GVariantType, or %NULL</doc>
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37882">the key to look up in the dictionary</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="expected_type" transfer-ownership="none" nullable="1" allow-none="1" gs:default="null" gs:managed-name="expectedType" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37883">a #GVariantType, or %NULL</doc>
            <type name="VariantType" c:type="const GVariantType*" gs:managed-name="VariantType" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="ref" c:identifier="g_variant_dict_ref" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="Ref" gs:special-func="ref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37923">Increases the reference count on @dict.

Don't call this on stack-allocated #GVariantDict instances or bad
things will happen.</doc>
        <source-position filename="gvariant.h" line="516" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37932">a new reference to @dict</doc>
          <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37925">a heap-allocated #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <method name="remove" c:identifier="g_variant_dict_remove" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="Remove">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37937">Removes a key and its associated value from a #GVariantDict.</doc>
        <source-position filename="gvariant.h" line="509" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37944">%TRUE if the key was found and removed</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="none" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37939">a #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37940">the key to remove</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="key" transfer-ownership="none" gs:managed-name="key" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37940">the key to remove</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="unref" c:identifier="g_variant_dict_unref" version="2.40" gs:dll-name="glib-2.0" gs:managed-name="Unref" gs:special-func="unref" gs:pinvoke-only="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37949">Decreases the reference count on @dict.

In the event that there are no more references, releases all memory
associated with the #GVariantDict.

Don't call this on stack-allocated #GVariantDict instances or bad
things will happen.</doc>
        <source-position filename="gvariant.h" line="518" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <type name="none" c:type="void" gs:managed-name="System.Void" />
        </return-value>
        <parameters>
          <instance-parameter name="dict" transfer-ownership="full" gs:managed-name="dict" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37951">a heap-allocated #GVariantDict</doc>
            <type name="VariantDict" c:type="GVariantDict*" gs:managed-name="VariantDict" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters />
      </method>
      <function name="get_g_type" gs:pinvoke-only="1" c:identifier="g_variant_dict_get_type" gs:access-modifiers="private" gs:dll-name="gobject-2.0" gs:managed-name="GetGType">
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <type name="GType" c:type="GType" gs:managed-name="GISharp.Lib.GObject.GType" />
        </return-value>
        <parameters />
        <gs:managed-parameters />
      </function>
    </record>
    <docsection name="arcbox" gs:managed-name="Arcbox">
      <doc xml:space="preserve" filename="glib-2.0.c" line="4828">An "atomically reference counted box", or "ArcBox", is an opaque wrapper
data type that is guaranteed to be as big as the size of a given data type,
and which augments the given data type with thread safe reference counting
semantics for its memory management.

ArcBox is useful if you have a plain old data type, like a structure
typically placed on the stack, and you wish to provide additional API
to use it on the heap; or if you want to implement a new type to be
passed around by reference without necessarily implementing copy/free
semantics or your own reference counting.

The typical use is:

|[&lt;!-- language="C" --&gt;
typedef struct {
  char *name;
  char *address;
  char *city;
  char *state;
  int age;
} Person;

Person *
person_new (void)
{
  return g_atomic_rc_box_new0 (Person);
}
]|

Every time you wish to acquire a reference on the memory, you should
call g_atomic_rc_box_acquire(); similarly, when you wish to release a reference
you should call g_atomic_rc_box_release():

|[&lt;!-- language="C" --&gt;
// Add a Person to the Database; the Database acquires ownership
// of the Person instance
void
add_person_to_database (Database *db, Person *p)
{
  db-&gt;persons = g_list_prepend (db-&gt;persons, g_atomic_rc_box_acquire (p));
}

// Removes a Person from the Database; the reference acquired by
// add_person_to_database() is released here
void
remove_person_from_database (Database *db, Person *p)
{
  db-&gt;persons = g_list_remove (db-&gt;persons, p);
  g_atomic_rc_box_release (p);
}
]|

If you have additional memory allocated inside the structure, you can
use g_atomic_rc_box_release_full(), which takes a function pointer, which
will be called if the reference released was the last:

|[&lt;!-- language="C" --&gt;
void
person_clear (Person *p)
{
  g_free (p-&gt;name);
  g_free (p-&gt;address);
  g_free (p-&gt;city);
  g_free (p-&gt;state);
}

void
remove_person_from_database (Database *db, Person *p)
{
  db-&gt;persons = g_list_remove (db-&gt;persons, p);
  g_atomic_rc_box_release_full (p, (GDestroyNotify) person_clear);
}
]|

If you wish to transfer the ownership of a reference counted data
type without increasing the reference count, you can use g_steal_pointer():

|[&lt;!-- language="C" --&gt;
  Person *p = g_atomic_rc_box_new (Person);

  fill_person_details (p);

  add_person_to_database (db, g_steal_pointer (&amp;p));
]|

## Thread safety

The reference counting operations on data allocated using g_atomic_rc_box_alloc(),
g_atomic_rc_box_new(), and g_atomic_rc_box_dup() are guaranteed to be atomic, and thus
can be safely be performed by different threads. It is important to note that
only the reference acquisition and release are atomic; changes to the content
of the data are your responsibility.

## Automatic pointer clean up

If you want to add g_autoptr() support to your plain old data type through
reference counting, you can use the G_DEFINE_AUTOPTR_CLEANUP_FUNC() and
g_atomic_rc_box_release():

|[&lt;!-- language="C" --&gt;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyDataStruct, g_atomic_rc_box_release)
]|

If you need to clear the contents of the data, you will need to use an
ancillary function that calls g_rc_box_release_full():

|[&lt;!-- language="C" --&gt;
static void
my_data_struct_release (MyDataStruct *data)
{
  // my_data_struct_clear() is defined elsewhere
  g_atomic_rc_box_release_full (data, (GDestroyNotify) my_data_struct_clear);
}

G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyDataStruct, my_data_struct_release)
]|</doc>
    </docsection>
    <docsection name="arrays" gs:managed-name="Arrays">
      <doc xml:space="preserve" filename="glib-2.0.c" line="4954">Arrays are similar to standard C arrays, except that they grow
automatically as elements are added.

Array elements can be of any size (though all elements of one array
are the same size), and the array can be automatically cleared to
'0's and zero-terminated.

To create a new array use g_array_new().

To add elements to an array with a cost of O(n) at worst, use
g_array_append_val(), g_array_append_vals(), g_array_prepend_val(),
g_array_prepend_vals(), g_array_insert_val() and g_array_insert_vals().

To access an element of an array in O(1) (to read it or to write it),
use g_array_index().

To set the size of an array, use g_array_set_size().

To free an array, use g_array_unref() or g_array_free().

All the sort functions are internally calling a quick-sort (or similar)
function with an average cost of O(n log(n)) and a worst case
cost of O(n^2).

Here is an example that stores integers in a #GArray:
|[&lt;!-- language="C" --&gt;
  GArray *garray;
  gint i;
  // We create a new array to store gint values.
  // We don't want it zero-terminated or cleared to 0's.
  garray = g_array_new (FALSE, FALSE, sizeof (gint));
  for (i = 0; i &lt; 10000; i++)
    g_array_append_val (garray, i);
  for (i = 0; i &lt; 10000; i++)
    if (g_array_index (garray, gint, i) != i)
      g_print ("ERROR: got %d instead of %d\n",
               g_array_index (garray, gint, i), i);
  g_array_free (garray, TRUE);
]|</doc>
    </docsection>
    <docsection name="arrays_byte" gs:managed-name="ArraysByte">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5002">#GByteArray is a mutable array of bytes based on #GArray, to provide arrays
of bytes which grow automatically as elements are added.

To create a new #GByteArray use g_byte_array_new(). To add elements to a
#GByteArray, use g_byte_array_append(), and g_byte_array_prepend().

To set the size of a #GByteArray, use g_byte_array_set_size().

To free a #GByteArray, use g_byte_array_free().

An example for using a #GByteArray:
|[&lt;!-- language="C" --&gt;
  GByteArray *gbarray;
  gint i;

  gbarray = g_byte_array_new ();
  for (i = 0; i &lt; 10000; i++)
    g_byte_array_append (gbarray, (guint8*) "abcd", 4);

  for (i = 0; i &lt; 10000; i++)
    {
      g_assert (gbarray-&gt;data[4*i] == 'a');
      g_assert (gbarray-&gt;data[4*i+1] == 'b');
      g_assert (gbarray-&gt;data[4*i+2] == 'c');
      g_assert (gbarray-&gt;data[4*i+3] == 'd');
    }

  g_byte_array_free (gbarray, TRUE);
]|

See #GBytes if you are interested in an immutable object representing a
sequence of bytes.</doc>
    </docsection>
    <docsection name="arrays_pointer" gs:managed-name="ArraysPointer">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5042">Pointer Arrays are similar to Arrays but are used only for storing
pointers.

If you remove elements from the array, elements at the end of the
array are moved into the space previously occupied by the removed
element. This means that you should not rely on the index of particular
elements remaining the same. You should also be careful when deleting
elements while iterating over the array.

To create a pointer array, use g_ptr_array_new().

To add elements to a pointer array, use g_ptr_array_add().

To remove elements from a pointer array, use g_ptr_array_remove(),
g_ptr_array_remove_index() or g_ptr_array_remove_index_fast().

To access an element of a pointer array, use g_ptr_array_index().

To set the size of a pointer array, use g_ptr_array_set_size().

To free a pointer array, use g_ptr_array_free().

An example using a #GPtrArray:
|[&lt;!-- language="C" --&gt;
  GPtrArray *array;
  gchar *string1 = "one";
  gchar *string2 = "two";
  gchar *string3 = "three";

  array = g_ptr_array_new ();
  g_ptr_array_add (array, (gpointer) string1);
  g_ptr_array_add (array, (gpointer) string2);
  g_ptr_array_add (array, (gpointer) string3);

  if (g_ptr_array_index (array, 0) != (gpointer) string1)
    g_print ("ERROR: got %p instead of %p\n",
             g_ptr_array_index (array, 0), string1);

  g_ptr_array_free (array, TRUE);
]|</doc>
    </docsection>
    <docsection name="async_queues" gs:managed-name="AsyncQueues">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5091">Often you need to communicate between different threads. In general
it's safer not to do this by shared memory, but by explicit message
passing. These messages only make sense asynchronously for
multi-threaded applications though, as a synchronous operation could
as well be done in the same thread.

Asynchronous queues are an exception from most other GLib data
structures, as they can be used simultaneously from multiple threads
without explicit locking and they bring their own builtin reference
counting. This is because the nature of an asynchronous queue is that
it will always be used by at least 2 concurrent threads.

For using an asynchronous queue you first have to create one with
g_async_queue_new(). #GAsyncQueue structs are reference counted,
use g_async_queue_ref() and g_async_queue_unref() to manage your
references.

A thread which wants to send a message to that queue simply calls
g_async_queue_push() to push the message to the queue.

A thread which is expecting messages from an asynchronous queue
simply calls g_async_queue_pop() for that queue. If no message is
available in the queue at that point, the thread is now put to sleep
until a message arrives. The message will be removed from the queue
and returned. The functions g_async_queue_try_pop() and
g_async_queue_timeout_pop() can be used to only check for the presence
of messages or to only wait a certain time for messages respectively.

For almost every function there exist two variants, one that locks
the queue and one that doesn't. That way you can hold the queue lock
(acquire it with g_async_queue_lock() and release it with
g_async_queue_unlock()) over multiple queue accessing instructions.
This can be necessary to ensure the integrity of the queue, but should
only be used when really necessary, as it can make your life harder
if used unwisely. Normally you should only use the locking function
variants (those without the _unlocked suffix).

In many cases, it may be more convenient to use #GThreadPool when
you need to distribute work to a set of worker threads instead of
using #GAsyncQueue manually. #GThreadPool uses a GAsyncQueue
internally.</doc>
    </docsection>
    <docsection name="atomic_operations" gs:managed-name="AtomicOperations">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5141">The following is a collection of compiler macros to provide atomic
access to integer and pointer-sized values.

The macros that have 'int' in the name will operate on pointers to
#gint and #guint.  The macros with 'pointer' in the name will operate
on pointers to any pointer-sized value, including #gsize.  There is
no support for 64bit operations on platforms with 32bit pointers
because it is not generally possible to perform these operations
atomically.

The get, set and exchange operations for integers and pointers
nominally operate on #gint and #gpointer, respectively.  Of the
arithmetic operations, the 'add' operation operates on (and returns)
signed integer values (#gint and #gssize) and the 'and', 'or', and
'xor' operations operate on (and return) unsigned integer values
(#guint and #gsize).

All of the operations act as a full compiler and (where appropriate)
hardware memory barrier.  Acquire and release or producer and
consumer barrier semantics are not available through this API.

It is very important that all accesses to a particular integer or
pointer be performed using only this API and that different sizes of
operation are not mixed or used on overlapping memory regions.  Never
read or assign directly from or to a value -- always use this API.

For simple reference counting purposes you should use
g_atomic_int_inc() and g_atomic_int_dec_and_test().  Other uses that
fall outside of simple reference counting patterns are prone to
subtle bugs and occasionally undefined behaviour.  It is also worth
noting that since all of these operations require global
synchronisation of the entire machine, they can be quite slow.  In
the case of performing multiple atomic operations it can often be
faster to simply acquire a mutex lock around the critical area,
perform the operations normally and then release the lock.</doc>
    </docsection>
    <docsection name="base64" gs:managed-name="Base64">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5185">Base64 is an encoding that allows a sequence of arbitrary bytes to be
encoded as a sequence of printable ASCII characters. For the definition
of Base64, see
[RFC 1421](http://www.ietf.org/rfc/rfc1421.txt)
or
[RFC 2045](http://www.ietf.org/rfc/rfc2045.txt).
Base64 is most commonly used as a MIME transfer encoding
for email.

GLib supports incremental encoding using g_base64_encode_step() and
g_base64_encode_close(). Incremental decoding can be done with
g_base64_decode_step(). To encode or decode data in one go, use
g_base64_encode() or g_base64_decode(). To avoid memory allocation when
decoding, you can use g_base64_decode_inplace().

Support for Base64 encoding has been added in GLib 2.12.</doc>
    </docsection>
    <docsection name="bookmarkfile" gs:managed-name="Bookmarkfile">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5209">GBookmarkFile lets you parse, edit or create files containing bookmarks
to URI, along with some meta-data about the resource pointed by the URI
like its MIME type, the application that is registering the bookmark and
the icon that should be used to represent the bookmark. The data is stored
using the
[Desktop Bookmark Specification](http://www.gnome.org/~ebassi/bookmark-spec).

The syntax of the bookmark files is described in detail inside the
Desktop Bookmark Specification, here is a quick summary: bookmark
files use a sub-class of the XML Bookmark Exchange Language
specification, consisting of valid UTF-8 encoded XML, under the
&lt;xbel&gt; root element; each bookmark is stored inside a
&lt;bookmark&gt; element, using its URI: no relative paths can
be used inside a bookmark file. The bookmark may have a user defined
title and description, to be used instead of the URI. Under the
&lt;metadata&gt; element, with its owner attribute set to
`http://freedesktop.org`, is stored the meta-data about a resource
pointed by its URI. The meta-data consists of the resource's MIME
type; the applications that have registered a bookmark; the groups
to which a bookmark belongs to; a visibility flag, used to set the
bookmark as "private" to the applications and groups that has it
registered; the URI and MIME type of an icon, to be used when
displaying the bookmark inside a GUI.

Here is an example of a bookmark file:
[bookmarks.xbel](https://git.gnome.org/browse/glib/tree/glib/tests/bookmarks.xbel)

A bookmark file might contain more than one bookmark; each bookmark
is accessed through its URI.

The important caveat of bookmark files is that when you add a new
bookmark you must also add the application that is registering it, using
g_bookmark_file_add_application() or g_bookmark_file_set_application_info().
If a bookmark has no applications then it won't be dumped when creating
the on disk representation, using g_bookmark_file_to_data() or
g_bookmark_file_to_file().

The #GBookmarkFile parser was added in GLib 2.12.</doc>
    </docsection>
    <docsection name="byte_order" gs:managed-name="ByteOrder">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5255">These macros provide a portable way to determine the host byte order
and to convert values between different byte orders.

The byte order is the order in which bytes are stored to create larger
data types such as the #gint and #glong values.
The host byte order is the byte order used on the current machine.

Some processors store the most significant bytes (i.e. the bytes that
hold the largest part of the value) first. These are known as big-endian
processors. Other processors (notably the x86 family) store the most
significant byte last. These are known as little-endian processors.

Finally, to complicate matters, some other processors store the bytes in
a rather curious order known as PDP-endian. For a 4-byte word, the 3rd
most significant byte is stored first, then the 4th, then the 1st and
finally the 2nd.

Obviously there is a problem when these different processors communicate
with each other, for example over networks or by using binary file formats.
This is where these macros come in. They are typically used to convert
values into a byte order which has been agreed on for use when
communicating between different processors. The Internet uses what is
known as 'network byte order' as the standard byte order (which is in
fact the big-endian byte order).

Note that the byte order conversion macros may evaluate their arguments
multiple times, thus you should not use them with arguments which have
side-effects.</doc>
    </docsection>
    <docsection name="checkedmath" gs:managed-name="Checkedmath">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5291">GLib offers a set of macros for doing additions and multiplications
of unsigned integers, with checks for overflows.

The helpers all have three arguments.  A pointer to the destination
is always the first argument and the operands to the operation are
the other two.

Following standard GLib convention, the helpers return %TRUE in case
of success (ie: no overflow).

The helpers may be macros, normal functions or inlines.  They may be
implemented with inline assembly or compiler intrinsics where
available.</doc>
    </docsection>
    <docsection name="checksum" gs:managed-name="Checksum">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5314">GLib provides a generic API for computing checksums (or "digests")
for a sequence of arbitrary bytes, using various hashing algorithms
like MD5, SHA-1 and SHA-256. Checksums are commonly used in various
environments and specifications.

GLib supports incremental checksums using the GChecksum data
structure, by calling g_checksum_update() as long as there's data
available and then using g_checksum_get_string() or
g_checksum_get_digest() to compute the checksum and return it either
as a string in hexadecimal form, or as a raw sequence of bytes. To
compute the checksum for binary blobs and NUL-terminated strings in
one go, use the convenience functions g_compute_checksum_for_data()
and g_compute_checksum_for_string(), respectively.

Support for checksums has been added in GLib 2.16</doc>
    </docsection>
    <docsection name="conversions" gs:managed-name="Conversions">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5337">The g_convert() family of function wraps the functionality of iconv().
In addition to pure character set conversions, GLib has functions to
deal with the extra complications of encodings for file names.

## File Name Encodings

Historically, UNIX has not had a defined encoding for file names:
a file name is valid as long as it does not have path separators
in it ("/"). However, displaying file names may require conversion:
from the character set in which they were created, to the character
set in which the application operates. Consider the Spanish file name
"Presentación.sxi". If the application which created it uses
ISO-8859-1 for its encoding,
|[
Character:  P  r  e  s  e  n  t  a  c  i  ó  n  .  s  x  i
Hex code:   50 72 65 73 65 6e 74 61 63 69 f3 6e 2e 73 78 69
]|
However, if the application use UTF-8, the actual file name on
disk would look like this:
|[
Character:  P  r  e  s  e  n  t  a  c  i  ó     n  .  s  x  i
Hex code:   50 72 65 73 65 6e 74 61 63 69 c3 b3 6e 2e 73 78 69
]|
Glib uses UTF-8 for its strings, and GUI toolkits like GTK+ that use
GLib do the same thing. If you get a file name from the file system,
for example, from readdir() or from g_dir_read_name(), and you wish
to display the file name to the user, you  will need to convert it
into UTF-8. The opposite case is when the user types the name of a
file they wish to save: the toolkit will give you that string in
UTF-8 encoding, and you will need to convert it to the character
set used for file names before you can create the file with open()
or fopen().

By default, GLib assumes that file names on disk are in UTF-8
encoding. This is a valid assumption for file systems which
were created relatively recently: most applications use UTF-8
encoding for their strings, and that is also what they use for
the file names they create. However, older file systems may
still contain file names created in "older" encodings, such as
ISO-8859-1. In this case, for compatibility reasons, you may want
to instruct GLib to use that particular encoding for file names
rather than UTF-8. You can do this by specifying the encoding for
file names in the [`G_FILENAME_ENCODING`][G_FILENAME_ENCODING]
environment variable. For example, if your installation uses
ISO-8859-1 for file names, you can put this in your `~/.profile`:
|[
export G_FILENAME_ENCODING=ISO-8859-1
]|
GLib provides the functions g_filename_to_utf8() and
g_filename_from_utf8() to perform the necessary conversions.
These functions convert file names from the encoding specified
in `G_FILENAME_ENCODING` to UTF-8 and vice-versa. This
[diagram][file-name-encodings-diagram] illustrates how
these functions are used to convert between UTF-8 and the
encoding for file names in the file system.

## Conversion between file name encodings # {#file-name-encodings-diagram)

![](file-name-encodings.png)

## Checklist for Application Writers

This section is a practical summary of the detailed
things to do to make sure your applications process file
name encodings correctly.

1. If you get a file name from the file system from a function
   such as readdir() or gtk_file_chooser_get_filename(), you do
   not need to do any conversion to pass that file name to
   functions like open(), rename(), or fopen() -- those are "raw"
   file names which the file system understands.

2. If you need to display a file name, convert it to UTF-8 first
   by using g_filename_to_utf8(). If conversion fails, display a
   string like "Unknown file name". Do not convert this string back
   into the encoding used for file names if you wish to pass it to
   the file system; use the original file name instead.

   For example, the document window of a word processor could display
   "Unknown file name" in its title bar but still let the user save
   the file, as it would keep the raw file name internally. This
   can happen if the user has not set the `G_FILENAME_ENCODING`
   environment variable even though he has files whose names are
   not encoded in UTF-8.

3. If your user interface lets the user type a file name for saving
   or renaming, convert it to the encoding used for file names in
   the file system by using g_filename_from_utf8(). Pass the converted
   file name to functions like fopen(). If conversion fails, ask the
   user to enter a different file name. This can happen if the user
   types Japanese characters when `G_FILENAME_ENCODING` is set to
   `ISO-8859-1`, for example.</doc>
    </docsection>
    <docsection name="datalist" gs:managed-name="Datalist">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5437">Keyed data lists provide lists of arbitrary data elements which can
be accessed either with a string or with a #GQuark corresponding to
the string.

The #GQuark methods are quicker, since the strings have to be
converted to #GQuarks anyway.

Data lists are used for associating arbitrary data with #GObjects,
using g_object_set_data() and related functions.

To create a datalist, use g_datalist_init().

To add data elements to a datalist use g_datalist_id_set_data(),
g_datalist_id_set_data_full(), g_datalist_set_data() and
g_datalist_set_data_full().

To get data elements from a datalist use g_datalist_id_get_data()
and g_datalist_get_data().

To iterate over all data elements in a datalist use
g_datalist_foreach() (not thread-safe).

To remove data elements from a datalist use
g_datalist_id_remove_data() and g_datalist_remove_data().

To remove all data elements from a datalist, use g_datalist_clear().</doc>
    </docsection>
    <docsection name="datasets" gs:managed-name="Datasets">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5472">Datasets associate groups of data elements with particular memory
locations. These are useful if you need to associate data with a
structure returned from an external library. Since you cannot modify
the structure, you use its location in memory as the key into a
dataset, where you can associate any number of data elements with it.

There are two forms of most of the dataset functions. The first form
uses strings to identify the data elements associated with a
location. The second form uses #GQuark identifiers, which are
created with a call to g_quark_from_string() or
g_quark_from_static_string(). The second form is quicker, since it
does not require looking up the string in the hash table of #GQuark
identifiers.

There is no function to create a dataset. It is automatically
created as soon as you add elements to it.

To add data elements to a dataset use g_dataset_id_set_data(),
g_dataset_id_set_data_full(), g_dataset_set_data() and
g_dataset_set_data_full().

To get data elements from a dataset use g_dataset_id_get_data() and
g_dataset_get_data().

To iterate over all data elements in a dataset use
g_dataset_foreach() (not thread-safe).

To remove data elements from a dataset use
g_dataset_id_remove_data() and g_dataset_remove_data().

To destroy a dataset, use g_dataset_destroy().</doc>
    </docsection>
    <docsection name="date" gs:managed-name="Date">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5512">The #GDate data structure represents a day between January 1, Year 1,
and sometime a few thousand years in the future (right now it will go
to the year 65535 or so, but g_date_set_parse() only parses up to the
year 8000 or so - just count on "a few thousand"). #GDate is meant to
represent everyday dates, not astronomical dates or historical dates
or ISO timestamps or the like. It extrapolates the current Gregorian
calendar forward and backward in time; there is no attempt to change
the calendar to match time periods or locations. #GDate does not store
time information; it represents a day.

The #GDate implementation has several nice features; it is only a
64-bit struct, so storing large numbers of dates is very efficient. It
can keep both a Julian and day-month-year representation of the date,
since some calculations are much easier with one representation or the
other. A Julian representation is simply a count of days since some
fixed day in the past; for #GDate the fixed day is January 1, 1 AD.
("Julian" dates in the #GDate API aren't really Julian dates in the
technical sense; technically, Julian dates count from the start of the
Julian period, Jan 1, 4713 BC).

#GDate is simple to use. First you need a "blank" date; you can get a
dynamically allocated date from g_date_new(), or you can declare an
automatic variable or array and initialize it by
calling g_date_clear(). A cleared date is safe; it's safe to call
g_date_set_dmy() and the other mutator functions to initialize the
value of a cleared date. However, a cleared date is initially
invalid, meaning that it doesn't represent a day that exists.
It is undefined to call any of the date calculation routines on an
invalid date. If you obtain a date from a user or other
unpredictable source, you should check its validity with the
g_date_valid() predicate. g_date_valid() is also used to check for
errors with g_date_set_parse() and other functions that can
fail. Dates can be invalidated by calling g_date_clear() again.

It is very important to use the API to access the #GDate
struct. Often only the day-month-year or only the Julian
representation is valid. Sometimes neither is valid. Use the API.

GLib also features #GDateTime which represents a precise time.</doc>
    </docsection>
    <docsection name="date-time" gs:managed-name="DateTime">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5559">#GDateTime is a structure that combines a Gregorian date and time
into a single structure.  It provides many conversion and methods to
manipulate dates and times.  Time precision is provided down to
microseconds and the time can range (proleptically) from 0001-01-01
00:00:00 to 9999-12-31 23:59:59.999999.  #GDateTime follows POSIX
time in the sense that it is oblivious to leap seconds.

#GDateTime is an immutable object; once it has been created it cannot
be modified further.  All modifiers will create a new #GDateTime.
Nearly all such functions can fail due to the date or time going out
of range, in which case %NULL will be returned.

#GDateTime is reference counted: the reference count is increased by calling
g_date_time_ref() and decreased by calling g_date_time_unref(). When the
reference count drops to 0, the resources allocated by the #GDateTime
structure are released.

Many parts of the API may produce non-obvious results.  As an
example, adding two months to January 31st will yield March 31st
whereas adding one month and then one month again will yield either
March 28th or March 29th.  Also note that adding 24 hours is not
always the same as adding one day (since days containing daylight
savings time transitions are either 23 or 25 hours in length).

#GDateTime is available since GLib 2.26.</doc>
    </docsection>
    <docsection name="error_reporting" gs:managed-name="ErrorReporting">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5593">GLib provides a standard method of reporting errors from a called
function to the calling code. (This is the same problem solved by
exceptions in other languages.) It's important to understand that
this method is both a data type (the #GError struct) and a [set of
rules][gerror-rules]. If you use #GError incorrectly, then your code will not
properly interoperate with other code that uses #GError, and users
of your API will probably get confused. In most cases, [using #GError is
preferred over numeric error codes][gerror-comparison], but there are
situations where numeric error codes are useful for performance.

First and foremost: #GError should only be used to report recoverable
runtime errors, never to report programming errors. If the programmer
has screwed up, then you should use g_warning(), g_return_if_fail(),
g_assert(), g_error(), or some similar facility. (Incidentally,
remember that the g_error() function should only be used for
programming errors, it should not be used to print any error
reportable via #GError.)

Examples of recoverable runtime errors are "file not found" or
"failed to parse input." Examples of programming errors are "NULL
passed to strcmp()" or "attempted to free the same pointer twice."
These two kinds of errors are fundamentally different: runtime errors
should be handled or reported to the user, programming errors should
be eliminated by fixing the bug in the program. This is why most
functions in GLib and GTK+ do not use the #GError facility.

Functions that can fail take a return location for a #GError as their
last argument. On error, a new #GError instance will be allocated and
returned to the caller via this argument. For example:
|[&lt;!-- language="C" --&gt;
gboolean g_file_get_contents (const gchar  *filename,
                              gchar       **contents,
                              gsize        *length,
                              GError      **error);
]|
If you pass a non-%NULL value for the `error` argument, it should
point to a location where an error can be placed. For example:
|[&lt;!-- language="C" --&gt;
gchar *contents;
GError *err = NULL;

g_file_get_contents ("foo.txt", &amp;contents, NULL, &amp;err);
g_assert ((contents == NULL &amp;&amp; err != NULL) || (contents != NULL &amp;&amp; err == NULL));
if (err != NULL)
  {
    // Report error to user, and free error
    g_assert (contents == NULL);
    fprintf (stderr, "Unable to read file: %s\n", err-&gt;message);
    g_error_free (err);
  }
else
  {
    // Use file contents
    g_assert (contents != NULL);
  }
]|
Note that `err != NULL` in this example is a reliable indicator
of whether g_file_get_contents() failed. Additionally,
g_file_get_contents() returns a boolean which
indicates whether it was successful.

Because g_file_get_contents() returns %FALSE on failure, if you
are only interested in whether it failed and don't need to display
an error message, you can pass %NULL for the @error argument:
|[&lt;!-- language="C" --&gt;
if (g_file_get_contents ("foo.txt", &amp;contents, NULL, NULL)) // ignore errors
  // no error occurred
  ;
else
  // error
  ;
]|

The #GError object contains three fields: @domain indicates the module
the error-reporting function is located in, @code indicates the specific
error that occurred, and @message is a user-readable error message with
as many details as possible. Several functions are provided to deal
with an error received from a called function: g_error_matches()
returns %TRUE if the error matches a given domain and code,
g_propagate_error() copies an error into an error location (so the
calling function will receive it), and g_clear_error() clears an
error location by freeing the error and resetting the location to
%NULL. To display an error to the user, simply display the @message,
perhaps along with additional context known only to the calling
function (the file being opened, or whatever - though in the
g_file_get_contents() case, the @message already contains a filename).

Note, however, that many error messages are too technical to display to the
user in an application, so prefer to use g_error_matches() to categorize errors
from called functions, and build an appropriate error message for the context
within your application. Error messages from a #GError are more appropriate
to be printed in system logs or on the command line. They are typically
translated.

When implementing a function that can report errors, the basic
tool is g_set_error(). Typically, if a fatal error occurs you
want to g_set_error(), then return immediately. g_set_error()
does nothing if the error location passed to it is %NULL.
Here's an example:
|[&lt;!-- language="C" --&gt;
gint
foo_open_file (GError **error)
{
  gint fd;
  int saved_errno;

  g_return_val_if_fail (error == NULL || *error == NULL, -1);

  fd = open ("file.txt", O_RDONLY);
  saved_errno = errno;

  if (fd &lt; 0)
    {
      g_set_error (error,
                   FOO_ERROR,                 // error domain
                   FOO_ERROR_BLAH,            // error code
                   "Failed to open file: %s", // error message format string
                   g_strerror (saved_errno));
      return -1;
    }
  else
    return fd;
}
]|

Things are somewhat more complicated if you yourself call another
function that can report a #GError. If the sub-function indicates
fatal errors in some way other than reporting a #GError, such as
by returning %TRUE on success, you can simply do the following:
|[&lt;!-- language="C" --&gt;
gboolean
my_function_that_can_fail (GError **err)
{
  g_return_val_if_fail (err == NULL || *err == NULL, FALSE);

  if (!sub_function_that_can_fail (err))
    {
      // assert that error was set by the sub-function
      g_assert (err == NULL || *err != NULL);
      return FALSE;
    }

  // otherwise continue, no error occurred
  g_assert (err == NULL || *err == NULL);
}
]|

If the sub-function does not indicate errors other than by
reporting a #GError (or if its return value does not reliably indicate
errors) you need to create a temporary #GError
since the passed-in one may be %NULL. g_propagate_error() is
intended for use in this case.
|[&lt;!-- language="C" --&gt;
gboolean
my_function_that_can_fail (GError **err)
{
  GError *tmp_error;

  g_return_val_if_fail (err == NULL || *err == NULL, FALSE);

  tmp_error = NULL;
  sub_function_that_can_fail (&amp;tmp_error);

  if (tmp_error != NULL)
    {
      // store tmp_error in err, if err != NULL,
      // otherwise call g_error_free() on tmp_error
      g_propagate_error (err, tmp_error);
      return FALSE;
    }

  // otherwise continue, no error occurred
}
]|

Error pileups are always a bug. For example, this code is incorrect:
|[&lt;!-- language="C" --&gt;
gboolean
my_function_that_can_fail (GError **err)
{
  GError *tmp_error;

  g_return_val_if_fail (err == NULL || *err == NULL, FALSE);

  tmp_error = NULL;
  sub_function_that_can_fail (&amp;tmp_error);
  other_function_that_can_fail (&amp;tmp_error);

  if (tmp_error != NULL)
    {
      g_propagate_error (err, tmp_error);
      return FALSE;
    }
}
]|
@tmp_error should be checked immediately after sub_function_that_can_fail(),
and either cleared or propagated upward. The rule is: after each error,
you must either handle the error, or return it to the calling function.

Note that passing %NULL for the error location is the equivalent
of handling an error by always doing nothing about it. So the
following code is fine, assuming errors in sub_function_that_can_fail()
are not fatal to my_function_that_can_fail():
|[&lt;!-- language="C" --&gt;
gboolean
my_function_that_can_fail (GError **err)
{
  GError *tmp_error;

  g_return_val_if_fail (err == NULL || *err == NULL, FALSE);

  sub_function_that_can_fail (NULL); // ignore errors

  tmp_error = NULL;
  other_function_that_can_fail (&amp;tmp_error);

  if (tmp_error != NULL)
    {
      g_propagate_error (err, tmp_error);
      return FALSE;
    }
}
]|

Note that passing %NULL for the error location ignores errors;
it's equivalent to
`try { sub_function_that_can_fail (); } catch (...) {}`
in C++. It does not mean to leave errors unhandled; it means
to handle them by doing nothing.

Error domains and codes are conventionally named as follows:

- The error domain is called &lt;NAMESPACE&gt;_&lt;MODULE&gt;_ERROR,
  for example %G_SPAWN_ERROR or %G_THREAD_ERROR:
  |[&lt;!-- language="C" --&gt;
  #define G_SPAWN_ERROR g_spawn_error_quark ()

  G_DEFINE_QUARK (g-spawn-error-quark, g_spawn_error)
  ]|

- The quark function for the error domain is called
  &lt;namespace&gt;_&lt;module&gt;_error_quark,
  for example g_spawn_error_quark() or g_thread_error_quark().

- The error codes are in an enumeration called
  &lt;Namespace&gt;&lt;Module&gt;Error;
  for example, #GThreadError or #GSpawnError.

- Members of the error code enumeration are called
  &lt;NAMESPACE&gt;_&lt;MODULE&gt;_ERROR_&lt;CODE&gt;,
  for example %G_SPAWN_ERROR_FORK or %G_THREAD_ERROR_AGAIN.

- If there's a "generic" or "unknown" error code for unrecoverable
  errors it doesn't make sense to distinguish with specific codes,
  it should be called &lt;NAMESPACE&gt;_&lt;MODULE&gt;_ERROR_FAILED,
  for example %G_SPAWN_ERROR_FAILED. In the case of error code
  enumerations that may be extended in future releases, you should
  generally not handle this error code explicitly, but should
  instead treat any unrecognized error code as equivalent to
  FAILED.

## Comparison of #GError and traditional error handling # {#gerror-comparison}

#GError has several advantages over traditional numeric error codes:
importantly, tools like
[gobject-introspection](https://developer.gnome.org/gi/stable/) understand
#GErrors and convert them to exceptions in bindings; the message includes
more information than just a code; and use of a domain helps prevent
misinterpretation of error codes.

#GError has disadvantages though: it requires a memory allocation, and
formatting the error message string has a performance overhead. This makes it
unsuitable for use in retry loops where errors are a common case, rather than
being unusual. For example, using %G_IO_ERROR_WOULD_BLOCK means hitting these
overheads in the normal control flow. String formatting overhead can be
eliminated by using g_set_error_literal() in some cases.

These performance issues can be compounded if a function wraps the #GErrors
returned by the functions it calls: this multiplies the number of allocations
and string formatting operations. This can be partially mitigated by using
g_prefix_error().

## Rules for use of #GError # {#gerror-rules}

Summary of rules for use of #GError:

- Do not report programming errors via #GError.

- The last argument of a function that returns an error should
  be a location where a #GError can be placed (i.e. "#GError** error").
  If #GError is used with varargs, the #GError** should be the last
  argument before the "...".

- The caller may pass %NULL for the #GError** if they are not interested
  in details of the exact error that occurred.

- If %NULL is passed for the #GError** argument, then errors should
  not be returned to the caller, but your function should still
  abort and return if an error occurs. That is, control flow should
  not be affected by whether the caller wants to get a #GError.

- If a #GError is reported, then your function by definition had a
  fatal failure and did not complete whatever it was supposed to do.
  If the failure was not fatal, then you handled it and you should not
  report it. If it was fatal, then you must report it and discontinue
  whatever you were doing immediately.

- If a #GError is reported, out parameters are not guaranteed to
  be set to any defined value.

- A #GError* must be initialized to %NULL before passing its address
  to a function that can report errors.

- "Piling up" errors is always a bug. That is, if you assign a
  new #GError to a #GError* that is non-%NULL, thus overwriting
  the previous error, it indicates that you should have aborted
  the operation instead of continuing. If you were able to continue,
  you should have cleared the previous error with g_clear_error().
  g_set_error() will complain if you pile up errors.

- By convention, if you return a boolean value indicating success
  then %TRUE means success and %FALSE means failure. Avoid creating
  functions which have a boolean return value and a GError parameter,
  but where the boolean does something other than signal whether the
  GError is set.  Among other problems, it requires C callers to allocate
  a temporary error.  Instead, provide a "gboolean *" out parameter.
  There are functions in GLib itself such as g_key_file_has_key() that
  are deprecated because of this. If %FALSE is returned, the error must
  be set to a non-%NULL value.  One exception to this is that in situations
  that are already considered to be undefined behaviour (such as when a
  g_return_val_if_fail() check fails), the error need not be set.
  Instead of checking separately whether the error is set, callers
  should ensure that they do not provoke undefined behaviour, then
  assume that the error will be set on failure.

- A %NULL return value is also frequently used to mean that an error
  occurred. You should make clear in your documentation whether %NULL
  is a valid return value in non-error cases; if %NULL is a valid value,
  then users must check whether an error was returned to see if the
  function succeeded.

- When implementing a function that can report errors, you may want
  to add a check at the top of your function that the error return
  location is either %NULL or contains a %NULL error (e.g.
  `g_return_if_fail (error == NULL || *error == NULL);`).</doc>
    </docsection>
    <docsection name="fileutils" gs:managed-name="Fileutils">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5946">Do not use these APIs unless you are porting a POSIX application to Windows.
A more high-level file access API is provided as GIO — see the documentation
for #GFile.

There is a group of functions which wrap the common POSIX functions
dealing with filenames (g_open(), g_rename(), g_mkdir(), g_stat(),
g_unlink(), g_remove(), g_fopen(), g_freopen()). The point of these
wrappers is to make it possible to handle file names with any Unicode
characters in them on Windows without having to use ifdefs and the
wide character API in the application code.

On some Unix systems, these APIs may be defined as identical to their POSIX
counterparts. For this reason, you must check for and include the necessary
header files (such as `fcntl.h`) before using functions like g_creat(). You
must also define the relevant feature test macros.

The pathname argument should be in the GLib file name encoding.
On POSIX this is the actual on-disk encoding which might correspond
to the locale settings of the process (or the `G_FILENAME_ENCODING`
environment variable), or not.

On Windows the GLib file name encoding is UTF-8. Note that the
Microsoft C library does not use UTF-8, but has separate APIs for
current system code page and wide characters (UTF-16). The GLib
wrappers call the wide character API if present (on modern Windows
systems), otherwise convert to/from the system code page.

Another group of functions allows to open and read directories
in the GLib file name encoding. These are g_dir_open(),
g_dir_read_name(), g_dir_rewind(), g_dir_close().</doc>
    </docsection>
    <docsection name="ghostutils" gs:managed-name="Ghostutils">
      <doc xml:space="preserve" filename="glib-2.0.c" line="5984">Functions for manipulating internet hostnames; in particular, for
converting between Unicode and ASCII-encoded forms of
Internationalized Domain Names (IDNs).

The
[Internationalized Domain Names for Applications (IDNA)](http://www.ietf.org/rfc/rfc3490.txt)
standards allow for the use
of Unicode domain names in applications, while providing
backward-compatibility with the old ASCII-only DNS, by defining an
ASCII-Compatible Encoding of any given Unicode name, which can be
used with non-IDN-aware applications and protocols. (For example,
"Παν語.org" maps to "xn--4wa8awb4637h.org".)</doc>
    </docsection>
    <docsection name="gunix" gs:managed-name="Gunix">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6077">Most of GLib is intended to be portable; in contrast, this set of
functions is designed for programs which explicitly target UNIX,
or are using it to build higher level abstractions which would be
conditionally compiled if the platform matches G_OS_UNIX.

To use these functions, you must explicitly include the
"glib-unix.h" header.</doc>
    </docsection>
    <docsection name="hash_tables" gs:managed-name="HashTables">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6617">A #GHashTable provides associations between keys and values which is
optimized so that given a key, the associated value can be found,
inserted or removed in amortized O(1). All operations going through
each element take O(n) time (list all keys/values, table resize, etc.).

Note that neither keys nor values are copied when inserted into the
#GHashTable, so they must exist for the lifetime of the #GHashTable.
This means that the use of static strings is OK, but temporary
strings (i.e. those created in buffers and those returned by GTK
widgets) should be copied with g_strdup() before being inserted.

If keys or values are dynamically allocated, you must be careful to
ensure that they are freed when they are removed from the
#GHashTable, and also when they are overwritten by new insertions
into the #GHashTable. It is also not advisable to mix static strings
and dynamically-allocated strings in a #GHashTable, because it then
becomes difficult to determine whether the string should be freed.

To create a #GHashTable, use g_hash_table_new().

To insert a key and value into a #GHashTable, use
g_hash_table_insert().

To look up a value corresponding to a given key, use
g_hash_table_lookup() and g_hash_table_lookup_extended().

g_hash_table_lookup_extended() can also be used to simply
check if a key is present in the hash table.

To remove a key and value, use g_hash_table_remove().

To call a function for each key and value pair use
g_hash_table_foreach() or use an iterator to iterate over the
key/value pairs in the hash table, see #GHashTableIter. The iteration order
of a hash table is not defined, and you must not rely on iterating over
keys/values in the same order as they were inserted.

To destroy a #GHashTable use g_hash_table_destroy().

A common use-case for hash tables is to store information about a
set of keys, without associating any particular value with each
key. GHashTable optimizes one way of doing so: If you store only
key-value pairs where key == value, then GHashTable does not
allocate memory to store the values, which can be a considerable
space saving, if your set is large. The functions
g_hash_table_add() and g_hash_table_contains() are designed to be
used when using #GHashTable this way.

#GHashTable is not designed to be statically initialised with keys and
values known at compile time. To build a static hash table, use a tool such
as [gperf](https://www.gnu.org/software/gperf/).</doc>
    </docsection>
    <docsection name="hmac" gs:managed-name="Hmac">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6677">HMACs should be used when producing a cookie or hash based on data
and a key. Simple mechanisms for using SHA1 and other algorithms to
digest a key and data together are vulnerable to various security
issues.
[HMAC](http://en.wikipedia.org/wiki/HMAC)
uses algorithms like SHA1 in a secure way to produce a digest of a
key and data.

Both the key and data are arbitrary byte arrays of bytes or characters.

Support for HMAC Digests has been added in GLib 2.30, and support for SHA-512
in GLib 2.42. Support for SHA-384 was added in GLib 2.52.</doc>
    </docsection>
    <docsection name="hooks" gs:managed-name="Hooks">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6697">The #GHookList, #GHook and their related functions provide support for
lists of hook functions. Functions can be added and removed from the lists,
and the list of hook functions can be invoked.</doc>
    </docsection>
    <docsection name="i18n" gs:managed-name="I18n">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6708">GLib doesn't force any particular localization method upon its users.
But since GLib itself is localized using the gettext() mechanism, it seems
natural to offer the de-facto standard gettext() support macros in an
easy-to-use form.

In order to use these macros in an application, you must include
`&lt;glib/gi18n.h&gt;`. For use in a library, you must include
`&lt;glib/gi18n-lib.h&gt;`
after defining the %GETTEXT_PACKAGE macro suitably for your library:
|[&lt;!-- language="C" --&gt;
#define GETTEXT_PACKAGE "gtk20"
#include &lt;glib/gi18n-lib.h&gt;
]|
For an application, note that you also have to call bindtextdomain(),
bind_textdomain_codeset(), textdomain() and setlocale() early on in your
main() to make gettext() work. For example:
|[&lt;!-- language="C" --&gt;
#include &lt;glib/gi18n.h&gt;
#include &lt;locale.h&gt;

int
main (int argc, char **argv)
{
  setlocale (LC_ALL, "");
  bindtextdomain (GETTEXT_PACKAGE, DATADIR "/locale");
  bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
  textdomain (GETTEXT_PACKAGE);

  // Rest of your application.
}
]|
where `DATADIR` is as typically provided by automake or Meson.

For a library, you only have to call bindtextdomain() and
bind_textdomain_codeset() in your initialization function. If your library
doesn't have an initialization function, you can call the functions before
the first translated message.

The
[gettext manual](http://www.gnu.org/software/gettext/manual/gettext.html#Maintainers)
covers details of how to integrate gettext into a project’s build system and
workflow.</doc>
    </docsection>
    <docsection name="iochannels" gs:managed-name="Iochannels">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6759">The #GIOChannel data type aims to provide a portable method for
using file descriptors, pipes, and sockets, and integrating them
into the [main event loop][glib-The-Main-Event-Loop]. Currently,
full support is available on UNIX platforms, support for Windows
is only partially complete.

To create a new #GIOChannel on UNIX systems use
g_io_channel_unix_new(). This works for plain file descriptors,
pipes and sockets. Alternatively, a channel can be created for a
file in a system independent manner using g_io_channel_new_file().

Once a #GIOChannel has been created, it can be used in a generic
manner with the functions g_io_channel_read_chars(),
g_io_channel_write_chars(), g_io_channel_seek_position(), and
g_io_channel_shutdown().

To add a #GIOChannel to the [main event loop][glib-The-Main-Event-Loop],
use g_io_add_watch() or g_io_add_watch_full(). Here you specify which
events you are interested in on the #GIOChannel, and provide a
function to be called whenever these events occur.

#GIOChannel instances are created with an initial reference count of 1.
g_io_channel_ref() and g_io_channel_unref() can be used to
increment or decrement the reference count respectively. When the
reference count falls to 0, the #GIOChannel is freed. (Though it
isn't closed automatically, unless it was created using
g_io_channel_new_file().) Using g_io_add_watch() or
g_io_add_watch_full() increments a channel's reference count.

The new functions g_io_channel_read_chars(),
g_io_channel_read_line(), g_io_channel_read_line_string(),
g_io_channel_read_to_end(), g_io_channel_write_chars(),
g_io_channel_seek_position(), and g_io_channel_flush() should not be
mixed with the deprecated functions g_io_channel_read(),
g_io_channel_write(), and g_io_channel_seek() on the same channel.</doc>
    </docsection>
    <docsection name="keyfile" gs:managed-name="Keyfile">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6804">#GKeyFile lets you parse, edit or create files containing groups of
key-value pairs, which we call "key files" for lack of a better name.
Several freedesktop.org specifications use key files now, e.g the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec)
and the
[Icon Theme Specification](http://freedesktop.org/Standards/icon-theme-spec).

The syntax of key files is described in detail in the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec),
here is a quick summary: Key files
consists of groups of key-value pairs, interspersed with comments.

|[
# this is just an example
# there can be comments before the first group

[First Group]

Name=Key File Example\tthis value shows\nescaping

# localized strings are stored in multiple key-value pairs
Welcome=Hello
Welcome[de]=Hallo
Welcome[fr_FR]=Bonjour
Welcome[it]=Ciao
Welcome[be@latin]=Hello

[Another Group]

Numbers=2;20;-200;0

Booleans=true;false;true;true
]|

Lines beginning with a '#' and blank lines are considered comments.

Groups are started by a header line containing the group name enclosed
in '[' and ']', and ended implicitly by the start of the next group or
the end of the file. Each key-value pair must be contained in a group.

Key-value pairs generally have the form `key=value`, with the
exception of localized strings, which have the form
`key[locale]=value`, with a locale identifier of the
form `lang_COUNTRY@MODIFIER` where `COUNTRY` and `MODIFIER`
are optional.
Space before and after the '=' character are ignored. Newline, tab,
carriage return and backslash characters in value are escaped as \n,
\t, \r, and \\\\, respectively. To preserve leading spaces in values,
these can also be escaped as \s.

Key files can store strings (possibly with localized variants), integers,
booleans and lists of these. Lists are separated by a separator character,
typically ';' or ','. To use the list separator character in a value in
a list, it has to be escaped by prefixing it with a backslash.

This syntax is obviously inspired by the .ini files commonly met
on Windows, but there are some important differences:

- .ini files use the ';' character to begin comments,
  key files use the '#' character.

- Key files do not allow for ungrouped keys meaning only
  comments can precede the first group.

- Key files are always encoded in UTF-8.

- Key and Group names are case-sensitive. For example, a group called
  [GROUP] is a different from [group].

- .ini files don't have a strongly typed boolean entry type,
   they only have GetProfileInt(). In key files, only
   true and false (in lower case) are allowed.

Note that in contrast to the
[Desktop Entry Specification](http://freedesktop.org/Standards/desktop-entry-spec),
groups in key files may contain the same
key multiple times; the last entry wins. Key files may also contain
multiple groups with the same name; they are merged together.
Another difference is that keys and group names in key files are not
restricted to ASCII characters.

Here is an example of loading a key file and reading a value:
|[&lt;!-- language="C" --&gt;
g_autoptr(GError) error = NULL;
g_autoptr(GKeyFile) key_file = g_key_file_new ();

if (!g_key_file_load_from_file (key_file, "key-file.ini", flags, &amp;error))
  {
    if (!g_error_matches (error, G_FILE_ERROR, G_FILE_ERROR_NOENT))
      g_warning ("Error loading key file: %s", error-&gt;message);
    return;
  }

g_autofree gchar *val = g_key_file_get_string (key_file, "Group Name", "SomeKey", &amp;error);
if (val == NULL &amp;&amp;
    !g_error_matches (error, G_KEY_FILE_ERROR, G_KEY_FILE_ERROR_KEY_NOT_FOUND))
  {
    g_warning ("Error finding key in key file: %s", error-&gt;message);
    return;
  }
else if (val == NULL)
  {
    // Fall back to a default value.
    val = g_strdup ("default-value");
  }
]|

Here is an example of creating and saving a key file:
|[&lt;!-- language="C" --&gt;
g_autoptr(GKeyFile) key_file = g_key_file_new ();
const gchar *val = …;
g_autoptr(GError) error = NULL;

g_key_file_set_string (key_file, "Group Name", "SomeKey", val);

// Save as a file.
if (!g_key_file_save_to_file (key_file, "key-file.ini", &amp;error))
  {
    g_warning ("Error saving key file: %s", error-&gt;message);
    return;
  }

// Or store to a GBytes for use elsewhere.
gsize data_len;
g_autofree guint8 *data = (guint8 *) g_key_file_to_data (key_file, &amp;data_len, &amp;error);
if (data == NULL)
  {
    g_warning ("Error saving key file: %s", error-&gt;message);
    return;
  }
g_autoptr(GBytes) bytes = g_bytes_new_take (g_steal_pointer (&amp;data), data_len);
]|</doc>
    </docsection>
    <docsection name="linked_lists_double" gs:managed-name="LinkedListsDouble">
      <doc xml:space="preserve" filename="glib-2.0.c" line="6944">The #GList structure and its associated functions provide a standard
doubly-linked list data structure. The benefit of this data-structure
is to provide insertion/deletion operations in O(1) complexity where
access/search operations are in O(n). The benefit of #GList over
#GSList (singly linked list) is that the worst case on access/search
operations is divided by two which comes at a cost in space as we need
to retain two pointers in place of one.

Each element in the list contains a piece of data, together with
pointers which link to the previous and next elements in the list.
Using these pointers it is possible to move through the list in both
directions (unlike the singly-linked [GSList][glib-Singly-Linked-Lists],
which only allows movement through the list in the forward direction).

The double linked list does not keep track of the number of items
and does not keep track of both the start and end of the list. If
you want fast access to both the start and the end of the list,
and/or the number of items in the list, use a
[GQueue][glib-Double-ended-Queues] instead.

The data contained in each element can be either integer values, by
using one of the [Type Conversion Macros][glib-Type-Conversion-Macros],
or simply pointers to any type of data.

List elements are allocated from the [slice allocator][glib-Memory-Slices],
which is more efficient than allocating elements individually.

Note that most of the #GList functions expect to be passed a pointer
to the first element in the list. The functions which insert
elements return the new start of the list, which may have changed.

There is no function to create a #GList. %NULL is considered to be
a valid, empty list so you simply set a #GList* to %NULL to initialize
it.

To add elements, use g_list_append(), g_list_prepend(),
g_list_insert() and g_list_insert_sorted().

To visit all elements in the list, use a loop over the list:
|[&lt;!-- language="C" --&gt;
GList *l;
for (l = list; l != NULL; l = l-&gt;next)
  {
    // do something with l-&gt;data
  }
]|

To call a function for each element in the list, use g_list_foreach().

To loop over the list and modify it (e.g. remove a certain element)
a while loop is more appropriate, for example:
|[&lt;!-- language="C" --&gt;
GList *l = list;
while (l != NULL)
  {
    GList *next = l-&gt;next;
    if (should_be_removed (l))
      {
        // possibly free l-&gt;data
        list = g_list_delete_link (list, l);
      }
    l = next;
  }
]|

To remove elements, use g_list_remove().

To navigate in a list, use g_list_first(), g_list_last(),
g_list_next(), g_list_previous().

To find elements in the list use g_list_nth(), g_list_nth_data(),
g_list_find() and g_list_find_custom().

To find the index of an element use g_list_position() and
g_list_index().

To free the entire list, use g_list_free() or g_list_free_full().</doc>
    </docsection>
    <docsection name="linked_lists_single" gs:managed-name="LinkedListsSingle">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7029">The #GSList structure and its associated functions provide a
standard singly-linked list data structure. The benefit of this
data-structure is to provide insertion/deletion operations in O(1)
complexity where access/search operations are in O(n). The benefit
of #GSList over #GList (doubly linked list) is that they are lighter
in space as they only need to retain one pointer but it double the
cost of the worst case access/search operations.

Each element in the list contains a piece of data, together with a
pointer which links to the next element in the list. Using this
pointer it is possible to move through the list in one direction
only (unlike the [double-linked lists][glib-Doubly-Linked-Lists],
which allow movement in both directions).

The data contained in each element can be either integer values, by
using one of the [Type Conversion Macros][glib-Type-Conversion-Macros],
or simply pointers to any type of data.

List elements are allocated from the [slice allocator][glib-Memory-Slices],
which is more efficient than allocating elements individually.

Note that most of the #GSList functions expect to be passed a
pointer to the first element in the list. The functions which insert
elements return the new start of the list, which may have changed.

There is no function to create a #GSList. %NULL is considered to be
the empty list so you simply set a #GSList* to %NULL.

To add elements, use g_slist_append(), g_slist_prepend(),
g_slist_insert() and g_slist_insert_sorted().

To remove elements, use g_slist_remove().

To find elements in the list use g_slist_last(), g_slist_next(),
g_slist_nth(), g_slist_nth_data(), g_slist_find() and
g_slist_find_custom().

To find the index of an element use g_slist_position() and
g_slist_index().

To call a function for each element in the list use
g_slist_foreach().

To free the entire list, use g_slist_free().</doc>
    </docsection>
    <docsection name="macros" gs:managed-name="Macros">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7081">These macros provide a few commonly-used features.</doc>
    </docsection>
    <docsection name="macros_misc" gs:managed-name="MacrosMisc">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7090">These macros provide more specialized features which are not
needed so often by application programmers.</doc>
    </docsection>
    <docsection name="main" gs:managed-name="Main">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7100">The main event loop manages all the available sources of events for
GLib and GTK+ applications. These events can come from any number of
different types of sources such as file descriptors (plain files,
pipes or sockets) and timeouts. New types of event sources can also
be added using g_source_attach().

To allow multiple independent sets of sources to be handled in
different threads, each source is associated with a #GMainContext.
A #GMainContext can only be running in a single thread, but
sources can be added to it and removed from it from other threads. All
functions which operate on a #GMainContext or a built-in #GSource are
thread-safe.

Each event source is assigned a priority. The default priority,
#G_PRIORITY_DEFAULT, is 0. Values less than 0 denote higher priorities.
Values greater than 0 denote lower priorities. Events from high priority
sources are always processed before events from lower priority sources.

Idle functions can also be added, and assigned a priority. These will
be run whenever no events with a higher priority are ready to be processed.

The #GMainLoop data type represents a main event loop. A GMainLoop is
created with g_main_loop_new(). After adding the initial event sources,
g_main_loop_run() is called. This continuously checks for new events from
each of the event sources and dispatches them. Finally, the processing of
an event from one of the sources leads to a call to g_main_loop_quit() to
exit the main loop, and g_main_loop_run() returns.

It is possible to create new instances of #GMainLoop recursively.
This is often used in GTK+ applications when showing modal dialog
boxes. Note that event sources are associated with a particular
#GMainContext, and will be checked and dispatched for all main
loops associated with that GMainContext.

GTK+ contains wrappers of some of these functions, e.g. gtk_main(),
gtk_main_quit() and gtk_events_pending().

## Creating new source types

One of the unusual features of the #GMainLoop functionality
is that new types of event source can be created and used in
addition to the builtin type of event source. A new event source
type is used for handling GDK events. A new source type is created
by "deriving" from the #GSource structure. The derived type of
source is represented by a structure that has the #GSource structure
as a first element, and other elements specific to the new source
type. To create an instance of the new source type, call
g_source_new() passing in the size of the derived structure and
a table of functions. These #GSourceFuncs determine the behavior of
the new source type.

New source types basically interact with the main context
in two ways. Their prepare function in #GSourceFuncs can set a timeout
to determine the maximum amount of time that the main loop will sleep
before checking the source again. In addition, or as well, the source
can add file descriptors to the set that the main context checks using
g_source_add_poll().

## Customizing the main loop iteration

Single iterations of a #GMainContext can be run with
g_main_context_iteration(). In some cases, more detailed control
of exactly how the details of the main loop work is desired, for
instance, when integrating the #GMainLoop with an external main loop.
In such cases, you can call the component functions of
g_main_context_iteration() directly. These functions are
g_main_context_prepare(), g_main_context_query(),
g_main_context_check() and g_main_context_dispatch().

## State of a Main Context # {#mainloop-states}

The operation of these functions can best be seen in terms
of a state diagram, as shown in this image.

![](mainloop-states.gif)

On UNIX, the GLib mainloop is incompatible with fork(). Any program
using the mainloop must either exec() or exit() from the child
without returning to the mainloop.

## Memory management of sources # {#mainloop-memory-management}

There are two options for memory management of the user data passed to a
#GSource to be passed to its callback on invocation. This data is provided
in calls to g_timeout_add(), g_timeout_add_full(), g_idle_add(), etc. and
more generally, using g_source_set_callback(). This data is typically an
object which ‘owns’ the timeout or idle callback, such as a widget or a
network protocol implementation. In many cases, it is an error for the
callback to be invoked after this owning object has been destroyed, as that
results in use of freed memory.

The first, and preferred, option is to store the source ID returned by
functions such as g_timeout_add() or g_source_attach(), and explicitly
remove that source from the main context using g_source_remove() when the
owning object is finalized. This ensures that the callback can only be
invoked while the object is still alive.

The second option is to hold a strong reference to the object in the
callback, and to release it in the callback’s #GDestroyNotify. This ensures
that the object is kept alive until after the source is finalized, which is
guaranteed to be after it is invoked for the final time. The #GDestroyNotify
is another callback passed to the ‘full’ variants of #GSource functions (for
example, g_timeout_add_full()). It is called when the source is finalized,
and is designed for releasing references like this.

One important caveat of this second approach is that it will keep the object
alive indefinitely if the main loop is stopped before the #GSource is
invoked, which may be undesirable.</doc>
    </docsection>
    <docsection name="markup" gs:managed-name="Markup">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7216">The "GMarkup" parser is intended to parse a simple markup format
that's a subset of XML. This is a small, efficient, easy-to-use
parser. It should not be used if you expect to interoperate with
other applications generating full-scale XML, and must not be used if you
expect to parse untrusted input. However, it's very
useful for application data files, config files, etc. where you
know your application will be the only one writing the file.
Full-scale XML parsers should be able to parse the subset used by
GMarkup, so you can easily migrate to full-scale XML at a later
time if the need arises.

GMarkup is not guaranteed to signal an error on all invalid XML;
the parser may accept documents that an XML parser would not.
However, XML documents which are not well-formed (which is a
weaker condition than being valid. See the
[XML specification](http://www.w3.org/TR/REC-xml/)
for definitions of these terms.) are not considered valid GMarkup
documents.

Simplifications to XML include:

- Only UTF-8 encoding is allowed

- No user-defined entities

- Processing instructions, comments and the doctype declaration
  are "passed through" but are not interpreted in any way

- No DTD or validation

The markup format does support:

- Elements

- Attributes

- 5 standard entities: &amp;amp; &amp;lt; &amp;gt; &amp;quot; &amp;apos;

- Character references

- Sections marked as CDATA</doc>
    </docsection>
    <docsection name="memory" gs:managed-name="Memory">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7266">These functions provide support for allocating and freeing memory.

If any call to allocate memory using functions g_new(), g_new0(), g_renew(),
g_malloc(), g_malloc0(), g_malloc0_n(), g_realloc(), and g_realloc_n()
fails, the application is terminated. This also means that there is no
need to check if the call succeeded. On the other hand, the `g_try_...()` family
of functions returns %NULL on failure that can be used as a check
for unsuccessful memory allocation. The application is not terminated
in this case.

As all GLib functions and data structures use `g_malloc()` internally, unless
otherwise specified, any allocation failure will result in the application
being terminated.

It's important to match g_malloc() (and wrappers such as g_new()) with
g_free(), g_slice_alloc() (and wrappers such as g_slice_new()) with
g_slice_free(), plain malloc() with free(), and (if you're using C++)
new with delete and new[] with delete[]. Otherwise bad things can happen,
since these allocators may use different memory pools (and new/delete call
constructors and destructors).

Since GLib 2.46 g_malloc() is hardcoded to always use the system malloc
implementation.</doc>
    </docsection>
    <docsection name="memory_slices" gs:managed-name="MemorySlices">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7297">Memory slices provide a space-efficient and multi-processing scalable
way to allocate equal-sized pieces of memory, just like the original
#GMemChunks (from GLib 2.8), while avoiding their excessive
memory-waste, scalability and performance problems.

To achieve these goals, the slice allocator uses a sophisticated,
layered design that has been inspired by Bonwick's slab allocator
([Bonwick94](http://citeseer.ist.psu.edu/bonwick94slab.html)
Jeff Bonwick, The slab allocator: An object-caching kernel
memory allocator. USENIX 1994, and
[Bonwick01](http://citeseer.ist.psu.edu/bonwick01magazines.html)
Bonwick and Jonathan Adams, Magazines and vmem: Extending the
slab allocator to many cpu's and arbitrary resources. USENIX 2001)

It uses posix_memalign() to optimize allocations of many equally-sized
chunks, and has per-thread free lists (the so-called magazine layer)
to quickly satisfy allocation requests of already known structure sizes.
This is accompanied by extra caching logic to keep freed memory around
for some time before returning it to the system. Memory that is unused
due to alignment constraints is used for cache colorization (random
distribution of chunk addresses) to improve CPU cache utilization. The
caching layer of the slice allocator adapts itself to high lock contention
to improve scalability.

The slice allocator can allocate blocks as small as two pointers, and
unlike malloc(), it does not reserve extra space per block. For large block
sizes, g_slice_new() and g_slice_alloc() will automatically delegate to the
system malloc() implementation. For newly written code it is recommended
to use the new `g_slice` API instead of g_malloc() and
friends, as long as objects are not resized during their lifetime and the
object size used at allocation time is still available when freeing.

Here is an example for using the slice allocator:
|[&lt;!-- language="C" --&gt;
gchar *mem[10000];
gint i;

// Allocate 10000 blocks.
for (i = 0; i &lt; 10000; i++)
  {
    mem[i] = g_slice_alloc (50);

    // Fill in the memory with some junk.
    for (j = 0; j &lt; 50; j++)
      mem[i][j] = i * j;
  }

// Now free all of the blocks.
for (i = 0; i &lt; 10000; i++)
  g_slice_free1 (50, mem[i]);
]|

And here is an example for using the using the slice allocator
with data structures:
|[&lt;!-- language="C" --&gt;
GRealArray *array;

// Allocate one block, using the g_slice_new() macro.
array = g_slice_new (GRealArray);

// We can now use array just like a normal pointer to a structure.
array-&gt;data            = NULL;
array-&gt;len             = 0;
array-&gt;alloc           = 0;
array-&gt;zero_terminated = (zero_terminated ? 1 : 0);
array-&gt;clear           = (clear ? 1 : 0);
array-&gt;elt_size        = elt_size;

// We can free the block, so it can be reused.
g_slice_free (GRealArray, array);
]|</doc>
    </docsection>
    <docsection name="messages" gs:managed-name="Messages">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7377">These functions provide support for outputting messages.

The g_return family of macros (g_return_if_fail(),
g_return_val_if_fail(), g_return_if_reached(),
g_return_val_if_reached()) should only be used for programming
errors, a typical use case is checking for invalid parameters at
the beginning of a public function. They should not be used if
you just mean "if (error) return", they should only be used if
you mean "if (bug in program) return". The program behavior is
generally considered undefined after one of these checks fails.
They are not intended for normal control flow, only to give a
perhaps-helpful warning before giving up.

Structured logging output is supported using g_log_structured(). This differs
from the traditional g_log() API in that log messages are handled as a
collection of key–value pairs representing individual pieces of information,
rather than as a single string containing all the information in an arbitrary
format.

The convenience macros g_info(), g_message(), g_debug(), g_warning() and g_error()
will use the traditional g_log() API unless you define the symbol
%G_LOG_USE_STRUCTURED before including `glib.h`. But note that even messages
logged through the traditional g_log() API are ultimatively passed to
g_log_structured(), so that all log messages end up in same destination.
If %G_LOG_USE_STRUCTURED is defined, g_test_expect_message() will become
ineffective for the wrapper macros g_warning() and friends (see
[Testing for Messages][testing-for-messages]).

The support for structured logging was motivated by the following needs (some
of which were supported previously; others weren’t):
 * Support for multiple logging levels.
 * Structured log support with the ability to add `MESSAGE_ID`s (see
   g_log_structured()).
 * Moving the responsibility for filtering log messages from the program to
   the log viewer — instead of libraries and programs installing log handlers
   (with g_log_set_handler()) which filter messages before output, all log
   messages are outputted, and the log viewer program (such as `journalctl`)
   must filter them. This is based on the idea that bugs are sometimes hard
   to reproduce, so it is better to log everything possible and then use
   tools to analyse the logs than it is to not be able to reproduce a bug to
   get additional log data. Code which uses logging in performance-critical
   sections should compile out the g_log_structured() calls in
   release builds, and compile them in in debugging builds.
 * A single writer function which handles all log messages in a process, from
   all libraries and program code; rather than multiple log handlers with
   poorly defined interactions between them. This allows a program to easily
   change its logging policy by changing the writer function, for example to
   log to an additional location or to change what logging output fallbacks
   are used. The log writer functions provided by GLib are exposed publicly
   so they can be used from programs’ log writers. This allows log writer
   policy and implementation to be kept separate.
 * If a library wants to add standard information to all of its log messages
   (such as library state) or to redact private data (such as passwords or
   network credentials), it should use a wrapper function around its
   g_log_structured() calls or implement that in the single log writer
   function.
 * If a program wants to pass context data from a g_log_structured() call to
   its log writer function so that, for example, it can use the correct
   server connection to submit logs to, that user data can be passed as a
   zero-length #GLogField to g_log_structured_array().
 * Color output needed to be supported on the terminal, to make reading
   through logs easier.

## Using Structured Logging ## {#using-structured-logging}

To use structured logging (rather than the old-style logging), either use
the g_log_structured() and g_log_structured_array() functions; or define
`G_LOG_USE_STRUCTURED` before including any GLib header, and use the
g_message(), g_debug(), g_error() (etc.) macros.

You do not need to define `G_LOG_USE_STRUCTURED` to use g_log_structured(),
but it is a good idea to avoid confusion.

## Log Domains ## {#log-domains}

Log domains may be used to broadly split up the origins of log messages.
Typically, there are one or a few log domains per application or library.
%G_LOG_DOMAIN should be used to define the default log domain for the current
compilation unit — it is typically defined at the top of a source file, or in
the preprocessor flags for a group of source files.

Log domains must be unique, and it is recommended that they are the
application or library name, optionally followed by a hyphen and a sub-domain
name. For example, `bloatpad` or `bloatpad-io`.

## Debug Message Output ## {#debug-message-output}

The default log functions (g_log_default_handler() for the old-style API and
g_log_writer_default() for the structured API) both drop debug and
informational messages by default, unless the log domains of those messages
are listed in the `G_MESSAGES_DEBUG` environment variable (or it is set to
`all`).

It is recommended that custom log writer functions re-use the
`G_MESSAGES_DEBUG` environment variable, rather than inventing a custom one,
so that developers can re-use the same debugging techniques and tools across
projects.

## Testing for Messages ## {#testing-for-messages}

With the old g_log() API, g_test_expect_message() and
g_test_assert_expected_messages() could be used in simple cases to check
whether some code under test had emitted a given log message. These
functions have been deprecated with the structured logging API, for several
reasons:
 * They relied on an internal queue which was too inflexible for many use
   cases, where messages might be emitted in several orders, some
   messages might not be emitted deterministically, or messages might be
   emitted by unrelated log domains.
 * They do not support structured log fields.
 * Examining the log output of code is a bad approach to testing it, and
   while it might be necessary for legacy code which uses g_log(), it should
   be avoided for new code using g_log_structured().

They will continue to work as before if g_log() is in use (and
%G_LOG_USE_STRUCTURED is not defined). They will do nothing if used with the
structured logging API.

Examining the log output of code is discouraged: libraries should not emit to
`stderr` during defined behaviour, and hence this should not be tested. If
the log emissions of a library during undefined behaviour need to be tested,
they should be limited to asserting that the library aborts and prints a
suitable error message before aborting. This should be done with
g_test_trap_assert_stderr().

If it is really necessary to test the structured log messages emitted by a
particular piece of code – and the code cannot be restructured to be more
suitable to more conventional unit testing – you should write a custom log
writer function (see g_log_set_writer_func()) which appends all log messages
to a queue. When you want to check the log messages, examine and clear the
queue, ignoring irrelevant log messages (for example, from log domains other
than the one under test).</doc>
    </docsection>
    <docsection name="misc_utils" gs:managed-name="MiscUtils">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7517">These are portable utility functions.</doc>
    </docsection>
    <docsection name="numerical" gs:managed-name="Numerical">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7526">GLib offers mathematical constants such as #G_PI for the value of pi;
many platforms have these in the C library, but some don't, the GLib
versions always exist.

The #GFloatIEEE754 and #GDoubleIEEE754 unions are used to access the
sign, mantissa and exponent of IEEE floats and doubles. These unions are
defined as appropriate for a given platform. IEEE floats and doubles are
supported (used for storage) by at least Intel, PPC and Sparc. See
[IEEE 754-2008](http://en.wikipedia.org/wiki/IEEE_float)
for more information about IEEE number formats.</doc>
    </docsection>
    <docsection name="option" gs:managed-name="Option">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7544">The GOption commandline parser is intended to be a simpler replacement
for the popt library. It supports short and long commandline options,
as shown in the following example:

`testtreemodel -r 1 --max-size 20 --rand --display=:1.0 -vb -- file1 file2`

The example demonstrates a number of features of the GOption
commandline parser:

- Options can be single letters, prefixed by a single dash.

- Multiple short options can be grouped behind a single dash.

- Long options are prefixed by two consecutive dashes.

- Options can have an extra argument, which can be a number, a string or
  a filename. For long options, the extra argument can be appended with
  an equals sign after the option name, which is useful if the extra
  argument starts with a dash, which would otherwise cause it to be
  interpreted as another option.

- Non-option arguments are returned to the application as rest arguments.

- An argument consisting solely of two dashes turns off further parsing,
  any remaining arguments (even those starting with a dash) are returned
  to the application as rest arguments.

Another important feature of GOption is that it can automatically
generate nicely formatted help output. Unless it is explicitly turned
off with g_option_context_set_help_enabled(), GOption will recognize
the `--help`, `-?`, `--help-all` and `--help-groupname` options
(where `groupname` is the name of a #GOptionGroup) and write a text
similar to the one shown in the following example to stdout.

|[
Usage:
  testtreemodel [OPTION...] - test tree model performance
 
Help Options:
  -h, --help               Show help options
  --help-all               Show all help options
  --help-gtk               Show GTK+ Options
 
Application Options:
  -r, --repeats=N          Average over N repetitions
  -m, --max-size=M         Test up to 2^M items
  --display=DISPLAY        X display to use
  -v, --verbose            Be verbose
  -b, --beep               Beep when done
  --rand                   Randomize the data
]|

GOption groups options in #GOptionGroups, which makes it easy to
incorporate options from multiple sources. The intended use for this is
to let applications collect option groups from the libraries it uses,
add them to their #GOptionContext, and parse all options by a single call
to g_option_context_parse(). See gtk_get_option_group() for an example.

If an option is declared to be of type string or filename, GOption takes
care of converting it to the right encoding; strings are returned in
UTF-8, filenames are returned in the GLib filename encoding. Note that
this only works if setlocale() has been called before
g_option_context_parse().

Here is a complete example of setting up GOption to parse the example
commandline above and produce the example help output.
|[&lt;!-- language="C" --&gt;
static gint repeats = 2;
static gint max_size = 8;
static gboolean verbose = FALSE;
static gboolean beep = FALSE;
static gboolean randomize = FALSE;

static GOptionEntry entries[] =
{
  { "repeats", 'r', 0, G_OPTION_ARG_INT, &amp;repeats, "Average over N repetitions", "N" },
  { "max-size", 'm', 0, G_OPTION_ARG_INT, &amp;max_size, "Test up to 2^M items", "M" },
  { "verbose", 'v', 0, G_OPTION_ARG_NONE, &amp;verbose, "Be verbose", NULL },
  { "beep", 'b', 0, G_OPTION_ARG_NONE, &amp;beep, "Beep when done", NULL },
  { "rand", 0, 0, G_OPTION_ARG_NONE, &amp;randomize, "Randomize the data", NULL },
  { NULL }
};

int
main (int argc, char *argv[])
{
  GError *error = NULL;
  GOptionContext *context;

  context = g_option_context_new ("- test tree model performance");
  g_option_context_add_main_entries (context, entries, GETTEXT_PACKAGE);
  g_option_context_add_group (context, gtk_get_option_group (TRUE));
  if (!g_option_context_parse (context, &amp;argc, &amp;argv, &amp;error))
    {
      g_print ("option parsing failed: %s\n", error-&gt;message);
      exit (1);
    }

  ...

}
]|

On UNIX systems, the argv that is passed to main() has no particular
encoding, even to the extent that different parts of it may have
different encodings.  In general, normal arguments and flags will be
in the current locale and filenames should be considered to be opaque
byte strings.  Proper use of %G_OPTION_ARG_FILENAME vs
%G_OPTION_ARG_STRING is therefore important.

Note that on Windows, filenames do have an encoding, but using
#GOptionContext with the argv as passed to main() will result in a
program that can only accept commandline arguments with characters
from the system codepage.  This can cause problems when attempting to
deal with filenames containing Unicode characters that fall outside
of the codepage.

A solution to this is to use g_win32_get_command_line() and
g_option_context_parse_strv() which will properly handle full Unicode
filenames.  If you are using #GApplication, this is done
automatically for you.

The following example shows how you can use #GOptionContext directly
in order to correctly deal with Unicode filenames on Windows:

|[&lt;!-- language="C" --&gt;
int
main (int argc, char **argv)
{
  GError *error = NULL;
  GOptionContext *context;
  gchar **args;

#ifdef G_OS_WIN32
  args = g_win32_get_command_line ();
#else
  args = g_strdupv (argv);
#endif

  // set up context

  if (!g_option_context_parse_strv (context, &amp;args, &amp;error))
    {
      // error happened
    }

  ...

  g_strfreev (args);

  ...
}
]|</doc>
    </docsection>
    <docsection name="patterns" gs:managed-name="Patterns">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7705">The g_pattern_match* functions match a string
against a pattern containing '*' and '?' wildcards with similar
semantics as the standard glob() function: '*' matches an arbitrary,
possibly empty, string, '?' matches an arbitrary character.

Note that in contrast to glob(), the '/' character can be matched by
the wildcards, there are no '[...]' character ranges and '*' and '?'
can not be escaped to include them literally in a pattern.

When multiple strings must be matched against the same pattern, it
is better to compile the pattern to a #GPatternSpec using
g_pattern_spec_new() and use g_pattern_match_string() instead of
g_pattern_match_simple(). This avoids the overhead of repeated
pattern compilation.</doc>
    </docsection>
    <docsection name="quarks" gs:managed-name="Quarks">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7728">Quarks are associations between strings and integer identifiers.
Given either the string or the #GQuark identifier it is possible to
retrieve the other.

Quarks are used for both [datasets][glib-Datasets] and
[keyed data lists][glib-Keyed-Data-Lists].

To create a new quark from a string, use g_quark_from_string() or
g_quark_from_static_string().

To find the string corresponding to a given #GQuark, use
g_quark_to_string().

To find the #GQuark corresponding to a given string, use
g_quark_try_string().

Another use for the string pool maintained for the quark functions
is string interning, using g_intern_string() or
g_intern_static_string(). An interned string is a canonical
representation for a string. One important advantage of interned
strings is that they can be compared for equality by a simple
pointer comparison, rather than using strcmp().</doc>
    </docsection>
    <docsection name="queue" gs:managed-name="Queue">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7759">The #GQueue structure and its associated functions provide a standard
queue data structure. Internally, GQueue uses the same data structure
as #GList to store elements with the same complexity over
insertion/deletion (O(1)) and access/search (O(n)) operations.

The data contained in each element can be either integer values, by
using one of the [Type Conversion Macros][glib-Type-Conversion-Macros],
or simply pointers to any type of data.

As with all other GLib data structures, #GQueue is not thread-safe.
For a thread-safe queue, use #GAsyncQueue.

To create a new GQueue, use g_queue_new().

To initialize a statically-allocated GQueue, use #G_QUEUE_INIT or
g_queue_init().

To add elements, use g_queue_push_head(), g_queue_push_head_link(),
g_queue_push_tail() and g_queue_push_tail_link().

To remove elements, use g_queue_pop_head() and g_queue_pop_tail().

To free the entire queue, use g_queue_free().</doc>
    </docsection>
    <docsection name="random_numbers" gs:managed-name="RandomNumbers">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7790">The following functions allow you to use a portable, fast and good
pseudo-random number generator (PRNG).

Do not use this API for cryptographic purposes such as key
generation, nonces, salts or one-time pads.

This PRNG is suitable for non-cryptographic use such as in games
(shuffling a card deck, generating levels), generating data for
a test suite, etc. If you need random data for cryptographic
purposes, it is recommended to use platform-specific APIs such
as `/dev/random` on UNIX, or CryptGenRandom() on Windows.

GRand uses the Mersenne Twister PRNG, which was originally
developed by Makoto Matsumoto and Takuji Nishimura. Further
information can be found at
[this page](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html).

If you just need a random number, you simply call the g_random_*
functions, which will create a globally used #GRand and use the
according g_rand_* functions internally. Whenever you need a
stream of reproducible random numbers, you better create a
#GRand yourself and use the g_rand_* functions directly, which
will also be slightly faster. Initializing a #GRand with a
certain seed will produce exactly the same series of random
numbers on all platforms. This can thus be used as a seed for
e.g. games.

The g_rand*_range functions will return high quality equally
distributed random numbers, whereas for example the
`(g_random_int()%max)` approach often
doesn't yield equally distributed numbers.

GLib changed the seeding algorithm for the pseudo-random number
generator Mersenne Twister, as used by #GRand. This was necessary,
because some seeds would yield very bad pseudo-random streams.
Also the pseudo-random integers generated by g_rand*_int_range()
will have a slightly better equal distribution with the new
version of GLib.

The original seeding and generation algorithms, as found in
GLib 2.0.x, can be used instead of the new ones by setting the
environment variable `G_RANDOM_VERSION` to the value of '2.0'.
Use the GLib-2.0 algorithms only if you have sequences of numbers
generated with Glib-2.0 that you need to reproduce exactly.</doc>
    </docsection>
    <docsection name="rcbox" gs:managed-name="Rcbox">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7842">A "reference counted box", or "RcBox", is an opaque wrapper data type
that is guaranteed to be as big as the size of a given data type, and
which augments the given data type with reference counting semantics
for its memory management.

RcBox is useful if you have a plain old data type, like a structure
typically placed on the stack, and you wish to provide additional API
to use it on the heap; or if you want to implement a new type to be
passed around by reference without necessarily implementing copy/free
semantics or your own reference counting.

The typical use is:

|[&lt;!-- language="C" --&gt;
typedef struct {
  char *name;
  char *address;
  char *city;
  char *state;
  int age;
} Person;

Person *
person_new (void)
{
  return g_rc_box_new0 (Person);
}
]|

Every time you wish to acquire a reference on the memory, you should
call g_rc_box_acquire(); similarly, when you wish to release a reference
you should call g_rc_box_release():

|[&lt;!-- language="C" --&gt;
// Add a Person to the Database; the Database acquires ownership
// of the Person instance
void
add_person_to_database (Database *db, Person *p)
{
  db-&gt;persons = g_list_prepend (db-&gt;persons, g_rc_box_acquire (p));
}

// Removes a Person from the Database; the reference acquired by
// add_person_to_database() is released here
void
remove_person_from_database (Database *db, Person *p)
{
  db-&gt;persons = g_list_remove (db-&gt;persons, p);
  g_rc_box_release (p);
}
]|

If you have additional memory allocated inside the structure, you can
use g_rc_box_release_full(), which takes a function pointer, which
will be called if the reference released was the last:

|[&lt;!-- language="C" --&gt;
void
person_clear (Person *p)
{
  g_free (p-&gt;name);
  g_free (p-&gt;address);
  g_free (p-&gt;city);
  g_free (p-&gt;state);
}

void
remove_person_from_database (Database *db, Person *p)
{
  db-&gt;persons = g_list_remove (db-&gt;persons, p);
  g_rc_box_release_full (p, (GDestroyNotify) person_clear);
}
]|

If you wish to transfer the ownership of a reference counted data
type without increasing the reference count, you can use g_steal_pointer():

|[&lt;!-- language="C" --&gt;
  Person *p = g_rc_box_new (Person);

  // fill_person_details() is defined elsewhere
  fill_person_details (p);

  // add_person_to_database_no_ref() is defined elsewhere; it adds
  // a Person to the Database without taking a reference
  add_person_to_database_no_ref (db, g_steal_pointer (&amp;p));
]|

## Thread safety

The reference counting operations on data allocated using g_rc_box_alloc(),
g_rc_box_new(), and g_rc_box_dup() are not thread safe; it is your code's
responsibility to ensure that references are acquired are released on the
same thread.

If you need thread safe reference counting, see the [atomic reference counted
data][arcbox] API.

## Automatic pointer clean up

If you want to add g_autoptr() support to your plain old data type through
reference counting, you can use the G_DEFINE_AUTOPTR_CLEANUP_FUNC() and
g_rc_box_release():

|[&lt;!-- language="C" --&gt;
G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyDataStruct, g_rc_box_release)
]|

If you need to clear the contents of the data, you will need to use an
ancillary function that calls g_rc_box_release_full():

|[&lt;!-- language="C" --&gt;
static void
my_data_struct_release (MyDataStruct *data)
{
  // my_data_struct_clear() is defined elsewhere
  g_rc_box_release_full (data, (GDestroyNotify) my_data_struct_clear);
}

G_DEFINE_AUTOPTR_CLEANUP_FUNC (MyDataStruct, my_data_struct_release)
]|</doc>
    </docsection>
    <docsection name="refcount" gs:managed-name="Refcount">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7973">Reference counting is a garbage collection mechanism that is based on
assigning a counter to a data type, or any memory area; the counter is
increased whenever a new reference to that data type is acquired, and
decreased whenever the reference is released. Once the last reference
is released, the resources associated to that data type are freed.

GLib uses reference counting in many of its data types, and provides
the #grefcount and #gatomicrefcount types to implement safe and atomic
reference counting semantics in new data types.

It is important to note that #grefcount and #gatomicrefcount should be
considered completely opaque types; you should always use the provided
API to increase and decrease the counters, and you should never check
their content directly, or compare their content with other values.</doc>
    </docsection>
    <docsection name="refstring" gs:managed-name="Refstring">
      <doc xml:space="preserve" filename="glib-2.0.c" line="7997">Reference counted strings are normal C strings that have been augmented
with a reference counter to manage their resources. You allocate a new
reference counted string and acquire and release references as needed,
instead of copying the string among callers; when the last reference on
the string is released, the resources allocated for it are freed.

Typically, reference counted strings can be used when parsing data from
files and storing them into data structures that are passed to various
callers:

|[&lt;!-- language="C" --&gt;
PersonDetails *
person_details_from_data (const char *data)
{
  // Use g_autoptr() to simplify error cases
  g_autoptr(GRefString) full_name = NULL;
  g_autoptr(GRefString) address =  NULL;
  g_autoptr(GRefString) city = NULL;
  g_autoptr(GRefString) state = NULL;
  g_autoptr(GRefString) zip_code = NULL;

  // parse_person_details() is defined elsewhere; returns refcounted strings
  if (!parse_person_details (data, &amp;full_name, &amp;address, &amp;city, &amp;state, &amp;zip_code))
    return NULL;

  if (!validate_zip_code (zip_code))
    return NULL;

  // add_address_to_cache() and add_full_name_to_cache() are defined
  // elsewhere; they add strings to various caches, using refcounted
  // strings to avoid copying data over and over again
  add_address_to_cache (address, city, state, zip_code);
  add_full_name_to_cache (full_name);

  // person_details_new() is defined elsewhere; it takes a reference
  // on each string
  PersonDetails *res = person_details_new (full_name,
                                           address,
                                           city,
                                           state,
                                           zip_code);

  return res;
}
]|

In the example above, we have multiple functions taking the same strings
for different uses; with typical C strings, we'd have to copy the strings
every time the life time rules of the data differ from the life time of
the string parsed from the original buffer. With reference counted strings,
each caller can take a reference on the data, and keep it as long as it
needs to own the string.

Reference counted strings can also be "interned" inside a global table
owned by GLib; while an interned string has at least a reference, creating
a new interned reference counted string with the same contents will return
a reference to the existing string instead of creating a new reference
counted string instance. Once the string loses its last reference, it will
be automatically removed from the global interned strings table.</doc>
    </docsection>
    <docsection name="scanner" gs:managed-name="Scanner">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8066">The #GScanner and its associated functions provide a
general purpose lexical scanner.</doc>
    </docsection>
    <docsection name="sequence" gs:managed-name="Sequence">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8076">The #GSequence data structure has the API of a list, but is
implemented internally with a balanced binary tree. This means that
most of the operations  (access, search, insertion, deletion, ...) on
#GSequence are O(log(n)) in average and O(n) in worst case for time
complexity. But, note that maintaining a balanced sorted list of n
elements is done in time O(n log(n)).
The data contained in each element can be either integer values, by using
of the [Type Conversion Macros][glib-Type-Conversion-Macros], or simply
pointers to any type of data.

A #GSequence is accessed through "iterators", represented by a
#GSequenceIter. An iterator represents a position between two
elements of the sequence. For example, the "begin" iterator
represents the gap immediately before the first element of the
sequence, and the "end" iterator represents the gap immediately
after the last element. In an empty sequence, the begin and end
iterators are the same.

Some methods on #GSequence operate on ranges of items. For example
g_sequence_foreach_range() will call a user-specified function on
each element with the given range. The range is delimited by the
gaps represented by the passed-in iterators, so if you pass in the
begin and end iterators, the range in question is the entire
sequence.

The function g_sequence_get() is used with an iterator to access the
element immediately following the gap that the iterator represents.
The iterator is said to "point" to that element.

Iterators are stable across most operations on a #GSequence. For
example an iterator pointing to some element of a sequence will
continue to point to that element even after the sequence is sorted.
Even moving an element to another sequence using for example
g_sequence_move_range() will not invalidate the iterators pointing
to it. The only operation that will invalidate an iterator is when
the element it points to is removed from any sequence.

To sort the data, either use g_sequence_insert_sorted() or
g_sequence_insert_sorted_iter() to add data to the #GSequence or, if
you want to add a large amount of data, it is more efficient to call
g_sequence_sort() or g_sequence_sort_iter() after doing unsorted
insertions.</doc>
    </docsection>
    <docsection name="shell" gs:managed-name="Shell">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8126">GLib provides the functions g_shell_quote() and g_shell_unquote()
to handle shell-like quoting in strings. The function g_shell_parse_argv()
parses a string similar to the way a POSIX shell (/bin/sh) would.

Note that string handling in shells has many obscure and historical
corner-cases which these functions do not necessarily reproduce. They
are good enough in practice, though.</doc>
    </docsection>
    <docsection name="spawn" gs:managed-name="Spawn">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8141">GLib supports spawning of processes with an API that is more
convenient than the bare UNIX fork() and exec().

The g_spawn family of functions has synchronous (g_spawn_sync())
and asynchronous variants (g_spawn_async(), g_spawn_async_with_pipes()),
as well as convenience variants that take a complete shell-like
commandline (g_spawn_command_line_sync(), g_spawn_command_line_async()).

See #GSubprocess in GIO for a higher-level API that provides
stream interfaces for communication with child processes.

An example of using g_spawn_async_with_pipes():
|[&lt;!-- language="C" --&gt;
const gchar * const argv[] = { "my-favourite-program", "--args", NULL };
gint child_stdout, child_stderr;
GPid child_pid;
g_autoptr(GError) error = NULL;

// Spawn child process.
g_spawn_async_with_pipes (NULL, argv, NULL, G_SPAWN_DO_NOT_REAP_CHILD, NULL,
                          NULL, &amp;child_pid, NULL, &amp;child_stdout,
                          &amp;child_stderr, &amp;error);
if (error != NULL)
  {
    g_error ("Spawning child failed: %s", error-&gt;message);
    return;
  }

// Add a child watch function which will be called when the child process
// exits.
g_child_watch_add (child_pid, child_watch_cb, NULL);

// You could watch for output on @child_stdout and @child_stderr using
// #GUnixInputStream or #GIOChannel here.

static void
child_watch_cb (GPid     pid,
                gint     status,
                gpointer user_data)
{
  g_message ("Child %" G_PID_FORMAT " exited %s", pid,
             g_spawn_check_exit_status (status, NULL) ? "normally" : "abnormally");

  // Free any resources associated with the child here, such as I/O channels
  // on its stdout and stderr FDs. If you have no code to put in the
  // child_watch_cb() callback, you can remove it and the g_child_watch_add()
  // call, but you must also remove the G_SPAWN_DO_NOT_REAP_CHILD flag,
  // otherwise the child process will stay around as a zombie until this
  // process exits.

  g_spawn_close_pid (pid);
}
]|</doc>
    </docsection>
    <docsection name="string_chunks" gs:managed-name="StringChunks">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8202">String chunks are used to store groups of strings. Memory is
allocated in blocks, and as strings are added to the #GStringChunk
they are copied into the next free position in a block. When a block
is full a new block is allocated.

When storing a large number of strings, string chunks are more
efficient than using g_strdup() since fewer calls to malloc() are
needed, and less memory is wasted in memory allocation overheads.

By adding strings with g_string_chunk_insert_const() it is also
possible to remove duplicates.

To create a new #GStringChunk use g_string_chunk_new().

To add strings to a #GStringChunk use g_string_chunk_insert().

To add strings to a #GStringChunk, but without duplicating strings
which are already in the #GStringChunk, use
g_string_chunk_insert_const().

To free the entire #GStringChunk use g_string_chunk_free(). It is
not possible to free individual strings.</doc>
    </docsection>
    <docsection name="string_utils" gs:managed-name="StringUtils">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8232">This section describes a number of utility functions for creating,
duplicating, and manipulating strings.

Note that the functions g_printf(), g_fprintf(), g_sprintf(),
g_vprintf(), g_vfprintf(), g_vsprintf() and g_vasprintf()
are declared in the header `gprintf.h` which is not included in `glib.h`
(otherwise using `glib.h` would drag in `stdio.h`), so you'll have to
explicitly include `&lt;glib/gprintf.h&gt;` in order to use the GLib
printf() functions.

## String precision pitfalls # {#string-precision}

While you may use the printf() functions to format UTF-8 strings,
notice that the precision of a \%Ns parameter is interpreted
as the number of bytes, not characters to print. On top of that,
the GNU libc implementation of the printf() functions has the
"feature" that it checks that the string given for the \%Ns
parameter consists of a whole number of characters in the current
encoding. So, unless you are sure you are always going to be in an
UTF-8 locale or your know your text is restricted to ASCII, avoid
using \%Ns. If your intention is to format strings for a
certain number of columns, then \%Ns is not a correct solution
anyway, since it fails to take wide characters (see g_unichar_iswide())
into account.

Note also that there are various printf() parameters which are platform
dependent. GLib provides platform independent macros for these parameters
which should be used instead. A common example is %G_GUINT64_FORMAT, which
should be used instead of `%llu` or similar parameters for formatting
64-bit integers. These macros are all named `G_*_FORMAT`; see
[Basic Types][glib-Basic-Types].</doc>
    </docsection>
    <docsection name="strings" gs:managed-name="Strings">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8271">A #GString is an object that handles the memory management of a C
string for you.  The emphasis of #GString is on text, typically
UTF-8.  Crucially, the "str" member of a #GString is guaranteed to
have a trailing nul character, and it is therefore always safe to
call functions such as strchr() or g_strdup() on it.

However, a #GString can also hold arbitrary binary data, because it
has a "len" member, which includes any possible embedded nul
characters in the data.  Conceptually then, #GString is like a
#GByteArray with the addition of many convenience methods for text,
and a guaranteed nul terminator.</doc>
    </docsection>
    <docsection name="testing" gs:managed-name="Testing">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8291">GLib provides a framework for writing and maintaining unit tests
in parallel to the code they are testing. The API is designed according
to established concepts found in the other test frameworks (JUnit, NUnit,
RUnit), which in turn is based on smalltalk unit testing concepts.

- Test case: Tests (test methods) are grouped together with their
  fixture into test cases.

- Fixture: A test fixture consists of fixture data and setup and
  teardown methods to establish the environment for the test
  functions. We use fresh fixtures, i.e. fixtures are newly set
  up and torn down around each test invocation to avoid dependencies
  between tests.

- Test suite: Test cases can be grouped into test suites, to allow
  subsets of the available tests to be run. Test suites can be
  grouped into other test suites as well.

The API is designed to handle creation and registration of test suites
and test cases implicitly. A simple call like
|[&lt;!-- language="C" --&gt;
  g_test_add_func ("/misc/assertions", test_assertions);
]|
creates a test suite called "misc" with a single test case named
"assertions", which consists of running the test_assertions function.

In addition to the traditional g_assert_true(), the test framework provides
an extended set of assertions for comparisons: g_assert_cmpfloat(),
g_assert_cmpfloat_with_epsilon(), g_assert_cmpint(), g_assert_cmpuint(),
g_assert_cmphex(), g_assert_cmpstr(), g_assert_cmpmem() and
g_assert_cmpvariant(). The
advantage of these variants over plain g_assert_true() is that the assertion
messages can be more elaborate, and include the values of the compared
entities.

Note that g_assert() should not be used in unit tests, since it is a no-op
when compiling with `G_DISABLE_ASSERT`. Use g_assert() in production code,
and g_assert_true() in unit tests.

A full example of creating a test suite with two tests using fixtures:
|[&lt;!-- language="C" --&gt;
#include &lt;glib.h&gt;
#include &lt;locale.h&gt;

typedef struct {
  MyObject *obj;
  OtherObject *helper;
} MyObjectFixture;

static void
my_object_fixture_set_up (MyObjectFixture *fixture,
                          gconstpointer user_data)
{
  fixture-&gt;obj = my_object_new ();
  my_object_set_prop1 (fixture-&gt;obj, "some-value");
  my_object_do_some_complex_setup (fixture-&gt;obj, user_data);

  fixture-&gt;helper = other_object_new ();
}

static void
my_object_fixture_tear_down (MyObjectFixture *fixture,
                             gconstpointer user_data)
{
  g_clear_object (&amp;fixture-&gt;helper);
  g_clear_object (&amp;fixture-&gt;obj);
}

static void
test_my_object_test1 (MyObjectFixture *fixture,
                      gconstpointer user_data)
{
  g_assert_cmpstr (my_object_get_property (fixture-&gt;obj), ==, "initial-value");
}

static void
test_my_object_test2 (MyObjectFixture *fixture,
                      gconstpointer user_data)
{
  my_object_do_some_work_using_helper (fixture-&gt;obj, fixture-&gt;helper);
  g_assert_cmpstr (my_object_get_property (fixture-&gt;obj), ==, "updated-value");
}

int
main (int argc, char *argv[])
{
  setlocale (LC_ALL, "");

  g_test_init (&amp;argc, &amp;argv, NULL);

  // Define the tests.
  g_test_add ("/my-object/test1", MyObjectFixture, "some-user-data",
              my_object_fixture_set_up, test_my_object_test1,
              my_object_fixture_tear_down);
  g_test_add ("/my-object/test2", MyObjectFixture, "some-user-data",
              my_object_fixture_set_up, test_my_object_test2,
              my_object_fixture_tear_down);

  return g_test_run ();
}
]|

### Integrating GTest in your project

If you are using the [Meson](http://mesonbuild.com) build system, you will
typically use the provided `test()` primitive to call the test binaries,
e.g.:

|[&lt;!-- language="plain" --&gt;
  test(
    'foo',
    executable('foo', 'foo.c', dependencies: deps),
    env: [
      'G_TEST_SRCDIR=@0@'.format(meson.current_source_dir()),
      'G_TEST_BUILDDIR=@0@'.format(meson.current_build_dir()),
    ],
  )

  test(
    'bar',
    executable('bar', 'bar.c', dependencies: deps),
    env: [
      'G_TEST_SRCDIR=@0@'.format(meson.current_source_dir()),
      'G_TEST_BUILDDIR=@0@'.format(meson.current_build_dir()),
    ],
  )
]|

If you are using Autotools, you're strongly encouraged to use the Automake
[TAP](https://testanything.org/) harness; GLib provides template files for
easily integrating with it:

  - [glib-tap.mk](https://gitlab.gnome.org/GNOME/glib/blob/glib-2-58/glib-tap.mk)
  - [tap-test](https://gitlab.gnome.org/GNOME/glib/blob/glib-2-58/tap-test)
  - [tap-driver.sh](https://gitlab.gnome.org/GNOME/glib/blob/glib-2-58/tap-driver.sh)

You can copy these files in your own project's root directory, and then
set up your `Makefile.am` file to reference them, for instance:

|[&lt;!-- language="plain" --&gt;
include $(top_srcdir)/glib-tap.mk

# test binaries
test_programs = \
  foo \
  bar

# data distributed in the tarball
dist_test_data = \
  foo.data.txt \
  bar.data.txt

# data not distributed in the tarball
test_data = \
  blah.data.txt
]|

Make sure to distribute the TAP files, using something like the following
in your top-level `Makefile.am`:

|[&lt;!-- language="plain" --&gt;
EXTRA_DIST += \
  tap-driver.sh \
  tap-test
]|

`glib-tap.mk` will be distributed implicitly due to being included in a
`Makefile.am`. All three files should be added to version control.

If you don't have access to the Autotools TAP harness, you can use the
[gtester][gtester] and [gtester-report][gtester-report] tools, and use
the [glib.mk](https://gitlab.gnome.org/GNOME/glib/blob/glib-2-58/glib.mk)
Automake template provided by GLib. Note, however, that since GLib 2.62,
[gtester][gtester] and [gtester-report][gtester-report] have been deprecated
in favour of using TAP. The `--tap` argument to tests is enabled by default
as of GLib 2.62.</doc>
    </docsection>
    <docsection name="thread_pools" gs:managed-name="ThreadPools">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8475">Sometimes you wish to asynchronously fork out the execution of work
and continue working in your own thread. If that will happen often,
the overhead of starting and destroying a thread each time might be
too high. In such cases reusing already started threads seems like a
good idea. And it indeed is, but implementing this can be tedious
and error-prone.

Therefore GLib provides thread pools for your convenience. An added
advantage is, that the threads can be shared between the different
subsystems of your program, when they are using GLib.

To create a new thread pool, you use g_thread_pool_new().
It is destroyed by g_thread_pool_free().

If you want to execute a certain task within a thread pool,
you call g_thread_pool_push().

To get the current number of running threads you call
g_thread_pool_get_num_threads(). To get the number of still
unprocessed tasks you call g_thread_pool_unprocessed(). To control
the maximal number of threads for a thread pool, you use
g_thread_pool_get_max_threads() and g_thread_pool_set_max_threads().

Finally you can control the number of unused threads, that are kept
alive by GLib for future use. The current number can be fetched with
g_thread_pool_get_num_unused_threads(). The maximal number can be
controlled by g_thread_pool_get_max_unused_threads() and
g_thread_pool_set_max_unused_threads(). All currently unused threads
can be stopped by calling g_thread_pool_stop_unused_threads().</doc>
    </docsection>
    <docsection name="threads" gs:managed-name="Threads">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8513">Threads act almost like processes, but unlike processes all threads
of one process share the same memory. This is good, as it provides
easy communication between the involved threads via this shared
memory, and it is bad, because strange things (so called
"Heisenbugs") might happen if the program is not carefully designed.
In particular, due to the concurrent nature of threads, no
assumptions on the order of execution of code running in different
threads can be made, unless order is explicitly forced by the
programmer through synchronization primitives.

The aim of the thread-related functions in GLib is to provide a
portable means for writing multi-threaded software. There are
primitives for mutexes to protect the access to portions of memory
(#GMutex, #GRecMutex and #GRWLock). There is a facility to use
individual bits for locks (g_bit_lock()). There are primitives
for condition variables to allow synchronization of threads (#GCond).
There are primitives for thread-private data - data that every
thread has a private instance of (#GPrivate). There are facilities
for one-time initialization (#GOnce, g_once_init_enter()). Finally,
there are primitives to create and manage threads (#GThread).

The GLib threading system used to be initialized with g_thread_init().
This is no longer necessary. Since version 2.32, the GLib threading
system is automatically initialized at the start of your program,
and all thread-creation functions and synchronization primitives
are available right away.

Note that it is not safe to assume that your program has no threads
even if you don't call g_thread_new() yourself. GLib and GIO can
and will create threads for their own purposes in some cases, such
as when using g_unix_signal_source_new() or when using GDBus.

Originally, UNIX did not have threads, and therefore some traditional
UNIX APIs are problematic in threaded programs. Some notable examples
are

- C library functions that return data in statically allocated
  buffers, such as strtok() or strerror(). For many of these,
  there are thread-safe variants with a _r suffix, or you can
  look at corresponding GLib APIs (like g_strsplit() or g_strerror()).

- The functions setenv() and unsetenv() manipulate the process
  environment in a not thread-safe way, and may interfere with getenv()
  calls in other threads. Note that getenv() calls may be hidden behind
  other APIs. For example, GNU gettext() calls getenv() under the
  covers. In general, it is best to treat the environment as readonly.
  If you absolutely have to modify the environment, do it early in
  main(), when no other threads are around yet.

- The setlocale() function changes the locale for the entire process,
  affecting all threads. Temporary changes to the locale are often made
  to change the behavior of string scanning or formatting functions
  like scanf() or printf(). GLib offers a number of string APIs
  (like g_ascii_formatd() or g_ascii_strtod()) that can often be
  used as an alternative. Or you can use the uselocale() function
  to change the locale only for the current thread.

- The fork() function only takes the calling thread into the child's
  copy of the process image. If other threads were executing in critical
  sections they could have left mutexes locked which could easily
  cause deadlocks in the new child. For this reason, you should
  call exit() or exec() as soon as possible in the child and only
  make signal-safe library calls before that.

- The daemon() function uses fork() in a way contrary to what is
  described above. It should not be used with GLib programs.

GLib itself is internally completely thread-safe (all global data is
automatically locked), but individual data structure instances are
not automatically locked for performance reasons. For example,
you must coordinate accesses to the same #GHashTable from multiple
threads. The two notable exceptions from this rule are #GMainLoop
and #GAsyncQueue, which are thread-safe and need no further
application-level locking to be accessed from multiple threads.
Most refcounting functions such as g_object_ref() are also thread-safe.

A common use for #GThreads is to move a long-running blocking operation out
of the main thread and into a worker thread. For GLib functions, such as
single GIO operations, this is not necessary, and complicates the code.
Instead, the `…_async()` version of the function should be used from the main
thread, eliminating the need for locking and synchronisation between multiple
threads. If an operation does need to be moved to a worker thread, consider
using g_task_run_in_thread(), or a #GThreadPool. #GThreadPool is often a
better choice than #GThread, as it handles thread reuse and task queueing;
#GTask uses this internally.

However, if multiple blocking operations need to be performed in sequence,
and it is not possible to use #GTask for them, moving them to a worker thread
can clarify the code.</doc>
    </docsection>
    <docsection name="timers" gs:managed-name="Timers">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8612">#GTimer records a start time, and counts microseconds elapsed since
that time. This is done somewhat differently on different platforms,
and can be tricky to get exactly right, so #GTimer provides a
portable/convenient interface.</doc>
    </docsection>
    <docsection name="timezone" gs:managed-name="Timezone">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8624">#GTimeZone is a structure that represents a time zone, at no
particular point in time.  It is refcounted and immutable.

Each time zone has an identifier (for example, ‘Europe/London’) which is
platform dependent. See g_time_zone_new() for information on the identifier
formats. The identifier of a time zone can be retrieved using
g_time_zone_get_identifier().

A time zone contains a number of intervals.  Each interval has
an abbreviation to describe it (for example, ‘PDT’), an offset to UTC and a
flag indicating if the daylight savings time is in effect during that
interval.  A time zone always has at least one interval — interval 0. Note
that interval abbreviations are not the same as time zone identifiers
(apart from ‘UTC’), and cannot be passed to g_time_zone_new().

Every UTC time is contained within exactly one interval, but a given
local time may be contained within zero, one or two intervals (due to
incontinuities associated with daylight savings time).

An interval may refer to a specific period of time (eg: the duration
of daylight savings time during 2010) or it may refer to many periods
of time that share the same properties (eg: all periods of daylight
savings time).  It is also possible (usually for political reasons)
that some properties (like the abbreviation) change between intervals
without other properties changing.

#GTimeZone is available since GLib 2.26.</doc>
    </docsection>
    <docsection name="trash_stack" gs:managed-name="TrashStack">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8660">A #GTrashStack is an efficient way to keep a stack of unused allocated
memory chunks. Each memory chunk is required to be large enough to hold
a #gpointer. This allows the stack to be maintained without any space
overhead, since the stack pointers can be stored inside the memory chunks.

There is no function to create a #GTrashStack. A %NULL #GTrashStack*
is a perfectly valid empty stack.

There is no longer any good reason to use #GTrashStack.  If you have
extra pieces of memory, free() them and allocate them again later.</doc>
    </docsection>
    <docsection name="trees-binary" gs:managed-name="TreesBinary">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8680">The #GTree structure and its associated functions provide a sorted
collection of key/value pairs optimized for searching and traversing
in order. This means that most of the operations  (access, search,
insertion, deletion, ...) on #GTree are O(log(n)) in average and O(n)
in worst case for time complexity. But, note that maintaining a
balanced sorted #GTree of n elements is done in time O(n log(n)).

To create a new #GTree use g_tree_new().

To insert a key/value pair into a #GTree use g_tree_insert()
(O(n log(n))).

To remove a key/value pair use g_tree_remove() (O(n log(n))).

To look up the value corresponding to a given key, use
g_tree_lookup() and g_tree_lookup_extended().

To find out the number of nodes in a #GTree, use g_tree_nnodes(). To
get the height of a #GTree, use g_tree_height().

To traverse a #GTree, calling a function for each node visited in
the traversal, use g_tree_foreach().

To destroy a #GTree, use g_tree_destroy().</doc>
    </docsection>
    <docsection name="trees-nary" gs:managed-name="TreesNary">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8713">The #GNode struct and its associated functions provide a N-ary tree
data structure, where nodes in the tree can contain arbitrary data.

To create a new tree use g_node_new().

To insert a node into a tree use g_node_insert(),
g_node_insert_before(), g_node_append() and g_node_prepend().

To create a new node and insert it into a tree use
g_node_insert_data(), g_node_insert_data_after(),
g_node_insert_data_before(), g_node_append_data()
and g_node_prepend_data().

To reverse the children of a node use g_node_reverse_children().

To find a node use g_node_get_root(), g_node_find(),
g_node_find_child(), g_node_child_index(), g_node_child_position(),
g_node_first_child(), g_node_last_child(), g_node_nth_child(),
g_node_first_sibling(), g_node_prev_sibling(), g_node_next_sibling()
or g_node_last_sibling().

To get information about a node or tree use G_NODE_IS_LEAF(),
G_NODE_IS_ROOT(), g_node_depth(), g_node_n_nodes(),
g_node_n_children(), g_node_is_ancestor() or g_node_max_height().

To traverse a tree, calling a function for each node visited in the
traversal, use g_node_traverse() or g_node_children_foreach().

To remove a node or subtree from a tree use g_node_unlink() or
g_node_destroy().</doc>
    </docsection>
    <docsection name="type_conversion" gs:managed-name="TypeConversion">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8751">Many times GLib, GTK+, and other libraries allow you to pass "user
data" to a callback, in the form of a void pointer. From time to time
you want to pass an integer instead of a pointer. You could allocate
an integer, with something like:
|[&lt;!-- language="C" --&gt;
  int *ip = g_new (int, 1);
  *ip = 42;
]|
But this is inconvenient, and it's annoying to have to free the
memory at some later time.

Pointers are always at least 32 bits in size (on all platforms GLib
intends to support). Thus you can store at least 32-bit integer values
in a pointer value. Naively, you might try this, but it's incorrect:
|[&lt;!-- language="C" --&gt;
  gpointer p;
  int i;
  p = (void*) 42;
  i = (int) p;
]|
Again, that example was not correct, don't copy it.
The problem is that on some systems you need to do this:
|[&lt;!-- language="C" --&gt;
  gpointer p;
  int i;
  p = (void*) (long) 42;
  i = (int) (long) p;
]|
The GLib macros GPOINTER_TO_INT(), GINT_TO_POINTER(), etc. take care
to do the right thing on every platform.

Warning: You may not store pointers in integers. This is not
portable in any way, shape or form. These macros only allow storing
integers in pointers, and only preserve 32 bits of the integer; values
outside the range of a 32-bit integer will be mangled.</doc>
    </docsection>
    <docsection name="types" gs:managed-name="Types">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8794">GLib defines a number of commonly used types, which can be divided
into several groups:
- New types which are not part of standard C (but are defined in
  various C standard library header files) — #gboolean, #gssize.
- Integer types which are guaranteed to be the same size across
  all platforms — #gint8, #guint8, #gint16, #guint16, #gint32,
  #guint32, #gint64, #guint64.
- Types which are easier to use than their standard C counterparts -
  #gpointer, #gconstpointer, #guchar, #guint, #gushort, #gulong.
- Types which correspond exactly to standard C types, but are
  included for completeness — #gchar, #gint, #gshort, #glong,
  #gfloat, #gdouble.
- Types which correspond exactly to standard C99 types, but are available
  to use even if your compiler does not support C99 — #gsize, #goffset,
  #gintptr, #guintptr.

GLib also defines macros for the limits of some of the standard
integer and floating point types, as well as macros for suitable
printf() formats for these types.

Note that depending on the platform and build configuration, the format
macros might not be compatible with the system provided printf() function,
because GLib might use a different printf() implementation internally.
The format macros will always work with GLib API (like g_print()), and with
any C99 compatible printf() implementation.</doc>
    </docsection>
    <docsection name="unicode" gs:managed-name="Unicode">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8828">This section describes a number of functions for dealing with
Unicode characters and strings. There are analogues of the
traditional `ctype.h` character classification and case conversion
functions, UTF-8 analogues of some string utility functions,
functions to perform normalization, case conversion and collation
on UTF-8 strings and finally functions to convert between the UTF-8,
UTF-16 and UCS-4 encodings of Unicode.

The implementations of the Unicode functions in GLib are based
on the Unicode Character Data tables, which are available from
[www.unicode.org](http://www.unicode.org/).

 * Unicode 4.0 was added in GLib 2.8
 * Unicode 4.1 was added in GLib 2.10
 * Unicode 5.0 was added in GLib 2.12
 * Unicode 5.1 was added in GLib 2.16.3
 * Unicode 6.0 was added in GLib 2.30
 * Unicode 6.1 was added in GLib 2.32
 * Unicode 6.2 was added in GLib 2.36
 * Unicode 6.3 was added in GLib 2.40
 * Unicode 7.0 was added in GLib 2.42
 * Unicode 8.0 was added in GLib 2.48
 * Unicode 9.0 was added in GLib 2.50.1
 * Unicode 10.0 was added in GLib 2.54
 * Unicode 11.10 was added in GLib 2.58
 * Unicode 12.0 was added in GLib 2.62
 * Unicode 12.1 was added in GLib 2.62
 * Unicode 13.0 was added in GLib 2.66</doc>
    </docsection>
    <docsection name="uuid" gs:managed-name="Uuid">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8866">A UUID, or Universally unique identifier, is intended to uniquely
identify information in a distributed environment. For the
definition of UUID, see [RFC 4122](https://tools.ietf.org/html/rfc4122.html).

The creation of UUIDs does not require a centralized authority.

UUIDs are of relatively small size (128 bits, or 16 bytes). The
common string representation (ex:
1d6c0810-2bd6-45f3-9890-0268422a6f14) needs 37 bytes.

The UUID specification defines 5 versions, and calling
g_uuid_string_random() will generate a unique (or rather random)
UUID of the most common version, version 4.</doc>
    </docsection>
    <docsection name="version" gs:managed-name="Version">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8889">GLib provides version information, primarily useful in configure
checks for builds that have a configure script. Applications will
not typically use the features described here.

The GLib headers annotate deprecated APIs in a way that produces
compiler warnings if these deprecated APIs are used. The warnings
can be turned off by defining the macro %GLIB_DISABLE_DEPRECATION_WARNINGS
before including the glib.h header.

GLib also provides support for building applications against
defined subsets of deprecated or new GLib APIs. Define the macro
%GLIB_VERSION_MIN_REQUIRED to specify up to what version of GLib
you want to receive warnings about deprecated APIs. Define the
macro %GLIB_VERSION_MAX_ALLOWED to specify the newest version of
GLib whose API you want to use.</doc>
    </docsection>
    <docsection name="warnings" gs:managed-name="Warnings">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8912">GLib defines several warning functions and assertions which can be used to
warn of programmer errors when calling functions, and print error messages
from command line programs.

The g_return_if_fail(), g_return_val_if_fail(), g_return_if_reached() and
g_return_val_if_reached() macros are intended as pre-condition assertions, to
be used at the top of a public function to check that the function’s
arguments are acceptable. Any failure of such a pre-condition assertion is
considered a programming error on the part of the caller of the public API,
and the program is considered to be in an undefined state afterwards. They
are similar to the libc assert() function, but provide more context on
failures.

For example:
|[&lt;!-- language="C" --&gt;
gboolean
g_dtls_connection_shutdown (GDtlsConnection  *conn,
                            gboolean          shutdown_read,
                            gboolean          shutdown_write,
                            GCancellable     *cancellable,
                            GError          **error)
{
  // local variable declarations

  g_return_val_if_fail (G_IS_DTLS_CONNECTION (conn), FALSE);
  g_return_val_if_fail (cancellable == NULL || G_IS_CANCELLABLE (cancellable), FALSE);
  g_return_val_if_fail (error == NULL || *error == NULL, FALSE);

  // function body

  return return_val;
}
]|

g_print(), g_printerr() and g_set_print_handler() are intended to be used for
output from command line applications, since they output to standard output
and standard error by default — whereas functions like g_message() and
g_log() may be redirected to special purpose message windows, files, or the
system journal.</doc>
    </docsection>
    <docsection name="windows" gs:managed-name="Windows">
      <doc xml:space="preserve" filename="glib-2.0.c" line="8959">These functions provide some level of UNIX emulation on the
Windows platform. If your application really needs the POSIX
APIs, we suggest you try the Cygwin project.</doc>
    </docsection>
    <gs:static-class name="UnicharExtensions" gs:managed-name="UnicharExtensions">
      <constant name="MAX_DECOMPOSITION_LENGTH" value="18" c:type="G_UNICHAR_MAX_DECOMPOSITION_LENGTH" version="2.32" gs:access-modifiers="private" gs:managed-name="maxDecompositionLength">
        <doc xml:space="preserve" filename="gunicode.h" line="729">The maximum length (in codepoints) of a compatibility or canonical
decomposition of a single Unicode character.

This is as defined by Unicode 6.1.</doc>
        <source-position filename="gunicode.h" line="739" />
        <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
      </constant>
      <method name="break_type" c:identifier="g_unichar_break_type" gs:dll-name="glib-2.0" gs:managed-name="BreakType" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35137">Determines the break type of @c. @c should be a Unicode character
(to derive a character from UTF-8 encoded text, use
g_utf8_get_char()). The break type is used to find word and line
breaks ("text boundaries"), Pango implements the Unicode boundary
resolution algorithms and normally you would use a function such
as pango_break() instead of caring about break types yourself.</doc>
        <source-position filename="gunicode.h" line="696" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35148">the break type of @c</doc>
          <type name="UnicodeBreakType" c:type="GUnicodeBreakType" gs:managed-name="UnicodeBreakType" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35139">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35139">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="combining_class" c:identifier="g_unichar_combining_class" version="2.14" gs:dll-name="glib-2.0" gs:managed-name="CombiningClass" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35152">Determines the canonical combining class of a Unicode character.</doc>
        <source-position filename="gunicode.h" line="700" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35158">the combining class of the character</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="uc" transfer-ownership="none" gs:managed-name="uc" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35154">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="uc" transfer-ownership="none" gs:managed-name="uc" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35154">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="compose" c:identifier="g_unichar_compose" version="2.30" gs:dll-name="glib-2.0" gs:managed-name="TryCompose" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35163">Performs a single composition step of the
Unicode canonical composition algorithm.

This function includes algorithmic Hangul Jamo composition,
but it is not exactly the inverse of g_unichar_decompose().
No composition can have either of @a or @b equal to zero.
To be precise, this function composes if and only if
there exists a Primary Composite P which is canonically
equivalent to the sequence &lt;@a,@b&gt;.  See the Unicode
Standard for the definition of Primary Composite.

If @a and @b do not compose a new character, @ch is set to zero.

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.</doc>
        <source-position filename="gunicode.h" line="715" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35186">%TRUE if the characters could be composed</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none" gs:managed-name="a" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35165">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="b" transfer-ownership="none" gs:managed-name="b" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35166">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
          <parameter name="ch" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="ch">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35167">return location for the composed character</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="a" transfer-ownership="none" gs:managed-name="a" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35165">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="b" transfer-ownership="none" gs:managed-name="b" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35166">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
          <parameter name="ch" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="ch">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35167">return location for the composed character</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="decompose" c:identifier="g_unichar_decompose" version="2.30" gs:dll-name="glib-2.0" gs:managed-name="TryDecompose" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35191">Performs a single decomposition step of the
Unicode canonical decomposition algorithm.

This function does not include compatibility
decompositions. It does, however, include algorithmic
Hangul Jamo decomposition, as well as 'singleton'
decompositions which replace a character by a single
other character. In the case of singletons *@b will
be set to zero.

If @ch is not decomposable, *@a is set to @ch and *@b
is set to zero.

Note that the way Unicode decomposition pairs are
defined, it is guaranteed that @b would not decompose
further, but @a may itself decompose.  To get the full
canonical decomposition for @ch, one would need to
recursively call this function on @a.  Or use
g_unichar_fully_decompose().

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.</doc>
        <source-position filename="gunicode.h" line="719" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35221">%TRUE if the character could be decomposed</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35193">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="a" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="a">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35194">return location for the first component of @ch</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
          <parameter name="b" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="b">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35195">return location for the second component of @ch</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35193">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="a" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="a">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35194">return location for the first component of @ch</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
          <parameter name="b" direction="out" caller-allocates="0" transfer-ownership="full" gs:managed-name="b">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35195">return location for the second component of @ch</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="digit_value" c:identifier="g_unichar_digit_value" gs:dll-name="glib-2.0" gs:managed-name="DigitValue" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35226">Determines the numeric value of a character as a decimal
digit.</doc>
        <source-position filename="gunicode.h" line="685" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35233">If @c is a decimal digit (according to
g_unichar_isdigit()), its numeric value. Otherwise, -1.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35228">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35228">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="fully_decompose" c:identifier="g_unichar_fully_decompose" version="2.30" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="FullyDecompose" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35238">Computes the canonical or compatibility decomposition of a
Unicode character.  For compatibility decomposition,
pass %TRUE for @compat; for canonical decomposition
pass %FALSE for @compat.

The decomposed sequence is placed in @result.  Only up to
@result_len characters are written into @result.  The length
of the full decomposition (irrespective of @result_len) is
returned by the function.  For canonical decomposition,
currently all decompositions are of length at most 4, but
this may change in the future (very unlikely though).
At any rate, Unicode does guarantee that a buffer of length
18 is always enough for both compatibility and canonical
decompositions, so that is the size recommended. This is provided
as %G_UNICHAR_MAX_DECOMPOSITION_LENGTH.

See
[UAX#15](http://unicode.org/reports/tr15/)
for details.</doc>
        <source-position filename="gunicode.h" line="724" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35265">the length of the full decomposition.</doc>
          <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35240">a Unicode character.</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="compat" transfer-ownership="none" gs:managed-name="compat" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35241">whether perform canonical or compatibility decomposition</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
          <parameter name="result" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="result">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35242">location to store decomposed result, or %NULL</doc>
            <array length="2" zero-terminated="0" c:type="gunichar*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
            </array>
          </parameter>
          <parameter name="result_len" transfer-ownership="none" gs:managed-name="resultLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35243">length of @result</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35240">a Unicode character.</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="compat" transfer-ownership="none" gs:managed-name="compat" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35241">whether perform canonical or compatibility decomposition</doc>
            <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
          </parameter>
          <parameter name="result" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="result">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35242">location to store decomposed result, or %NULL</doc>
            <array length="2" zero-terminated="0" c:type="gunichar*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
            </array>
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_mirror_char" c:identifier="g_unichar_get_mirror_char" version="2.4" gs:dll-name="glib-2.0" gs:managed-name="TryGetMirrorChar" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35270">In Unicode, some characters are "mirrored". This means that their
images are mirrored horizontally in text that is laid out from right
to left. For instance, "(" would become its mirror image, ")", in
right-to-left text.

If @ch has the Unicode mirrored property and there is another unicode
character that typically has a glyph that is the mirror image of @ch's
glyph and @mirrored_ch is set, it puts that character in the address
pointed to by @mirrored_ch.  Otherwise the original character is put.</doc>
        <source-position filename="gunicode.h" line="703" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35285">%TRUE if @ch has a mirrored character, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35272">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="mirrored_ch" transfer-ownership="none" direction="out" gs:managed-name="mirroredCh">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35273">location to store the mirrored character</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35272">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="mirrored_ch" transfer-ownership="none" direction="out" gs:managed-name="mirroredCh">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35273">location to store the mirrored character</doc>
            <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_script" c:identifier="g_unichar_get_script" version="2.14" gs:dll-name="glib-2.0" gs:managed-name="GetScript" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35290">Looks up the #GUnicodeScript for a particular character (as defined
by Unicode Standard Annex \#24). No check is made for @ch being a
valid Unicode character; if you pass in invalid character, the
result is undefined.

This function is equivalent to pango_script_for_unichar() and the
two are interchangeable.</doc>
        <source-position filename="gunicode.h" line="707" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35302">the #GUnicodeScript for the character.</doc>
          <type name="UnicodeScript" c:type="GUnicodeScript" gs:managed-name="UnicodeScript" />
        </return-value>
        <parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35292">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35292">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_alpha_numeric" c:identifier="g_unichar_isalnum" gs:dll-name="glib-2.0" gs:managed-name="IsAlphaNumeric" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35307">Determines whether a character is alphanumeric.
Given some UTF-8 text, obtain a character value
with g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="639" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35315">%TRUE if @c is an alphanumeric character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35309">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35309">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_alpha" c:identifier="g_unichar_isalpha" gs:dll-name="glib-2.0" gs:managed-name="IsAlpha" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35319">Determines whether a character is alphabetic (i.e. a letter).
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="641" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35327">%TRUE if @c is an alphabetic character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35321">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35321">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_control" c:identifier="g_unichar_iscntrl" gs:dll-name="glib-2.0" gs:managed-name="IsControl" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35331">Determines whether a character is a control character.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="643" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35339">%TRUE if @c is a control character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35333">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35333">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_defined" c:identifier="g_unichar_isdefined" gs:dll-name="glib-2.0" gs:managed-name="IsDefined" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35343">Determines if a given character is assigned in the Unicode
standard.</doc>
        <source-position filename="gunicode.h" line="663" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35350">%TRUE if the character has an assigned value</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35345">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35345">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_digit" c:identifier="g_unichar_isdigit" gs:dll-name="glib-2.0" gs:managed-name="IsDigit" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35354">Determines whether a character is numeric (i.e. a digit).  This
covers ASCII 0-9 and also digits in other languages/scripts.  Given
some UTF-8 text, obtain a character value with g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="645" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35362">%TRUE if @c is a digit</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35356">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35356">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_graph" c:identifier="g_unichar_isgraph" gs:dll-name="glib-2.0" gs:managed-name="IsGraph" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35366">Determines whether a character is printable and not a space
(returns %FALSE for control characters, format characters, and
spaces). g_unichar_isprint() is similar, but returns %TRUE for
spaces. Given some UTF-8 text, obtain a character value with
g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="647" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35376">%TRUE if @c is printable unless it's a space</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35368">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35368">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_lower" c:identifier="g_unichar_islower" gs:dll-name="glib-2.0" gs:managed-name="IsLower" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35380">Determines whether a character is a lowercase letter.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="649" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35388">%TRUE if @c is a lowercase letter</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35382">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35382">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_mark" c:identifier="g_unichar_ismark" version="2.14" gs:dll-name="glib-2.0" gs:managed-name="IsMark" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35392">Determines whether a character is a mark (non-spacing mark,
combining mark, or enclosing mark in Unicode speak).
Given some UTF-8 text, obtain a character value
with g_utf8_get_char().

Note: in most cases where isalpha characters are allowed,
ismark characters should be allowed to as they are essential
for writing most European languages as well as many non-Latin
scripts.</doc>
        <source-position filename="gunicode.h" line="671" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35406">%TRUE if @c is a mark character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35394">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35394">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_printable" c:identifier="g_unichar_isprint" gs:dll-name="glib-2.0" gs:managed-name="IsPrintable" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35411">Determines whether a character is printable.
Unlike g_unichar_isgraph(), returns %TRUE for spaces.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="651" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35420">%TRUE if @c is printable</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35413">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35413">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_punctuation" c:identifier="g_unichar_ispunct" gs:dll-name="glib-2.0" gs:managed-name="IsPunctuation" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35424">Determines whether a character is punctuation or a symbol.
Given some UTF-8 text, obtain a character value with
g_utf8_get_char().</doc>
        <source-position filename="gunicode.h" line="653" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35432">%TRUE if @c is a punctuation or symbol character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35426">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35426">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_space" c:identifier="g_unichar_isspace" gs:dll-name="glib-2.0" gs:managed-name="IsSpace" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35436">Determines whether a character is a space, tab, or line separator
(newline, carriage return, etc.).  Given some UTF-8 text, obtain a
character value with g_utf8_get_char().

(Note: don't use this to do word breaking; you have to use
Pango or equivalent to get word breaking right, the algorithm
is fairly complex.)</doc>
        <source-position filename="gunicode.h" line="655" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35448">%TRUE if @c is a space character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35438">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35438">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_title" c:identifier="g_unichar_istitle" gs:dll-name="glib-2.0" gs:managed-name="IsTitle" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35452">Determines if a character is titlecase. Some characters in
Unicode which are composites, such as the DZ digraph
have three case variants instead of just two. The titlecase
form is used at the beginning of a word where only the
first letter is capitalized. The titlecase form of the DZ
digraph is U+01F2 LATIN CAPITAL LETTTER D WITH SMALL LETTER Z.</doc>
        <source-position filename="gunicode.h" line="661" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35463">%TRUE if the character is titlecase</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35454">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35454">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_upper" c:identifier="g_unichar_isupper" gs:dll-name="glib-2.0" gs:managed-name="IsUpper" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35467">Determines if a character is uppercase.</doc>
        <source-position filename="gunicode.h" line="657" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35473">%TRUE if @c is an uppercase character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35469">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35469">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_wide" c:identifier="g_unichar_iswide" gs:dll-name="glib-2.0" gs:managed-name="IsWide" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35477">Determines if a character is typically rendered in a double-width
cell.</doc>
        <source-position filename="gunicode.h" line="665" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35484">%TRUE if the character is wide</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35479">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35479">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_wide_cjk" c:identifier="g_unichar_iswide_cjk" version="2.12" gs:dll-name="glib-2.0" gs:managed-name="IsWideCjk" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35488">Determines if a character is typically rendered in a double-width
cell under legacy East Asian locales.  If a character is wide according to
g_unichar_iswide(), then it is also reported wide with this function, but
the converse is not necessarily true. See the
[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)
for details.

If a character passes the g_unichar_iswide() test then it will also pass
this test, but not the other way around.  Note that some characters may
pass both this test and g_unichar_iszerowidth().</doc>
        <source-position filename="gunicode.h" line="667" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35503">%TRUE if the character is wide in legacy East Asian locales</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35490">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35490">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_hex_digit" c:identifier="g_unichar_isxdigit" gs:dll-name="glib-2.0" gs:managed-name="IsHexDigit" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35508">Determines if a character is a hexadecimal digit.</doc>
        <source-position filename="gunicode.h" line="659" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35514">%TRUE if the character is a hexadecimal digit</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35510">a Unicode character.</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35510">a Unicode character.</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="is_zero_width" c:identifier="g_unichar_iszerowidth" version="2.14" gs:dll-name="glib-2.0" gs:managed-name="IsZeroWidth" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35518">Determines if a given character typically takes zero width when rendered.
The return value is %TRUE for all non-spacing and enclosing marks
(e.g., combining accents), format characters, zero-width
space, but not U+00AD SOFT HYPHEN.

A typical use of this function is with one of g_unichar_iswide() or
g_unichar_iswide_cjk() to determine the number of cells a string occupies
when displayed on a grid display (terminals).  However, note that not all
terminals support zero-width rendering of zero-width marks.</doc>
        <source-position filename="gunicode.h" line="669" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35532">%TRUE if the character has zero width</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35520">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35520">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_utf8" c:identifier="g_unichar_to_utf8" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="ToUtf8" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35537">Converts a single character to UTF-8.</doc>
        <source-position filename="gunicode.h" line="861" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35546">number of bytes written</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35539">a Unicode character code</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="outbuf" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="outbuf">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35540">output buffer, must have at
      least 6 bytes of space. If %NULL, the length will be computed and
      returned and nothing will be written to @outbuf.</doc>
            <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35539">a Unicode character code</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
          <parameter name="outbuf" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="outbuf">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35540">output buffer, must have at
      least 6 bytes of space. If %NULL, the length will be computed and
      returned and nothing will be written to @outbuf.</doc>
            <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_lower" c:identifier="g_unichar_tolower" gs:dll-name="glib-2.0" gs:managed-name="ToLower" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35550">Converts a character to lower case.</doc>
        <source-position filename="gunicode.h" line="678" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35556">the result of converting @c to lower case.
              If @c is not an upperlower or titlecase character,
              or has no lowercase equivalent @c is returned unchanged.</doc>
          <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35552">a Unicode character.</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35552">a Unicode character.</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_title" c:identifier="g_unichar_totitle" gs:dll-name="glib-2.0" gs:managed-name="ToTitle" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35562">Converts a character to the titlecase.</doc>
        <source-position filename="gunicode.h" line="680" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35568">the result of converting @c to titlecase.
              If @c is not an uppercase or lowercase character,
              @c is returned unchanged.</doc>
          <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35564">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35564">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_upper" c:identifier="g_unichar_toupper" gs:dll-name="glib-2.0" gs:managed-name="ToUpper" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35574">Converts a character to uppercase.</doc>
        <source-position filename="gunicode.h" line="676" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35580">the result of converting @c to uppercase.
              If @c is not a lowercase or titlecase character,
              or has no upper case equivalent @c is returned unchanged.</doc>
          <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35576">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35576">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="type" c:identifier="g_unichar_type" gs:dll-name="glib-2.0" gs:managed-name="Type" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35586">Classifies a Unicode character by type.</doc>
        <source-position filename="gunicode.h" line="692" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35592">the type of the character.</doc>
          <type name="UnicodeType" c:type="GUnicodeType" gs:managed-name="UnicodeType" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35588">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35588">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="validate" c:identifier="g_unichar_validate" gs:dll-name="glib-2.0" gs:managed-name="Validate" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35596">Checks whether @ch is a valid Unicode character. Some possible
integer values of @ch will not be valid. 0 is considered a valid
character, though it's normally a string terminator.</doc>
        <source-position filename="gunicode.h" line="711" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35604">%TRUE if @ch is a valid Unicode character</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35598">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="ch" transfer-ownership="none" gs:managed-name="ch" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35598">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="hex_digit_value" c:identifier="g_unichar_xdigit_value" gs:dll-name="glib-2.0" gs:managed-name="HexDigitValue" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="35608">Determines the numeric value of a character as a hexadecimal
digit.</doc>
        <source-position filename="gunicode.h" line="688" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="35615">If @c is a hex digit (according to
g_unichar_isxdigit()), its numeric value. Otherwise, -1.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35610">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="35610">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
    </gs:static-class>
    <gs:static-class name="Version" gs:managed-name="Version">
      <constant name="MAJOR" value="2" c:type="GLIB_MAJOR_VERSION" gs:access-modifiers="private" gs:managed-name="major">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1136">The major version number of the GLib library.

Like #glib_major_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.</doc>
        <source-position filename="glibconfig.h" line="111" />
        <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
      </constant>
      <constant name="MINOR" value="66" c:type="GLIB_MINOR_VERSION" gs:access-modifiers="private" gs:managed-name="minor">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1158">The minor version number of the GLib library.

Like #gtk_minor_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.</doc>
        <source-position filename="glibconfig.h" line="112" />
        <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
      </constant>
      <constant name="MICRO" value="2" c:type="GLIB_MICRO_VERSION" gs:access-modifiers="private" gs:managed-name="micro">
        <doc xml:space="preserve" filename="glib-2.0.c" line="1147">The micro version number of the GLib library.

Like #gtk_micro_version, but from the headers used at
application compile time, rather than from the library
linked against at application run time.</doc>
        <source-position filename="glibconfig.h" line="113" />
        <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
      </constant>
      <function name="check" c:identifier="glib_check_version" version="2.6" gs:dll-name="glib-2.0" gs:managed-name="Check">
        <doc xml:space="preserve" filename="glib-2.0.c" line="41149">Checks that the GLib library in use is compatible with the
given version. Generally you would pass in the constants
#GLIB_MAJOR_VERSION, #GLIB_MINOR_VERSION, #GLIB_MICRO_VERSION
as the three arguments to this function; that produces
a check that the library in use is compatible with
the version of GLib the application or module was compiled
against.

Compatibility is defined by two things: first the version
of the running library is newer than the version
@required_major.required_minor.@required_micro. Second
the running library must be binary compatible with the
version @required_major.required_minor.@required_micro
(same major version.)</doc>
        <source-position filename="gversion.h" line="43" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="41170">%NULL if the GLib library is compatible with the
    given version, or a string describing the version mismatch.
    The returned string is owned by GLib and must not be modified
    or freed.</doc>
          <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <parameter name="required_major" transfer-ownership="none" gs:managed-name="requiredMajor" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="41151">the required major version</doc>
            <type name="guint" c:type="guint" gs:managed-name="System.UInt32" />
          </parameter>
          <parameter name="required_minor" transfer-ownership="none" gs:managed-name="requiredMinor" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="41152">the required minor version</doc>
            <type name="guint" c:type="guint" gs:managed-name="System.UInt32" />
          </parameter>
          <parameter name="required_micro" transfer-ownership="none" gs:managed-name="requiredMicro" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="41153">the required micro version</doc>
            <type name="guint" c:type="guint" gs:managed-name="System.UInt32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <parameter name="required_major" transfer-ownership="none" gs:managed-name="requiredMajor" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="41151">the required major version</doc>
            <type name="guint" c:type="guint" gs:managed-name="System.UInt32" />
          </parameter>
          <parameter name="required_minor" transfer-ownership="none" gs:managed-name="requiredMinor" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="41152">the required minor version</doc>
            <type name="guint" c:type="guint" gs:managed-name="System.UInt32" />
          </parameter>
          <parameter name="required_micro" transfer-ownership="none" gs:managed-name="requiredMicro" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="41153">the required micro version</doc>
            <type name="guint" c:type="guint" gs:managed-name="System.UInt32" />
          </parameter>
        </gs:managed-parameters>
      </function>
    </gs:static-class>
    <gs:static-class name="Utf8Extensions" gs:managed-name="Utf8Extensions">
      <method name="casefold" c:identifier="g_utf8_casefold" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Casefold" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36792">Converts a string into a form that is independent of case. The
result will not correspond to any particular case, but can be
compared for equality or ordered with the results of calling
g_utf8_casefold() on other strings.

Note that calling g_utf8_casefold() followed by g_utf8_collate() is
only an approximation to the correct linguistic case insensitive
ordering, though it is a fairly good one. Getting this exactly
right would require a more sophisticated collation function that
takes case sensitivity into account. GLib does not currently
provide such a function.</doc>
        <source-position filename="gunicode.h" line="880" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36809">a newly allocated string, that is a
  case independent form of @str.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36794">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36795">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36794">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36795">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="collate" c:identifier="g_utf8_collate" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Collate" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36814">Compares two strings for ordering using the linguistically
correct rules for the [current locale][setlocale].
When sorting a large number of strings, it will be significantly
faster to obtain collation keys with g_utf8_collate_key() and
compare the keys with strcmp() when sorting instead of sorting
the original strings.</doc>
        <source-position filename="gunicode.h" line="924" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36826">&lt; 0 if @str1 compares before @str2,
  0 if they compare equal, &gt; 0 if @str1 compares after @str2.</doc>
          <type name="gint" c:type="gint" gs:managed-name="System.Int32" />
        </return-value>
        <parameters>
          <instance-parameter name="str1" transfer-ownership="none" gs:managed-name="str1" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36816">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="str2" transfer-ownership="none" gs:managed-name="str2" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36817">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str1" transfer-ownership="none" gs:managed-name="str1" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36816">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="str2" transfer-ownership="none" gs:managed-name="str2" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36817">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="collate_key" c:identifier="g_utf8_collate_key" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="CollateKey" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36831">Converts a string into a collation key that can be compared
with other collation keys produced by the same function using
strcmp().

The results of comparing the collation keys of two strings
with strcmp() will always be the same as comparing the two
original keys with g_utf8_collate().

Note that this function depends on the [current locale][setlocale].</doc>
        <source-position filename="gunicode.h" line="927" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36846">a newly allocated string. This string should
  be freed with g_free() when you are done with it.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36833">a UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36834">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36833">a UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36834">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="collate_key_for_filename" c:identifier="g_utf8_collate_key_for_filename" version="2.8" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="CollateKeyForFilename" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36851">Converts a string into a collation key that can be compared
with other collation keys produced by the same function using strcmp().

In order to sort filenames correctly, this function treats the dot '.'
as a special case. Most dictionary orderings seem to consider it
insignificant, thus producing the ordering "event.c" "eventgenerator.c"
"event.h" instead of "event.c" "event.h" "eventgenerator.c". Also, we
would like to treat numbers intelligently so that "file1" "file10" "file5"
is sorted as "file1" "file5" "file10".

Note that this function depends on the [current locale][setlocale].</doc>
        <source-position filename="gunicode.h" line="930" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36868">a newly allocated string. This string should
  be freed with g_free() when you are done with it.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36853">a UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36854">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36853">a UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36854">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="find_next_char" c:identifier="g_utf8_find_next_char" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="FindNextChar" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36874">Finds the start of the next UTF-8 character in the string after @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.

If @end is %NULL, the return value will never be %NULL: if the end of the
string is reached, a pointer to the terminating nul byte is returned. If
@end is non-%NULL, the return value will be %NULL if the end of the string
is reached.</doc>
        <source-position filename="gunicode.h" line="785" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36891">a pointer to the found character or %NULL if @end is
   set and is reached</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36876">a pointer to a position within a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="end" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="end" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36877">a pointer to the byte following the end of the string,
    or %NULL to indicate that the string is nul-terminated</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36876">a pointer to a position within a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="end" transfer-ownership="none" nullable="1" allow-none="1" gs:managed-name="end" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36877">a pointer to the byte following the end of the string,
    or %NULL to indicate that the string is nul-terminated</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="find_prev_char" c:identifier="g_utf8_find_prev_char" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="FindPrevChar" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36896">Given a position @p with a UTF-8 encoded string @str, find the start
of the previous UTF-8 character starting before @p. Returns %NULL if no
UTF-8 characters are present in @str before @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte.</doc>
        <source-position filename="gunicode.h" line="788" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36909">a pointer to the found character or %NULL.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36898">pointer to the beginning of a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36899">pointer to some position within @str</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36898">pointer to the beginning of a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36899">pointer to some position within @str</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_char" c:identifier="g_utf8_get_char" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="GetChar" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36913">Converts a sequence of bytes encoded as UTF-8 to a Unicode character.

If @p does not point to a valid UTF-8 encoded character, results
are undefined. If you are not sure that the bytes are complete
valid Unicode characters, you should use g_utf8_get_char_validated()
instead.</doc>
        <source-position filename="gunicode.h" line="771" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36924">the resulting character</doc>
          <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36915">a pointer to Unicode character encoded as UTF-8</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36915">a pointer to Unicode character encoded as UTF-8</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="get_char_validated" c:identifier="g_utf8_get_char_validated" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="GetCharValidated" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36928">Convert a sequence of bytes encoded as UTF-8 to a Unicode character.
This function checks for incomplete characters, for invalid characters
such as characters that are out of the range of Unicode, and for
overlong encodings of valid characters.

Note that g_utf8_get_char_validated() returns (gunichar)-2 if
@max_len is positive and any of the bytes in the first UTF-8 character
sequence are nul.</doc>
        <source-position filename="gunicode.h" line="773" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36942">the resulting character. If @p points to a partial
    sequence at the end of a string that could begin a valid
    character (or if @max_len is zero), returns (gunichar)-2;
    otherwise, if @p does not point to a valid UTF-8 encoded
    Unicode character, returns (gunichar)-1.</doc>
          <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36930">a pointer to Unicode character encoded as UTF-8</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none" gs:managed-name="maxLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36931">the maximum number of bytes to read, or -1 if @p is nul-terminated</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36930">a pointer to Unicode character encoded as UTF-8</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none" gs:managed-name="maxLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36931">the maximum number of bytes to read, or -1 if @p is nul-terminated</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="make_valid" c:identifier="g_utf8_make_valid" version="2.52" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="MakeValid" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36950">If the provided string is valid UTF-8, return a copy of it. If not,
return a copy in which bytes that could not be interpreted as valid Unicode
are replaced with the Unicode replacement character (U+FFFD).

For example, this is an appropriate function to use if you have received
a string that was incorrectly declared to be UTF-8, and you need a valid
UTF-8 version of it that can be logged or displayed to the user, with the
assumption that it is close enough to ASCII or UTF-8 to be mostly
readable as-is.</doc>
        <source-position filename="gunicode.h" line="934" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="36966">a valid UTF-8 string whose content resembles @str</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36952">string to coerce into UTF-8</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36953">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36952">string to coerce into UTF-8</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36953">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="normalize" c:identifier="g_utf8_normalize" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Normalize" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="36971">Converts a string into canonical form, standardizing
such issues as whether a character with an accent
is represented as a base character and combining
accent or as a single precomposed character. The
string has to be valid UTF-8, otherwise %NULL is
returned. You should generally call g_utf8_normalize()
before comparing two Unicode strings.

The normalization mode %G_NORMALIZE_DEFAULT only
standardizes differences that do not affect the
text content, such as the above-mentioned accent
representation. %G_NORMALIZE_ALL also standardizes
the "compatibility" characters in Unicode, such
as SUPERSCRIPT THREE to the standard forms
(in this case DIGIT THREE). Formatting information
may be lost but for most text operations such
characters should be considered the same.

%G_NORMALIZE_DEFAULT_COMPOSE and %G_NORMALIZE_ALL_COMPOSE
are like %G_NORMALIZE_DEFAULT and %G_NORMALIZE_ALL,
but returned a result with composed forms rather
than a maximally decomposed form. This is often
useful if you intend to convert the string to
a legacy encoding or pass it to a system with
less capable Unicode handling.</doc>
        <source-position filename="gunicode.h" line="919" />
        <return-value transfer-ownership="full" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37003">a newly allocated string, that
  is the normalized form of @str, or %NULL if @str
  is not valid UTF-8.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36973">a UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36974">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="mode" transfer-ownership="none" gs:managed-name="mode" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36975">the type of normalization to perform.</doc>
            <type name="NormalizeMode" c:type="GNormalizeMode" gs:managed-name="NormalizeMode" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36973">a UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36974">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="mode" transfer-ownership="none" gs:managed-name="mode" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="36975">the type of normalization to perform.</doc>
            <type name="NormalizeMode" c:type="GNormalizeMode" gs:managed-name="NormalizeMode" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="offset_to_pointer" c:identifier="g_utf8_offset_to_pointer" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="OffsetToPointer" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37009">Converts from an integer character offset to a pointer to a position
within the string.

Since 2.10, this function allows to pass a negative @offset to
step backwards. It is usually worth stepping backwards from the end
instead of forwards if @offset is in the last fourth of the string,
since moving forward is about 3 times faster than moving backward.

Note that this function doesn't abort when reaching the end of @str.
Therefore you should be sure that @offset is within string boundaries
before calling that function. Call g_utf8_strlen() when unsure.
This limitation exists as this function is called frequently during
text rendering and therefore has to be as fast as possible.</doc>
        <source-position filename="gunicode.h" line="777" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37028">the resulting pointer</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37011">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none" gs:managed-name="offset" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37012">a character offset within @str</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37011">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none" gs:managed-name="offset" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37012">a character offset within @str</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="pointer_to_offset" c:identifier="g_utf8_pointer_to_offset" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="PointerToOffset" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37032">Converts from a pointer to position within a string to an integer
character offset.

Since 2.10, this function allows @pos to be before @str, and returns
a negative offset in this case.</doc>
        <source-position filename="gunicode.h" line="780" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37043">the resulting character offset</doc>
          <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37034">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none" gs:managed-name="pos" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37035">a pointer to a position within @str</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37034">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none" gs:managed-name="pos" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37035">a pointer to a position within @str</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="prev_char" c:identifier="g_utf8_prev_char" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="PrevChar" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37047">Finds the previous UTF-8 character in the string before @p.

@p does not have to be at the beginning of a UTF-8 character. No check
is made to see if the character found is actually valid other than
it starts with an appropriate byte. If @p might be the first
character of the string, you must use g_utf8_find_prev_char() instead.</doc>
        <source-position filename="gunicode.h" line="783" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37058">a pointer to the found character</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37049">a pointer to a position within a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37049">a pointer to a position within a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
        </gs:managed-parameters>
      </method>
      <method name="strchr" c:identifier="g_utf8_strchr" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strchr" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37062">Finds the leftmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to @len bytes.
If @len is -1, allow unbounded search.</doc>
        <source-position filename="gunicode.h" line="808" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37072">%NULL if the string does not contain the character,
    otherwise, a pointer to the start of the leftmost occurrence
    of the character in the string.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37064">a nul-terminated UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37065">the maximum length of @p</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37066">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37064">a nul-terminated UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37065">the maximum length of @p</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37066">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="strdown" c:identifier="g_utf8_strdown" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strdown" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37078">Converts all Unicode characters in the string that have a case
to lowercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string changing.</doc>
        <source-position filename="gunicode.h" line="877" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37088">a newly allocated string, with all characters
   converted to lowercase.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37080">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37081">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37080">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37081">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="strlen" c:identifier="g_utf8_strlen" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strlen" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37093">Computes the length of the string in characters, not including
the terminating nul character. If the @max'th byte falls in the
middle of a character, the last (partial) character is not counted.</doc>
        <source-position filename="gunicode.h" line="792" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37106">the length of the string in characters</doc>
          <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37095">pointer to the start of a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="max" transfer-ownership="none" gs:managed-name="max" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37096">the maximum number of bytes to examine. If @max
      is less than 0, then the string is assumed to be
      nul-terminated. If @max is 0, @p will not be examined and
      may be %NULL. If @max is greater than 0, up to @max
      bytes are examined</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37095">pointer to the start of a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="max" transfer-ownership="none" gs:managed-name="max" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37096">the maximum number of bytes to examine. If @max
      is less than 0, then the string is assumed to be
      nul-terminated. If @max is 0, @p will not be examined and
      may be %NULL. If @max is greater than 0, up to @max
      bytes are examined</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="strncpy" c:identifier="g_utf8_strncpy" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strncpy" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37110">Like the standard C strncpy() function, but copies a given number
of characters instead of a given number of bytes. The @src string
must be valid UTF-8 encoded text. (Use g_utf8_validate() on all
text before trying to use UTF-8 utility functions with it.)

Note you must ensure @dest is at least 4 * @n to fit the
largest possible UTF-8 characters</doc>
        <source-position filename="gunicode.h" line="801" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37124">@dest</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="dest" transfer-ownership="none" gs:managed-name="dest" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37112">buffer to fill with characters from @src</doc>
            <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="src" transfer-ownership="none" gs:managed-name="src" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37113">UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="n" transfer-ownership="none" gs:managed-name="n" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37114">character count</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="dest" transfer-ownership="none" gs:managed-name="dest" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37112">buffer to fill with characters from @src</doc>
            <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="src" transfer-ownership="none" gs:managed-name="src" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37113">UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
          <parameter name="n" transfer-ownership="none" gs:managed-name="n" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37114">character count</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="strrchr" c:identifier="g_utf8_strrchr" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strrchr" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37128">Find the rightmost occurrence of the given Unicode character
in a UTF-8 encoded string, while limiting the search to @len bytes.
If @len is -1, allow unbounded search.</doc>
        <source-position filename="gunicode.h" line="812" />
        <return-value transfer-ownership="none" nullable="1" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37138">%NULL if the string does not contain the character,
    otherwise, a pointer to the start of the rightmost occurrence
    of the character in the string.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37130">a nul-terminated UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37131">the maximum length of @p</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37132">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="p" transfer-ownership="none" gs:managed-name="p" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37130">a nul-terminated UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37131">the maximum length of @p</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="c" transfer-ownership="none" gs:managed-name="c" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37132">a Unicode character</doc>
            <type name="gunichar" c:type="gunichar" gs:managed-name="GISharp.Lib.GLib.Unichar" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="strreverse" c:identifier="g_utf8_strreverse" version="2.2" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strreverse" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37144">Reverses a UTF-8 string. @str must be valid UTF-8 encoded text.
(Use g_utf8_validate() on all text before trying to use UTF-8
utility functions with it.)

This function is intended for programmatic uses of reversed strings.
It pays no attention to decomposed characters, combining marks, byte
order marks, directional indicators (LRM, LRO, etc) and similar
characters which might need special handling when reversing a string
for display purposes.

Note that unlike g_strreverse(), this function returns
newly-allocated memory, which should be freed with g_free() when
no longer needed.</doc>
        <source-position filename="gunicode.h" line="816" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37164">a newly-allocated string which is the reverse of @str</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37146">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37147">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37146">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37147">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="strup" c:identifier="g_utf8_strup" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="Strup" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37169">Converts all Unicode characters in the string that have a case
to uppercase. The exact manner that this is done depends
on the current locale, and may result in the number of
characters in the string increasing. (For instance, the
German ess-zet will be changed to SS.)</doc>
        <source-position filename="gunicode.h" line="874" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37180">a newly allocated string, with all characters
   converted to uppercase.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37171">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37172">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37171">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37172">length of @str, in bytes, or -1 if @str is nul-terminated.</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="substring" c:identifier="g_utf8_substring" version="2.30" gs:pinvoke-only="0" gs:dll-name="glib-2.0" gs:managed-name="Substring" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37185">Copies a substring out of a UTF-8 encoded string.
The substring will contain @end_pos - @start_pos characters.</doc>
        <source-position filename="gunicode.h" line="796" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37194">a newly allocated copy of the requested
    substring. Free with g_free() when no longer needed.</doc>
          <type name="utf8" c:type="gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37187">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="start_pos" transfer-ownership="none" gs:managed-name="startPos" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37188">a character offset within @str</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="end_pos" transfer-ownership="none" gs:managed-name="endPos" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37189">another character offset within @str</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37187">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="start_pos" transfer-ownership="none" gs:managed-name="startPos" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37188">a character offset within @str</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="end_pos" transfer-ownership="none" gs:managed-name="endPos" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37189">another character offset within @str</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_ucs4" c:identifier="g_utf8_to_ucs4" throws="1" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="ToUcs4" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37200">Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4. A trailing 0 character will be added to the
string after the converted text.</doc>
        <source-position filename="gunicode.h" line="826" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37222">a pointer to a newly allocated UCS-4 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.</doc>
          <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37202">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37203">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_read" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsRead">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37205">location to store number of
   bytes read, or %NULL.
    If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
    returned in case @str contains a trailing partial
    character. If an error occurs then the index of the
    invalid input is stored here.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_written" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsWritten">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37211">location to store number
    of characters written or %NULL. The value here stored does not include
    the trailing 0 character.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37202">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37203">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_read" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsRead">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37205">location to store number of
   bytes read, or %NULL.
    If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will be
    returned in case @str contains a trailing partial
    character. If an error occurs then the index of the
    invalid input is stored here.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_written" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsWritten">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37211">location to store number
    of characters written or %NULL. The value here stored does not include
    the trailing 0 character.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_ucs4_fast" c:identifier="g_utf8_to_ucs4_fast" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="ToUcs4Fast" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37228">Convert a string from UTF-8 to a 32-bit fixed width
representation as UCS-4, assuming valid UTF-8 input.
This function is roughly twice as fast as g_utf8_to_ucs4()
but does no error checking on the input. A trailing 0 character
will be added to the string after the converted text.</doc>
        <source-position filename="gunicode.h" line="832" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37242">a pointer to a newly allocated UCS-4 string.
    This value must be freed with g_free().</doc>
          <type name="gunichar" c:type="gunichar*" gs:managed-name="GISharp.Lib.GLib.Unichar" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37230">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37231">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_written" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsWritten">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37233">location to store the
    number of characters in the result, or %NULL.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37230">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37231">the maximum length of @str to use, in bytes. If @len &lt; 0,
    then the string is nul-terminated.</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_written" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsWritten">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37233">location to store the
    number of characters in the result, or %NULL.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="to_utf16" c:identifier="g_utf8_to_utf16" throws="1" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="ToUtf16" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37247">Convert a string from UTF-8 to UTF-16. A 0 character will be
added to the result after the converted text.</doc>
        <source-position filename="gunicode.h" line="820" />
        <return-value transfer-ownership="full" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37266">a pointer to a newly allocated UTF-16 string.
    This value must be freed with g_free(). If an error occurs,
    %NULL will be returned and @error set.</doc>
          <type name="guint16" c:type="gunichar2*" gs:managed-name="System.UInt16" gs:is-pointer="1" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37249">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37250">the maximum length (number of bytes) of @str to use.
    If @len &lt; 0, then the string is nul-terminated.</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_read" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsRead">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37252">location to store number of
    bytes read, or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will
    be returned in case @str contains a trailing partial character. If
    an error occurs then the index of the invalid input is stored here.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_written" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsWritten">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37256">location to store number
    of #gunichar2 written, or %NULL. The value stored here does not include
    the trailing 0.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <gs:error-parameter name="error" direction="inout" transfer-ownership="full" gs:managed-name="error">
            <doc>return location for a #GError</doc>
            <type name="GLib.Error" c:type="GError**" gs:managed-name="GISharp.Lib.GLib.Error" gs:is-pointer="1" />
          </gs:error-parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37249">a UTF-8 encoded string</doc>
            <type name="utf8" c:type="const gchar*" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </instance-parameter>
          <parameter name="len" transfer-ownership="none" gs:managed-name="len" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37250">the maximum length (number of bytes) of @str to use.
    If @len &lt; 0, then the string is nul-terminated.</doc>
            <type name="glong" c:type="glong" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_read" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsRead">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37252">location to store number of
    bytes read, or %NULL. If %NULL, then %G_CONVERT_ERROR_PARTIAL_INPUT will
    be returned in case @str contains a trailing partial character. If
    an error occurs then the index of the invalid input is stored here.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
          <parameter name="items_written" direction="out" caller-allocates="1" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="itemsWritten">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37256">location to store number
    of #gunichar2 written, or %NULL. The value stored here does not include
    the trailing 0.</doc>
            <type name="glong" c:type="glong*" gs:managed-name="GISharp.Runtime.CLong" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="validate" c:identifier="g_utf8_validate" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="TryValidate" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37272">Validates UTF-8 encoded text. @str is the text to validate;
if @str is nul-terminated, then @max_len can be -1, otherwise
@max_len should be the number of bytes to validate.
If @end is non-%NULL, then the end of the valid range
will be stored there (i.e. the start of the first invalid
character if some bytes were invalid, or the end of the text
being validated otherwise).

Note that g_utf8_validate() returns %FALSE if @max_len is
positive and any of the @max_len bytes are nul.

Returns %TRUE if all of @str was valid. Many GLib and GTK+
routines require valid UTF-8 as input; so data read from a file
or the network should be checked with g_utf8_validate() before
doing anything else with it.</doc>
        <source-position filename="gunicode.h" line="865" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37294">%TRUE if the text was valid UTF-8</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37274">a pointer to character data</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="guint8" gs:managed-name="System.Byte" />
            </array>
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none" gs:managed-name="maxLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37275">max bytes to validate, or -1 to go until NUL</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="end" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="end">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37276">return location for end of valid data</doc>
            <type name="utf8" c:type="const gchar**" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37274">a pointer to character data</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="guint8" gs:managed-name="System.Byte" />
            </array>
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none" gs:managed-name="maxLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37275">max bytes to validate, or -1 to go until NUL</doc>
            <type name="gssize" c:type="gssize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="end" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="end">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37276">return location for end of valid data</doc>
            <type name="utf8" c:type="const gchar**" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
      <method name="validate_len" c:identifier="g_utf8_validate_len" version="2.60" gs:pinvoke-only="1" gs:dll-name="glib-2.0" gs:managed-name="TryValidateLen" gs:extension-method="1">
        <doc xml:space="preserve" filename="glib-2.0.c" line="37298">Validates UTF-8 encoded text.

As with g_utf8_validate(), but @max_len must be set, and hence this function
will always return %FALSE if any of the bytes of @str are nul.</doc>
        <source-position filename="gunicode.h" line="869" />
        <return-value transfer-ownership="none" gs:managed-name="ret" direction="in">
          <doc xml:space="preserve" filename="glib-2.0.c" line="37309">%TRUE if the text was valid UTF-8</doc>
          <type name="gboolean" c:type="gboolean" gs:managed-name="System.Boolean" />
        </return-value>
        <parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37300">a pointer to character data</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="guint8" gs:managed-name="System.Byte" />
            </array>
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none" gs:managed-name="maxLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37301">max bytes to validate</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="end" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="end">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37302">return location for end of valid data</doc>
            <type name="utf8" c:type="const gchar**" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </parameters>
        <gs:managed-parameters>
          <instance-parameter name="str" transfer-ownership="none" gs:managed-name="str" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37300">a pointer to character data</doc>
            <array length="1" zero-terminated="0" c:type="const gchar*" gs:managed-name="GISharp.Runtime.CArray" gs:is-pointer="1">
              <type name="guint8" gs:managed-name="System.Byte" />
            </array>
          </instance-parameter>
          <parameter name="max_len" transfer-ownership="none" gs:managed-name="maxLen" direction="in">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37301">max bytes to validate</doc>
            <type name="gsize" c:type="gsize" gs:managed-name="System.Int32" />
          </parameter>
          <parameter name="end" direction="out" caller-allocates="0" transfer-ownership="none" optional="1" allow-none="1" gs:managed-name="end">
            <doc xml:space="preserve" filename="glib-2.0.c" line="37302">return location for end of valid data</doc>
            <type name="utf8" c:type="const gchar**" gs:managed-name="GISharp.Lib.GLib.Utf8" gs:is-pointer="1" />
          </parameter>
        </gs:managed-parameters>
      </method>
    </gs:static-class>
  </namespace>
</repository>