<declaration>

<member name='Mutex.P'>
</member>

<member name='Mutex.I'>
</member>

<member name='Mutex.Clear()'>
<summary>
Frees the resources allocated to a mutex with <see cref="Mutex.Init()"/>.
</summary>
<remarks>
This function should not be used with a <see cref="Mutex"/> that has been
statically allocated.

Calling <see cref="Mutex.Clear()"/> on a locked mutex leads to undefined
behaviour.

Sine: 2.32
</remarks>
</member>

<member name='Mutex.Init()'>
<summary>
Initializes a <see cref="Mutex"/> so that it can be used.
</summary>
<remarks>
This function is useful to initialize a mutex that has been
allocated on the stack, or as part of a larger structure.
It is not necessary to initialize a mutex that has been
statically allocated.

|[&lt;!-- language="C" --&gt;
  typedef struct {
    GMutex m;
    ...
  } Blob;

Blob *b;

b = g_new (Blob, 1);
g_mutex_init (&amp;b-&gt;m);
]|

To undo the effect of <see cref="Mutex.Init()"/> when a mutex is no longer
needed, use <see cref="Mutex.Clear()"/>.

Calling <see cref="Mutex.Init()"/> on an already initialized <see cref="Mutex"/> leads
to undefined behaviour.
</remarks>
</member>

<member name='Mutex.Lock()'>
<summary>
Locks this instance. If this instance is already locked by another thread, the
current thread will block until this instance is unlocked by the other
thread.
</summary>
<remarks>
<see cref="Mutex"/> is neither guaranteed to be recursive nor to be
non-recursive.  As such, calling <see cref="Mutex.Lock()"/> on a <see cref="Mutex"/> that has
already been locked by the same thread results in undefined behaviour
(including but not limited to deadlocks).
</remarks>
</member>

<member name='Mutex.Trylock()'>
<summary>
Tries to lock this instance. If this instance is already locked by another thread,
it immediately returns <c>false</c>. Otherwise it locks this instance and returns
<c>true</c>.
</summary>
<remarks>
<see cref="Mutex"/> is neither guaranteed to be recursive nor to be
non-recursive.  As such, calling <see cref="Mutex.Lock()"/> on a <see cref="Mutex"/> that has
already been locked by the same thread results in undefined behaviour
(including but not limited to deadlocks or arbitrary return values).
</remarks>
<returns>
<c>true</c> if this instance could be locked
</returns>
</member>

<member name='Mutex.Unlock()'>
<summary>
Unlocks this instance. If another thread is blocked in a <see cref="Mutex.Lock()"/>
call for this instance, it will become unblocked and can lock this instance itself.
</summary>
<remarks>
Calling <see cref="Mutex.Unlock()"/> on a mutex that is not locked by the
current thread leads to undefined behaviour.
</remarks>
</member>

<member name='Mutex'>
<summary>
The <see cref="Mutex"/> struct is an opaque data structure to represent a mutex
(mutual exclusion). It can be used to protect data against shared
access.
</summary>
<remarks>
Take for example the following function:
|[&lt;!-- language="C" --&gt;
  int
  give_me_next_number (void)
  {
    static int current_number = 0;

    // now do a very complicated calculation to calculate the new
    // number, this might for example be a random number generator
    current_number = calc_next_number (current_number);

    return current_number;
  }
]|
It is easy to see that this won't work in a multi-threaded
application. There current_number must be protected against shared
access. A <see cref="Mutex"/> can be used as a solution to this problem:
|[&lt;!-- language="C" --&gt;
  int
  give_me_next_number (void)
  {
    static GMutex mutex;
    static int current_number = 0;
    int ret_val;

    g_mutex_lock (&amp;mutex);
    ret_val = current_number = calc_next_number (current_number);
    g_mutex_unlock (&amp;mutex);

    return ret_val;
  }
]|
Notice that the <see cref="Mutex"/> is not initialised to any particular value.
Its placement in static storage ensures that it will be initialised
to all-zeros, which is appropriate.

If a <see cref="Mutex"/> is placed in other contexts (eg: embedded in a struct)
then it must be explicitly initialised using <see cref="Mutex.Init()"/>.

A <see cref="Mutex"/> should only be accessed via g_mutex_ functions.
</remarks>
</member>

</declaration>
