<declaration>

<member name='ArgInfo.Closure'>
<summary>
Obtain the index of the user data argument. This is only valid
for arguments which are callbacks.
</summary>
</member>

<member name='ArgInfo.Destroy'>
<summary>
Obtains the index of the #GDestroyNotify argument. This is only valid
for arguments which are callbacks.
</summary>
</member>

<member name='ArgInfo.Direction'>
<summary>
Obtain the direction of the argument. Check <see cref="Direction"/> for possible
direction values.
</summary>
</member>

<member name='ArgInfo.OwnershipTransfer'>
<summary>
Obtain the ownership transfer for this argument.
<see cref="Transfer"/> contains a list of possible values.
</summary>
</member>

<member name='ArgInfo.Scope'>
<summary>
Obtain the scope type for this argument. The scope type explains
how a callback is going to be invoked, most importantly when
the resources required to invoke it can be freed.
<see cref="ScopeType"/> contains a list of possible values.
</summary>
</member>

<member name='ArgInfo.Type'>
<summary>
Obtain the type information for this instance.
</summary>
</member>

<member name='ArgInfo.IsCallerAllocates'>
<summary>
Obtain if the argument is a pointer to a struct or object that will
receive an output of a function.  The default assumption for
<see cref="Direction.Out"/> arguments which have allocation is that the
callee allocates; if this is <c>true</c>, then the caller must allocate.
</summary>
</member>

<member name='ArgInfo.IsOptional'>
<summary>
Obtain if the argument is optional.  For 'out' arguments this means
that you can pass <c>null</c> in order to ignore the result.
</summary>
</member>

<member name='ArgInfo.IsReturnValue'>
<summary>
Obtain if the argument is a return value. It can either be a
parameter or a return value.
</summary>
</member>

<member name='ArgInfo.IsSkip'>
<summary>
Obtain if an argument is only useful in C.
</summary>
</member>

<member name='ArgInfo.MayBeNull'>
<summary>
Obtain if the type of the argument includes the possibility of <c>null</c>.
For 'in' values this means that <c>null</c> is a valid value.  For 'out'
values, this means that <c>null</c> may be returned.
</summary>
<remarks>
See also <see cref="ArgInfo.GetIsOptional()"/>.
</remarks>
</member>

<member name='ArgInfo'>
<summary>
Represents an argument.
</summary>
</member>

</declaration>
