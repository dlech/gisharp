// SPDX-License-Identifier: MIT
// ATTENTION: This file is automatically generated. Do not edit manually.
#nullable enable
namespace GISharp.Lib.GIRepository
{
    /// <include file="FieldInfo.xmldoc" path="declaration/member[@name='FieldInfo']/*" />
    public unsafe partial class FieldInfo : GISharp.Lib.GIRepository.BaseInfo
    {
        /// <summary>
        /// The unmanaged data structure.
        /// </summary>
        public new struct UnmanagedStruct
        {
        }

        /// <include file="FieldInfo.xmldoc" path="declaration/member[@name='FieldInfo.Flags']/*" />
        public GISharp.Lib.GIRepository.FieldInfoFlags Flags { get => GetFlags(); }

        /// <include file="FieldInfo.xmldoc" path="declaration/member[@name='FieldInfo.Offset']/*" />
        public System.Int32 Offset { get => GetOffset(); }

        /// <include file="FieldInfo.xmldoc" path="declaration/member[@name='FieldInfo.Size']/*" />
        public System.Int32 Size { get => GetSize(); }

        /// <include file="FieldInfo.xmldoc" path="declaration/member[@name='FieldInfo.Type']/*" />
        public GISharp.Lib.GIRepository.TypeInfo Type { get => GetType_(); }

        /// <summary>
        /// For internal runtime use only.
        /// </summary>
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
        public FieldInfo(System.IntPtr handle, GISharp.Runtime.Transfer ownership) : base(handle, ownership)
        {
        }

        /// <summary>
        /// Obtain the flags for this #GIFieldInfo. See #GIFieldInfoFlags for possible
        /// flag values.
        /// </summary>
        /// <param name="info">
        /// a #GIFieldInfo
        /// </param>
        /// <returns>
        /// the flags
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="FieldInfoFlags" type="GIFieldInfoFlags" managed-name="FieldInfoFlags" /> */
        /* transfer-ownership:none direction:in */
        private static extern GISharp.Lib.GIRepository.FieldInfoFlags g_field_info_get_flags(
        /* <type name="FieldInfo" type="GIFieldInfo*" managed-name="FieldInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct* info);
        partial void CheckGetFlagsArgs();

        private GISharp.Lib.GIRepository.FieldInfoFlags GetFlags()
        {
            CheckGetFlagsArgs();
            var info_ = (GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_field_info_get_flags(info_);
            var ret = (GISharp.Lib.GIRepository.FieldInfoFlags)ret_;
            return ret;
        }

        /// <summary>
        /// Obtain the offset in bytes of the field member, this is relative
        /// to the beginning of the struct or union.
        /// </summary>
        /// <param name="info">
        /// a #GIFieldInfo
        /// </param>
        /// <returns>
        /// the field offset
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Int32 g_field_info_get_offset(
        /* <type name="FieldInfo" type="GIFieldInfo*" managed-name="FieldInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct* info);
        partial void CheckGetOffsetArgs();

        private System.Int32 GetOffset()
        {
            CheckGetOffsetArgs();
            var info_ = (GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_field_info_get_offset(info_);
            var ret = (System.Int32)ret_;
            return ret;
        }

        /// <summary>
        /// Obtain the size in bits of the field member, this is how
        /// much space you need to allocate to store the field.
        /// </summary>
        /// <param name="info">
        /// a #GIFieldInfo
        /// </param>
        /// <returns>
        /// the field size
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="gint" type="gint" managed-name="System.Int32" /> */
        /* transfer-ownership:none direction:in */
        private static extern System.Int32 g_field_info_get_size(
        /* <type name="FieldInfo" type="GIFieldInfo*" managed-name="FieldInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct* info);
        partial void CheckGetSizeArgs();

        private System.Int32 GetSize()
        {
            CheckGetSizeArgs();
            var info_ = (GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_field_info_get_size(info_);
            var ret = (System.Int32)ret_;
            return ret;
        }

        /// <summary>
        /// Obtain the type of a field as a #GITypeInfo.
        /// </summary>
        /// <param name="info">
        /// a #GIFieldInfo
        /// </param>
        /// <returns>
        /// the #GITypeInfo. Free the struct by calling
        /// g_base_info_unref() when done.
        /// </returns>
        [System.Runtime.InteropServices.DllImportAttribute("girepository-1.0", CallingConvention = System.Runtime.InteropServices.CallingConvention.Cdecl)]
        /* <type name="TypeInfo" type="GITypeInfo*" managed-name="TypeInfo" is-pointer="1" /> */
        /* transfer-ownership:full direction:in */
        private static extern GISharp.Lib.GIRepository.TypeInfo.UnmanagedStruct* g_field_info_get_type(
        /* <type name="FieldInfo" type="GIFieldInfo*" managed-name="FieldInfo" is-pointer="1" /> */
        /* transfer-ownership:none direction:in */
        GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct* info);
        partial void CheckGetType_Args();

        private GISharp.Lib.GIRepository.TypeInfo GetType_()
        {
            CheckGetType_Args();
            var info_ = (GISharp.Lib.GIRepository.FieldInfo.UnmanagedStruct*)UnsafeHandle;
            var ret_ = g_field_info_get_type(info_);
            var ret = GISharp.Runtime.Opaque.GetInstance<GISharp.Lib.GIRepository.TypeInfo>((System.IntPtr)ret_, GISharp.Runtime.Transfer.Full)!;
            return ret;
        }
    }
}