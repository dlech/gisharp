// SPDX-License-Identifier: MIT
// Copyright (c) 2015-2019 David Lechner <david@lechnology.com>

// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

using System;
using System.Runtime.InteropServices;

namespace GISharp.Lib.GIRepository
{
    public sealed class ConstantInfo : BaseInfo
    {
        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern void g_constant_info_free_value (IntPtr raw, ref Argument value);

        [DllImport ("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern IntPtr g_constant_info_get_type (IntPtr raw);

        public TypeInfo TypeInfo {
            get {
                IntPtr raw_ret = g_constant_info_get_type (Handle);
                return GetInstance<TypeInfo>(raw_ret);
            }
        }

        [DllImport("libgirepository-1.0", CallingConvention = CallingConvention.Cdecl)]
        static extern int g_constant_info_get_value(IntPtr raw, out Argument value);

        public object Value {
            get {
                Argument value;
                var size = g_constant_info_get_value(Handle, out value);
                try {
                    return TypeInfo.Tag switch {
                        TypeTag.Boolean => value.Boolean,
                        TypeTag.Double => value.Double,
                        TypeTag.Float => value.Float,
                        TypeTag.Int8 => value.Int8,
                        TypeTag.Int16 => value.Int16,
                        TypeTag.Int32 => value.Int32,
                        TypeTag.Int64 => value.Int64,
                        TypeTag.UInt8 => value.UInt8,
                        TypeTag.UInt16 => value.UInt16,
                        TypeTag.UInt32 => value.UInt32,
                        TypeTag.UInt64 => value.UInt64,
                        TypeTag.UTF8 => (object)value.GetString(size).ToString(),
                        _ => throw new Exception($"Unexpected value type '{TypeInfo.Tag}'")
                    };
                }
                finally {
                    g_constant_info_free_value(Handle, ref value);
                }
            }
        }

        public ConstantInfo (IntPtr raw) : base (raw)
        {
        }
    }
}
