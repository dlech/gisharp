// This file was originally generated by the Gtk# (gapi3) code generator.
// It is now maintained by hand.

namespace GISharp.Lib.GIRepository
{
    /// <summary>
    /// Ownership transfer.
    /// </summary>
    /// <remarks>
    /// The transfer is the exchange of data between two parts, from the callee
    /// to the caller. The callee is either a function/method/signal or an
    /// object/interface where a property is defined. The caller is the side
    /// accessing a property or calling a function. GITransfer specifies who's
    /// responsible for freeing the resources after the ownership transfer is
    /// complete. In case of a containing type such as a list, an array or a
    /// hash table the container itself is specified differently from the items
    /// within the container itself. Each container is freed differently, check
    /// the documentation for the types themselves for information on how to
    /// free them.
    /// </remarks>
    public enum Transfer
    {
        /// <summary>
        /// Transfer nothing from the callee to the caller.
        /// </summary>
        /// <remarks>
        /// The callee (function or the type instance the property belongs to)
        /// retains the ownership of the transfer and the caller doesn't need to
        /// do anything to free up the resources of this transfer.
        /// </remarks>
        Nothing,

        /// <summary>
        /// Transfer the container from the callee to the caller.
        /// </summary>
        /// <remarks>
        /// The callee retains the ownership of the individual items in the container
        /// (list, array, hash table) and the caller has to free up the container
        /// resources (g_list_free()/g_hash_table_destroy() etc) of this transfer.
        /// </remarks>
        Container,

        /// <summary>
        /// Transfer everything from the callee to the caller.
        /// </summary>
        /// <remarks>
        /// This is the case when the callee creates a copy of all the data it
        /// returns, e.g. the container and its contents. The caller is responsible
        /// for cleaning up the container and item resources of this transfer.
        /// </remarks>
        Everything,
    }
}
